###############################################################################
#
# IAR ANSI C/C++ Compiler V7.40.2.8542/W32 for ARM        29/Jul/2018  00:37:59
# Copyright 1999-2015 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  H:\智能车程序2018\三轮比赛\7.29-sc\lib\C\KEA128_kbi.c
#    Command line =  
#        H:\智能车程序2018\三轮比赛\7.29-sc\lib\C\KEA128_kbi.c -D IAR -D
#        TWR_K60N512 -D _DLIB_FILE_DESCRIPTOR -lCN
#        H:\智能车程序2018\三轮比赛\7.29-sc\iar\KEA_128_FLASH\List\ -lB
#        H:\智能车程序2018\三轮比赛\7.29-sc\iar\KEA_128_FLASH\List\ -o
#        H:\智能车程序2018\三轮比赛\7.29-sc\iar\KEA_128_FLASH\Obj\ --no_cse
#        --no_unroll --no_inline --no_code_motion --no_tbaa --no_clustering
#        --no_scheduling --debug --endian=little --cpu=Cortex-M0+ -e --fpu=None
#        --dlib_config F:\IAR安装包\arm\INC\c\DLib_Config_Normal.h -I
#        H:\智能车程序2018\三轮比赛\7.29-sc\iar\..\device\H\ -I
#        H:\智能车程序2018\三轮比赛\7.29-sc\iar\..\user\H\ -I
#        H:\智能车程序2018\三轮比赛\7.29-sc\iar\..\system\ -I
#        H:\智能车程序2018\三轮比赛\7.29-sc\iar\..\lib\H\ -I
#        H:\智能车程序2018\三轮比赛\7.29-sc\iar\..\system\coreSupport\ -On
#    List file    =  
#        H:\智能车程序2018\三轮比赛\7.29-sc\iar\KEA_128_FLASH\List\KEA128_kbi.lst
#    Object file  =  
#        H:\智能车程序2018\三轮比赛\7.29-sc\iar\KEA_128_FLASH\Obj\KEA128_kbi.o
#
###############################################################################

H:\智能车程序2018\三轮比赛\7.29-sc\lib\C\KEA128_kbi.c
      1          /*********************************************************************************************************************
      2           * COPYRIGHT NOTICE
      3           * Copyright (c) 2017,逐飞科技
      4           * All rights reserved.
      5           * 技术讨论QQ群：179029047
      6           *
      7           * 以下所有内容版权均属逐飞科技所有，未经允许不得用于商业用途，
      8           * 欢迎各位使用并传播本程序，修改内容时必须保留逐飞科技的版权声明。
      9           *
     10           * @file       		KEA128_kbi
     11           * @company	   		成都逐飞科技有限公司
     12           * @author     		逐飞科技(QQ3184284598)
     13           * @version    		v2.0
     14           * @Software 		IAR 7.7 or MDK 5.23
     15           * @Target core		S9KEA128AMLK
     16           * @Taobao   		https://seekfree.taobao.com/
     17           * @date       		2017-11-6
     18           ********************************************************************************************************************/
     19          
     20          
     21          #include "KEA128_kbi.h"
     22          
     23          

   \                                 In section .data, align 4
     24          KBI_Type * kbi[2] = KBI_BASES;
   \                     kbi:
   \   00000000   0x40079000         DC32 40079000H, 4007A000H
   \              0x4007A000   
     25          
     26          
     27          //-------------------------------------------------------------------------------------------------------------------
     28          //  @brief      KBI键盘中断初始化
     29          //  @param      chn             选择kbi通道   可选范围 参看KBI_CHn枚举
     30          //  @return     void
     31          //  @since      v2.0
     32          //  Sample usage:               kbi_init(KBI1_P0,IRQ_RISING);		            //通道选择为KBI1_P0，上升沿触发
     33          //								set_irq_priority(KBI1_IRQn,1);					//设置优先级,根据自己的需求设置 可设置范围为 0 - 3
     34          //								enable_irq(KBI1_IRQn);							//打开KBI1_IRQn的中断开关
     35          //								EnableInterrupts;								//打开总的中断开关
     36          //-------------------------------------------------------------------------------------------------------------------

   \                                 In section .text, align 4, keep-with-next
     37          void kbi_init(KBI_CHn chn, TRIG_CFG cfg)
     38          {
   \                     kbi_init: (+1)
   \   00000000   0xB5F8             PUSH     {R3-R7,LR}
   \   00000002   0x0005             MOVS     R5,R0
   \   00000004   0x000C             MOVS     R4,R1
     39              uint8 kbi_x,kbi_n;
     40              
     41              kbi_x = KBIx(chn);      //获取模块号
   \   00000006   0x0028             MOVS     R0,R5
   \   00000008   0xB2C0             UXTB     R0,R0
   \   0000000A   0x0940             LSRS     R0,R0,#+5
   \   0000000C   0x0006             MOVS     R6,R0
     42              kbi_n = KBIn(chn);      //获取引脚号
   \   0000000E   0x06E8             LSLS     R0,R5,#+27       ;; ZeroExtS R0,R5,#+27,#+27
   \   00000010   0x0EC0             LSRS     R0,R0,#+27
   \   00000012   0x0007             MOVS     R7,R0
     43              
     44              //开启KBI时钟
     45              if(0 == kbi_x)  SIM->SCGC |= SIM_SCGC_KBI0_MASK;
   \   00000014   0xB2F6             UXTB     R6,R6
   \   00000016   0x2E00             CMP      R6,#+0
   \   00000018   0xD107             BNE      ??kbi_init_0
   \   0000001A   0x4844             LDR      R0,??kbi_init_1  ;; 0x40048014
   \   0000001C   0x6800             LDR      R0,[R0, #+0]
   \   0000001E   0x2180             MOVS     R1,#+128
   \   00000020   0x0449             LSLS     R1,R1,#+17       ;; #+16777216
   \   00000022   0x4301             ORRS     R1,R1,R0
   \   00000024   0x4841             LDR      R0,??kbi_init_1  ;; 0x40048014
   \   00000026   0x6001             STR      R1,[R0, #+0]
   \   00000028   0xE006             B        ??kbi_init_2
     46              else            SIM->SCGC |= SIM_SCGC_KBI1_MASK;
   \                     ??kbi_init_0: (+1)
   \   0000002A   0x4840             LDR      R0,??kbi_init_1  ;; 0x40048014
   \   0000002C   0x6800             LDR      R0,[R0, #+0]
   \   0000002E   0x2180             MOVS     R1,#+128
   \   00000030   0x0489             LSLS     R1,R1,#+18       ;; #+33554432
   \   00000032   0x4301             ORRS     R1,R1,R0
   \   00000034   0x483D             LDR      R0,??kbi_init_1  ;; 0x40048014
   \   00000036   0x6001             STR      R1,[R0, #+0]
     47              
     48              //屏蔽KBI中断
     49              kbi[kbi_x]->SC &= ~(uint32)KBI_SC_KBIE_MASK;
   \                     ??kbi_init_2: (+1)
   \   00000038   0x483D             LDR      R0,??kbi_init_1+0x4
   \   0000003A   0xB2F6             UXTB     R6,R6
   \   0000003C   0x2104             MOVS     R1,#+4
   \   0000003E   0x4371             MULS     R1,R6,R1
   \   00000040   0x5840             LDR      R0,[R0, R1]
   \   00000042   0x6880             LDR      R0,[R0, #+8]
   \   00000044   0x2102             MOVS     R1,#+2
   \   00000046   0x4388             BICS     R0,R0,R1
   \   00000048   0x4939             LDR      R1,??kbi_init_1+0x4
   \   0000004A   0xB2F6             UXTB     R6,R6
   \   0000004C   0x2204             MOVS     R2,#+4
   \   0000004E   0x4372             MULS     R2,R6,R2
   \   00000050   0x5889             LDR      R1,[R1, R2]
   \   00000052   0x6088             STR      R0,[R1, #+8]
     50          
     51              //设置触发模式
     52              if((IRQ_FALLING == cfg) || (IRQ_FALLING_LOW == cfg))
   \   00000054   0xB2E4             UXTB     R4,R4
   \   00000056   0x2C00             CMP      R4,#+0
   \   00000058   0xD002             BEQ      ??kbi_init_3
   \   0000005A   0xB2E4             UXTB     R4,R4
   \   0000005C   0x2C02             CMP      R4,#+2
   \   0000005E   0xD10F             BNE      ??kbi_init_4
     53                  kbi[kbi_x]->ES &= ~((uint32)1<<kbi_n);
   \                     ??kbi_init_3: (+1)
   \   00000060   0x4833             LDR      R0,??kbi_init_1+0x4
   \   00000062   0xB2F6             UXTB     R6,R6
   \   00000064   0x2104             MOVS     R1,#+4
   \   00000066   0x4371             MULS     R1,R6,R1
   \   00000068   0x5840             LDR      R0,[R0, R1]
   \   0000006A   0x6840             LDR      R0,[R0, #+4]
   \   0000006C   0x2101             MOVS     R1,#+1
   \   0000006E   0x40B9             LSLS     R1,R1,R7
   \   00000070   0x4388             BICS     R0,R0,R1
   \   00000072   0x492F             LDR      R1,??kbi_init_1+0x4
   \   00000074   0xB2F6             UXTB     R6,R6
   \   00000076   0x2204             MOVS     R2,#+4
   \   00000078   0x4372             MULS     R2,R6,R2
   \   0000007A   0x5889             LDR      R1,[R1, R2]
   \   0000007C   0x6048             STR      R0,[R1, #+4]
   \   0000007E   0xE00E             B        ??kbi_init_5
     54              else
     55                  kbi[kbi_x]->ES |= ((uint32)1<<kbi_n);
   \                     ??kbi_init_4: (+1)
   \   00000080   0x482B             LDR      R0,??kbi_init_1+0x4
   \   00000082   0xB2F6             UXTB     R6,R6
   \   00000084   0x2104             MOVS     R1,#+4
   \   00000086   0x4371             MULS     R1,R6,R1
   \   00000088   0x5840             LDR      R0,[R0, R1]
   \   0000008A   0x6841             LDR      R1,[R0, #+4]
   \   0000008C   0x2001             MOVS     R0,#+1
   \   0000008E   0x40B8             LSLS     R0,R0,R7
   \   00000090   0x4308             ORRS     R0,R0,R1
   \   00000092   0x4927             LDR      R1,??kbi_init_1+0x4
   \   00000094   0xB2F6             UXTB     R6,R6
   \   00000096   0x2204             MOVS     R2,#+4
   \   00000098   0x4372             MULS     R2,R6,R2
   \   0000009A   0x5889             LDR      R1,[R1, R2]
   \   0000009C   0x6048             STR      R0,[R1, #+4]
     56              
     57              //设置上拉
     58              prot_pull((PTX_n)((uint8)(chn)));
   \                     ??kbi_init_5: (+1)
   \   0000009E   0x0028             MOVS     R0,R5
   \   000000A0   0xB2C0             UXTB     R0,R0
   \   000000A2   0x.... 0x....      BL       prot_pull
     59              
     60              //使能KBI引脚
     61              kbi[kbi_x]->PE |= (1<<kbi_n);
   \   000000A6   0x4822             LDR      R0,??kbi_init_1+0x4
   \   000000A8   0xB2F6             UXTB     R6,R6
   \   000000AA   0x2104             MOVS     R1,#+4
   \   000000AC   0x4371             MULS     R1,R6,R1
   \   000000AE   0x5840             LDR      R0,[R0, R1]
   \   000000B0   0x6801             LDR      R1,[R0, #+0]
   \   000000B2   0x2001             MOVS     R0,#+1
   \   000000B4   0x40B8             LSLS     R0,R0,R7
   \   000000B6   0x4308             ORRS     R0,R0,R1
   \   000000B8   0x491D             LDR      R1,??kbi_init_1+0x4
   \   000000BA   0xB2F6             UXTB     R6,R6
   \   000000BC   0x2204             MOVS     R2,#+4
   \   000000BE   0x4372             MULS     R2,R6,R2
   \   000000C0   0x5889             LDR      R1,[R1, R2]
   \   000000C2   0x6008             STR      R0,[R1, #+0]
     62              
     63              if(0 == kbi_x)  CLEAN_KBI0_FLAG;                         //清除标志位
   \   000000C4   0xB2F6             UXTB     R6,R6
   \   000000C6   0x2E00             CMP      R6,#+0
   \   000000C8   0xD106             BNE      ??kbi_init_6
   \   000000CA   0x481A             LDR      R0,??kbi_init_1+0x8  ;; 0x40079008
   \   000000CC   0x6800             LDR      R0,[R0, #+0]
   \   000000CE   0x2124             MOVS     R1,#+36
   \   000000D0   0x4301             ORRS     R1,R1,R0
   \   000000D2   0x4818             LDR      R0,??kbi_init_1+0x8  ;; 0x40079008
   \   000000D4   0x6001             STR      R1,[R0, #+0]
   \   000000D6   0xE005             B        ??kbi_init_7
     64              else            CLEAN_KBI1_FLAG;                         //清除标志位
   \                     ??kbi_init_6: (+1)
   \   000000D8   0x4817             LDR      R0,??kbi_init_1+0xC  ;; 0x4007a008
   \   000000DA   0x6800             LDR      R0,[R0, #+0]
   \   000000DC   0x2124             MOVS     R1,#+36
   \   000000DE   0x4301             ORRS     R1,R1,R0
   \   000000E0   0x4815             LDR      R0,??kbi_init_1+0xC  ;; 0x4007a008
   \   000000E2   0x6001             STR      R1,[R0, #+0]
     65              
     66              //设置触发模式
     67              if((IRQ_FALLING == cfg) || (IRQ_RISING == cfg))
   \                     ??kbi_init_7: (+1)
   \   000000E4   0xB2E4             UXTB     R4,R4
   \   000000E6   0x2C00             CMP      R4,#+0
   \   000000E8   0xD002             BEQ      ??kbi_init_8
   \   000000EA   0xB2E4             UXTB     R4,R4
   \   000000EC   0x2C01             CMP      R4,#+1
   \   000000EE   0xD107             BNE      ??kbi_init_9
     68              {
     69                  kbi[kbi_x]->SC = 0;                                 //边沿触发模式 0：边沿触发   1：电平触发
   \                     ??kbi_init_8: (+1)
   \   000000F0   0x2000             MOVS     R0,#+0
   \   000000F2   0x490F             LDR      R1,??kbi_init_1+0x4
   \   000000F4   0xB2F6             UXTB     R6,R6
   \   000000F6   0x2204             MOVS     R2,#+4
   \   000000F8   0x4372             MULS     R2,R6,R2
   \   000000FA   0x5889             LDR      R1,[R1, R2]
   \   000000FC   0x6088             STR      R0,[R1, #+8]
   \   000000FE   0xE006             B        ??kbi_init_10
     70              }
     71              else
     72              {
     73                  kbi[kbi_x]->SC = KBI_SC_KBMOD_MASK;                 //边沿触发模式 0：边沿触发   1：电平触发
   \                     ??kbi_init_9: (+1)
   \   00000100   0x2001             MOVS     R0,#+1
   \   00000102   0x490B             LDR      R1,??kbi_init_1+0x4
   \   00000104   0xB2F6             UXTB     R6,R6
   \   00000106   0x2204             MOVS     R2,#+4
   \   00000108   0x4372             MULS     R2,R6,R2
   \   0000010A   0x5889             LDR      R1,[R1, R2]
   \   0000010C   0x6088             STR      R0,[R1, #+8]
     74              }
     75              
     76              
     77              
     78              kbi[kbi_x]->SC |= ( 0
     79                                  | KBI_SC_KBIE_MASK    //KBI中断使能
     80                                  | KBI_SC_RSTKBSP_MASK
     81                                  //| KBI_SC_KBMOD_MASK   //边沿触发模式 0：边沿触发   1：电平触发
     82                                  | KBI_SC_KBSPEN_MASK  //使能KBI_SP寄存器
     83                                  );
   \                     ??kbi_init_10: (+1)
   \   0000010E   0x4808             LDR      R0,??kbi_init_1+0x4
   \   00000110   0xB2F6             UXTB     R6,R6
   \   00000112   0x2104             MOVS     R1,#+4
   \   00000114   0x4371             MULS     R1,R6,R1
   \   00000116   0x5840             LDR      R0,[R0, R1]
   \   00000118   0x6881             LDR      R1,[R0, #+8]
   \   0000011A   0x2032             MOVS     R0,#+50
   \   0000011C   0x4308             ORRS     R0,R0,R1
   \   0000011E   0x4904             LDR      R1,??kbi_init_1+0x4
   \   00000120   0xB2F6             UXTB     R6,R6
   \   00000122   0x2204             MOVS     R2,#+4
   \   00000124   0x4372             MULS     R2,R6,R2
   \   00000126   0x5889             LDR      R1,[R1, R2]
   \   00000128   0x6088             STR      R0,[R1, #+8]
     84          }
   \   0000012A   0xBDF1             POP      {R0,R4-R7,PC}    ;; return
   \                     ??kbi_init_1:
   \   0000012C   0x40048014         DC32     0x40048014
   \   00000130   0x........         DC32     kbi
   \   00000134   0x40079008         DC32     0x40079008
   \   00000138   0x4007A008         DC32     0x4007a008
     85          
     86          
     87          
     88          

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      24   kbi_init
        24   -> prot_pull


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       8  kbi
     316  kbi_init

 
   8 bytes in section .data
 316 bytes in section .text
 
 316 bytes of CODE memory
   8 bytes of DATA memory

Errors: none
Warnings: none
