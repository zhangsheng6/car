###############################################################################
#
# IAR ANSI C/C++ Compiler V7.40.2.8542/W32 for ARM        31/Jul/2018  01:25:13
# Copyright 1999-2015 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  H:\智能车程序2018\三轮比赛\7.29-sc\user\C\main.c
#    Command line =  
#        H:\智能车程序2018\三轮比赛\7.29-sc\user\C\main.c -D IAR -D TWR_K60N512
#        -D _DLIB_FILE_DESCRIPTOR -lCN
#        H:\智能车程序2018\三轮比赛\7.29-sc\iar\KEA_128_FLASH\List\ -lB
#        H:\智能车程序2018\三轮比赛\7.29-sc\iar\KEA_128_FLASH\List\ -o
#        H:\智能车程序2018\三轮比赛\7.29-sc\iar\KEA_128_FLASH\Obj\ --no_cse
#        --no_unroll --no_inline --no_code_motion --no_tbaa --no_clustering
#        --no_scheduling --debug --endian=little --cpu=Cortex-M0+ -e --fpu=None
#        --dlib_config F:\IAR安装包\arm\INC\c\DLib_Config_Normal.h -I
#        H:\智能车程序2018\三轮比赛\7.29-sc\iar\..\device\H\ -I
#        H:\智能车程序2018\三轮比赛\7.29-sc\iar\..\user\H\ -I
#        H:\智能车程序2018\三轮比赛\7.29-sc\iar\..\system\ -I
#        H:\智能车程序2018\三轮比赛\7.29-sc\iar\..\lib\H\ -I
#        H:\智能车程序2018\三轮比赛\7.29-sc\iar\..\system\coreSupport\ -On
#    List file    =  
#        H:\智能车程序2018\三轮比赛\7.29-sc\iar\KEA_128_FLASH\List\main.lst
#    Object file  =  
#        H:\智能车程序2018\三轮比赛\7.29-sc\iar\KEA_128_FLASH\Obj\main.o
#
###############################################################################

H:\智能车程序2018\三轮比赛\7.29-sc\user\C\main.c
      1          /*
      2          很多事情都不值得你动容。不要觉得会有人相信你。
      3          只有自己靠的住，不要轻易相信他人。
      4          */
      5          #include "allHead.h"
      6          #include "lcd.h"
      7          #include "flash.h"
      8          #include "BL.h"
      9          extern uint8  KEY_sta ;//按键状态，1-按下
     10          extern char position; 
     11          extern float Stop_Plan_Flag;

   \                                 In section .data, align 4
     12          uint32 ijk = 123, kez;
   \                     ijk:
   \   00000000   0x0000007B         DC32 123

   \                                 In section .bss, align 4
   \                     kez:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
     13          float spee[3000]={0};
   \                     spee:
   \   00000000                      DS8 12000

   \                                 In section .bss, align 4
     14          float zhan[3000]={0};
   \                     zhan:
   \   00000000                      DS8 12000

   \                                 In section .bss, align 4
     15          int flash_time=0;
   \                     flash_time:
   \   00000000                      DS8 4

   \                                 In section .bss, align 2
     16          uint16 PIT_times = 0;           //定时次数
   \                     PIT_times:
   \   00000000                      DS8 2

   \                                 In section .bss, align 1
     17          uint8 KEY_textSelect = TEXT_DEFAULT;  //测试菜单 使用
   \                     KEY_textSelect:
   \   00000000                      DS8 1

   \                                 In section .bss, align 1
     18          uint8 carStatus = 0;     //速度方案使用
   \                     carStatus:
   \   00000000                      DS8 1

   \                                 In section .data, align 1
     19          uint8 menuSelect = MENU;//菜单选择
   \                     menuSelect:
   \   00000000   0x01               DC8 1

   \                                 In section .bss, align 4
     20          int z=0,zz=0,man=0;
   \                     z:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
   \                     zz:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
   \                     man:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
     21            int x=0;
   \                     x:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
     22            int zs_car=0;
   \                     zs_car:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
     23          int   speed_control_counter = 0,direction_control_counter=0;
   \                     speed_control_counter:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
   \                     direction_control_counter:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
     24          int  iic_error=0,iic_error_counter=0;
   \                     iic_error:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
   \                     iic_error_counter:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
     25          int  Chazhi_Class=0;
   \                     Chazhi_Class:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
     26          int ms=0,s=0;
   \                     ms:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
   \                     s:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
     27          int delay_stop=0;
   \                     delay_stop:
   \   00000000                      DS8 4
     28          extern int Boma_num;
     29          extern int Boma_Change;
     30          
     31           extern float speed_set_old,//速度设定 
     32          
     33                Direction_P_old,//阿克曼角P                     
     34                Direction_P2_old,Direction_D2_old,//差值PD                        
     35                Angle_P_old;
     36          extern int  akmj_z_old,akmj_w_old;//w20
     37            
     38               
     39          extern float     BB_Z_old,BB_W_old,BB_H_old;
     40          extern int      BB_P_Z_old,BB_P_F_old;
     41          
     42           extern int    Circle_Count6_Max_old,//下次圆环间隔时间1S1000
     43                  Circle_Inductor_M1_old,//进圆环双线值
     44                   Circle_Inductor_M2_old,//测转弯值
     45                   Circle_Inductor_M3_old,//转弯值
     46                   Circle_Inductor_LR1_old; 

   \                                 In section .bss, align 4
     47           int jiemian_flag=0;
   \                     jiemian_flag:
   \   00000000                      DS8 4
     48          /*****************************************************************************************/
     49          // ----------------------------------- MAIN -------------------------------------------- //
     50          /*****************************************************************************************/

   \                                 In section .text, align 2, keep-with-next
     51          void main()
     52          {
   \                     main: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
     53              get_clk();  //因为作用域的原因，必须加载main里面，不能加在时钟里
   \   00000002   0x.... 0x....      BL       get_clk
     54              DISABLE_INTERRUPTS;  //关总中断
   \   00000006   0xB672             CPSID    I
     55          
     56              ADC_Init();//一定要放在最前面，里面开了ADC时钟
   \   00000008   0x.... 0x....      BL       ADC_Init
     57              UART_Init(UART_PART, UART_BAUD);
   \   0000000C   0x21E1             MOVS     R1,#+225
   \   0000000E   0x0249             LSLS     R1,R1,#+9        ;; #+115200
   \   00000010   0x2002             MOVS     R0,#+2
   \   00000012   0x.... 0x....      BL       UART_Init
     58              L3G4200_Init();//顺序随便
   \   00000016   0x.... 0x....      BL       L3G4200_Init
     59              FTM_PwmInit(PWM_CH0, ch0, 10, 0); //PWM 初始化
   \   0000001A   0x2300             MOVS     R3,#+0
   \   0000001C   0x220A             MOVS     R2,#+10
   \   0000001E   0x2100             MOVS     R1,#+0
   \   00000020   0x2002             MOVS     R0,#+2
   \   00000022   0x.... 0x....      BL       FTM_PwmInit
     60              FTM_PwmInit(PWM_CH1, ch1, 10, 0); //PWM 初始化
   \   00000026   0x2300             MOVS     R3,#+0
   \   00000028   0x220A             MOVS     R2,#+10
   \   0000002A   0x2101             MOVS     R1,#+1
   \   0000002C   0x2002             MOVS     R0,#+2
   \   0000002E   0x.... 0x....      BL       FTM_PwmInit
     61              FTM_SpeedInit(FTM_SPEED_L);       //测速 初始化
   \   00000032   0x2000             MOVS     R0,#+0
   \   00000034   0x.... 0x....      BL       FTM_SpeedInit
     62              FTM_SpeedInit(FTM_SPEED_R);       //测速 初始化
   \   00000038   0x2001             MOVS     R0,#+1
   \   0000003A   0x.... 0x....      BL       FTM_SpeedInit
     63              //放在后面
     64              OLED_Init();
   \   0000003E   0x.... 0x....      BL       OLED_Init
     65          
     66              KEY_Init();
   \   00000042   0x.... 0x....      BL       KEY_Init
     67              IoInit();
   \   00000046   0x.... 0x....      BL       IoInit
     68              PIT_Init(PIT0, 1000);             //PIT0 定时 5ms
   \   0000004A   0x21FA             MOVS     R1,#+250
   \   0000004C   0x0089             LSLS     R1,R1,#+2        ;; #+1000
   \   0000004E   0x2000             MOVS     R0,#+0
   \   00000050   0x.... 0x....      BL       PIT_Init
     69            //开定时中断之前要完成的
     70             OLED_Biaoge_ZS(); 
   \   00000054   0x.... 0x....      BL       OLED_Biaoge_ZS
     71              PIT_EnableIrq();                  //开PIT0 中断
   \   00000058   0x.... 0x....      BL       PIT_EnableIrq
     72              ENABLE_INTERRUPTS;   //开总中断   
   \   0000005C   0xB662             CPSIE    I
     73           
     74              while (1)
   \                     ??main_0: (+1)
   \   0000005E   0xE7FE             B        ??main_0
     75              {
     76                
     77                
     78          
     79              }
     80          }
     81          /********PIT0 中断:自定义函数名在中断向量表中进行了替换*****************************************/

   \                                 In section .text, align 2, keep-with-next
     82          void PIT_CH0_IRQHandler(void)
     83          {
   \                     PIT_CH0_IRQHandler: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
     84            PIT_CLEAR;    
   \   00000002   0x....             LDR      R0,??DataTable0  ;; 0x4003710c
   \   00000004   0x6800             LDR      R0,[R0, #+0]
   \   00000006   0x2101             MOVS     R1,#+1
   \   00000008   0x4301             ORRS     R1,R1,R0
   \   0000000A   0x....             LDR      R0,??DataTable0  ;; 0x4003710c
   \   0000000C   0x6001             STR      R1,[R0, #+0]
     85            if ((++PIT_times) >= 500)//每 500ms LED0翻转一次
   \   0000000E   0x....             LDR      R0,??DataTable0_1
   \   00000010   0x8800             LDRH     R0,[R0, #+0]
   \   00000012   0x1C40             ADDS     R0,R0,#+1
   \   00000014   0x....             LDR      R1,??DataTable0_1
   \   00000016   0x8008             STRH     R0,[R1, #+0]
   \   00000018   0x....             LDR      R0,??DataTable0_1
   \   0000001A   0x8800             LDRH     R0,[R0, #+0]
   \   0000001C   0x21FA             MOVS     R1,#+250
   \   0000001E   0x0049             LSLS     R1,R1,#+1        ;; #+500
   \   00000020   0x4288             CMP      R0,R1
   \   00000022   0xDB05             BLT      ??PIT_CH0_IRQHandler_0
     86            {
     87                PIT_times = 0;
   \   00000024   0x2000             MOVS     R0,#+0
   \   00000026   0x....             LDR      R1,??DataTable0_1
   \   00000028   0x8008             STRH     R0,[R1, #+0]
     88                LED_0_TURN;
   \   0000002A   0x2030             MOVS     R0,#+48
   \   0000002C   0x.... 0x....      BL       GpioTurn
     89            }  
     90            
     91          //测试电感环岛
     92            Inductor_analyse();//方向判断 
   \                     ??PIT_CH0_IRQHandler_0: (+1)
   \   00000030   0x.... 0x....      BL       Inductor_analyse
     93            Test_Huandao();    
   \   00000034   0x.... 0x....      BL       Test_Huandao
     94            
     95          /*车跑--------------------------------------------------------------------------*/
     96          if(zs_car==1)
   \   00000038   0x....             LDR      R0,??DataTable0_2
   \   0000003A   0x6800             LDR      R0,[R0, #+0]
   \   0000003C   0x2801             CMP      R0,#+1
   \   0000003E   0xD13C             BNE      ??PIT_CH0_IRQHandler_1
     97          {  
     98            
     99          //霍尔停车
    100             Hall(); 
   \   00000040   0x.... 0x....      BL       Hall
    101             
    102          //陀螺仪检测   
    103             Gyro_ZS(); 
   \   00000044   0x.... 0x....      BL       Gyro_ZS
    104          //延时发车   
    105          //  if(delay_stop<3)
    106          //  {
    107          //     delay_stop++;
    108          //      LED_1_ON;
    109          //   }150,1600,1000，100,50，-3040
    110          //   else
    111          //  {
    112               LED_1_OFF;
   \   00000048   0x2101             MOVS     R1,#+1
   \   0000004A   0x2031             MOVS     R0,#+49
   \   0000004C   0x.... 0x....      BL       GpioSet
    113            //速度环     
    114               z++;
   \   00000050   0x....             LDR      R0,??DataTable0_3
   \   00000052   0x6800             LDR      R0,[R0, #+0]
   \   00000054   0x1C40             ADDS     R0,R0,#+1
   \   00000056   0x....             LDR      R1,??DataTable0_3
   \   00000058   0x6008             STR      R0,[R1, #+0]
    115               if(z>4)//5ms,4
   \   0000005A   0x....             LDR      R0,??DataTable0_3
   \   0000005C   0x6800             LDR      R0,[R0, #+0]
   \   0000005E   0x2805             CMP      R0,#+5
   \   00000060   0xDB06             BLT      ??PIT_CH0_IRQHandler_2
    116               {
    117                  z=0;
   \   00000062   0x2000             MOVS     R0,#+0
   \   00000064   0x....             LDR      R1,??DataTable0_3
   \   00000066   0x6008             STR      R0,[R1, #+0]
    118                  Get_CarSpeed();//获取车速  
   \   00000068   0x.... 0x....      BL       Get_CarSpeed
    119                  BangBang();   
   \   0000006C   0x.... 0x....      BL       BangBang
    120               }
    121              Test_RoadInfo();
   \                     ??PIT_CH0_IRQHandler_2: (+1)
   \   00000070   0x.... 0x....      BL       Test_RoadInfo
    122            Direction_ChaSpeed_Control();
   \   00000074   0x.... 0x....      BL       Direction_ChaSpeed_Control
    123            Controler();
   \   00000078   0x.... 0x....      BL       Controler
    124            
    125            
    126            Direction_Controler();
   \   0000007C   0x.... 0x....      BL       Direction_Controler
    127           
    128          
    129            Motor_control();//电机控制输出PWM 
   \   00000080   0x.... 0x....      BL       Motor_control
    130          
    131          //}
    132            if(Stop_Flag==1)
   \   00000084   0x....             LDR      R0,??DataTable0_4
   \   00000086   0x6800             LDR      R0,[R0, #+0]
   \   00000088   0x21FE             MOVS     R1,#+254
   \   0000008A   0x0589             LSLS     R1,R1,#+22       ;; #+1065353216
   \   0000008C   0x.... 0x....      BL       __aeabi_cfcmpeq
   \   00000090   0xD13B             BNE      ??PIT_CH0_IRQHandler_3
    133            {
    134              speed_set=0;
   \   00000092   0x2000             MOVS     R0,#+0
   \   00000094   0x....             LDR      R1,??DataTable0_5
   \   00000096   0x6008             STR      R0,[R1, #+0]
    135              if(speed_car<20)
   \   00000098   0x....             LDR      R0,??DataTable0_6
   \   0000009A   0x6800             LDR      R0,[R0, #+0]
   \   0000009C   0x....             LDR      R1,??DataTable0_7  ;; 0x41a00000
   \   0000009E   0x.... 0x....      BL       __aeabi_cfcmple
   \   000000A2   0xD232             BCS      ??PIT_CH0_IRQHandler_3
    136              {
    137                 change_L(0);
   \   000000A4   0x2200             MOVS     R2,#+0
   \   000000A6   0x2101             MOVS     R1,#+1
   \   000000A8   0x2002             MOVS     R0,#+2
   \   000000AA   0x.... 0x....      BL       FTM_PwmDuty
    138                 change_R(0);
   \   000000AE   0x2200             MOVS     R2,#+0
   \   000000B0   0x2100             MOVS     R1,#+0
   \   000000B2   0x2002             MOVS     R0,#+2
   \   000000B4   0x.... 0x....      BL       FTM_PwmDuty
   \   000000B8   0xE027             B        ??PIT_CH0_IRQHandler_3
    139              }
    140              
    141            }
    142            
    143          
    144          //  if(Stop_Plan_Flag==1)
    145          //  {
    146          //  ms++; 
    147          //      if(ms>999)
    148          //      {
    149          //        ms=0;
    150          //        s++;
    151          //      }
    152          //  }    
    153            
    154          }
    155          /*停车--------------------------------------------------------------------------*/
    156          else
    157          {
    158            change_L(0);
   \                     ??PIT_CH0_IRQHandler_1: (+1)
   \   000000BA   0x2200             MOVS     R2,#+0
   \   000000BC   0x2101             MOVS     R1,#+1
   \   000000BE   0x2002             MOVS     R0,#+2
   \   000000C0   0x.... 0x....      BL       FTM_PwmDuty
    159            change_R(0); 
   \   000000C4   0x2200             MOVS     R2,#+0
   \   000000C6   0x2100             MOVS     R1,#+0
   \   000000C8   0x2002             MOVS     R0,#+2
   \   000000CA   0x.... 0x....      BL       FTM_PwmDuty
    160            if(Boma_Change)
   \   000000CE   0x....             LDR      R0,??DataTable0_8
   \   000000D0   0x6800             LDR      R0,[R0, #+0]
   \   000000D2   0x2800             CMP      R0,#+0
   \   000000D4   0xD006             BEQ      ??PIT_CH0_IRQHandler_4
    161            {
    162               OLED_Int16(110, 7, Boma_num);
   \   000000D6   0x....             LDR      R0,??DataTable0_9
   \   000000D8   0x6802             LDR      R2,[R0, #+0]
   \   000000DA   0xB212             SXTH     R2,R2
   \   000000DC   0x2107             MOVS     R1,#+7
   \   000000DE   0x206E             MOVS     R0,#+110
   \   000000E0   0x.... 0x....      BL       OLED_Int16
    163            }
    164            
    165            if(jiemian==2)
   \                     ??PIT_CH0_IRQHandler_4: (+1)
   \   000000E4   0x....             LDR      R0,??DataTable0_10
   \   000000E6   0x6800             LDR      R0,[R0, #+0]
   \   000000E8   0x2802             CMP      R0,#+2
   \   000000EA   0xD106             BNE      ??PIT_CH0_IRQHandler_5
    166            {
    167              Data_Old2();
   \   000000EC   0x.... 0x....      BL       Data_Old2
    168              Boma_Gear_ZS();
   \   000000F0   0x.... 0x....      BL       Boma_Gear_ZS
    169             Oled_Data_ZS_All2();
   \   000000F4   0x.... 0x....      BL       Oled_Data_ZS_All2
   \   000000F8   0xE007             B        ??PIT_CH0_IRQHandler_3
    170            }
    171            else
    172            {
    173                OLED_Inductor_Dynamic();//线跳动，数据变化大
   \                     ??PIT_CH0_IRQHandler_5: (+1)
   \   000000FA   0x.... 0x....      BL       OLED_Inductor_Dynamic
    174                Data_Old();
   \   000000FE   0x.... 0x....      BL       Data_Old
    175                Boma_Gear_ZS();
   \   00000102   0x.... 0x....      BL       Boma_Gear_ZS
    176                Oled_Data_ZS_All();
   \   00000106   0x.... 0x....      BL       Oled_Data_ZS_All
    177            }
    178            
    179          
    180          }
    181          //界面2调参
    182            if(jiemian==2)
   \                     ??PIT_CH0_IRQHandler_3: (+1)
   \   0000010A   0x....             LDR      R0,??DataTable0_10
   \   0000010C   0x6800             LDR      R0,[R0, #+0]
   \   0000010E   0x2802             CMP      R0,#+2
   \   00000110   0xD12F             BNE      ??PIT_CH0_IRQHandler_6
    183          
    184          {
    185            if(jiemian_flag!=2)
   \   00000112   0x....             LDR      R0,??DataTable0_11
   \   00000114   0x6800             LDR      R0,[R0, #+0]
   \   00000116   0x2802             CMP      R0,#+2
   \   00000118   0xD006             BEQ      ??PIT_CH0_IRQHandler_7
    186               {
    187               OLED_Clear();
   \   0000011A   0x.... 0x....      BL       OLED_Clear
    188               OLED_Biaoge_Par_ZS();//表格，静态字母
   \   0000011E   0x.... 0x....      BL       OLED_Biaoge_Par_ZS
    189               jiemian_flag=2;
   \   00000122   0x2002             MOVS     R0,#+2
   \   00000124   0x....             LDR      R1,??DataTable0_11
   \   00000126   0x6008             STR      R0,[R1, #+0]
    190               }
    191            
    192               OLED_Key_Par_ZS();//按键改参数//?
   \                     ??PIT_CH0_IRQHandler_7: (+1)
   \   00000128   0x.... 0x....      BL       OLED_Key_Par_ZS
    193            
    194              if (KEY_sta)
   \   0000012C   0x....             LDR      R0,??DataTable0_12
   \   0000012E   0x7800             LDRB     R0,[R0, #+0]
   \   00000130   0x2800             CMP      R0,#+0
   \   00000132   0xD04D             BEQ      ??PIT_CH0_IRQHandler_8
    195              {
    196                  if (KEY_menuChange)//菜单选择和数据显示 更新分两次进行 减小数据量
   \   00000134   0x....             LDR      R0,??DataTable0_13
   \   00000136   0x7800             LDRB     R0,[R0, #+0]
   \   00000138   0x2800             CMP      R0,#+0
   \   0000013A   0xD00C             BEQ      ??PIT_CH0_IRQHandler_9
    197                  {
    198                      OLED_Select_Par_ZS();//三角形
   \   0000013C   0x.... 0x....      BL       OLED_Select_Par_ZS
    199                      KEY_menuChange = !KEY_menuChange;
   \   00000140   0x....             LDR      R0,??DataTable0_13
   \   00000142   0x7800             LDRB     R0,[R0, #+0]
   \   00000144   0x2800             CMP      R0,#+0
   \   00000146   0xD103             BNE      ??PIT_CH0_IRQHandler_10
   \   00000148   0x2001             MOVS     R0,#+1
   \   0000014A   0x....             LDR      R1,??DataTable0_13
   \   0000014C   0x7008             STRB     R0,[R1, #+0]
   \   0000014E   0xE002             B        ??PIT_CH0_IRQHandler_9
   \                     ??PIT_CH0_IRQHandler_10: (+1)
   \   00000150   0x2000             MOVS     R0,#+0
   \   00000152   0x....             LDR      R1,??DataTable0_13
   \   00000154   0x7008             STRB     R0,[R1, #+0]
    200                  }
    201                  Oled_Data_Par_ZS();//大概需要1ms左右,但由于第二次按键不操作，所以时间差可以忽略
   \                     ??PIT_CH0_IRQHandler_9: (+1)
   \   00000156   0x.... 0x....      BL       Oled_Data_Par_ZS
    202                  KEY_sta = !KEY_sta;             
   \   0000015A   0x....             LDR      R0,??DataTable0_12
   \   0000015C   0x7800             LDRB     R0,[R0, #+0]
   \   0000015E   0x2800             CMP      R0,#+0
   \   00000160   0xD103             BNE      ??PIT_CH0_IRQHandler_11
   \   00000162   0x2001             MOVS     R0,#+1
   \   00000164   0x....             LDR      R1,??DataTable0_12
   \   00000166   0x7008             STRB     R0,[R1, #+0]
   \   00000168   0xE032             B        ??PIT_CH0_IRQHandler_8
   \                     ??PIT_CH0_IRQHandler_11: (+1)
   \   0000016A   0x2000             MOVS     R0,#+0
   \   0000016C   0x....             LDR      R1,??DataTable0_12
   \   0000016E   0x7008             STRB     R0,[R1, #+0]
   \   00000170   0xE02E             B        ??PIT_CH0_IRQHandler_8
    203              }
    204          }
    205          //界面1调参
    206          else 
    207          {
    208              if(jiemian_flag!=1)
   \                     ??PIT_CH0_IRQHandler_6: (+1)
   \   00000172   0x....             LDR      R0,??DataTable0_11
   \   00000174   0x6800             LDR      R0,[R0, #+0]
   \   00000176   0x2801             CMP      R0,#+1
   \   00000178   0xD006             BEQ      ??PIT_CH0_IRQHandler_12
    209               {
    210               OLED_Clear();
   \   0000017A   0x.... 0x....      BL       OLED_Clear
    211               OLED_Biaoge_ZS();//表格，静态
   \   0000017E   0x.... 0x....      BL       OLED_Biaoge_ZS
    212               jiemian_flag=1;
   \   00000182   0x2001             MOVS     R0,#+1
   \   00000184   0x....             LDR      R1,??DataTable0_11
   \   00000186   0x6008             STR      R0,[R1, #+0]
    213               }
    214                
    215            OLED_Key_ZS();
   \                     ??PIT_CH0_IRQHandler_12: (+1)
   \   00000188   0x.... 0x....      BL       OLED_Key_ZS
    216            
    217              if (KEY_sta)
   \   0000018C   0x....             LDR      R0,??DataTable0_12
   \   0000018E   0x7800             LDRB     R0,[R0, #+0]
   \   00000190   0x2800             CMP      R0,#+0
   \   00000192   0xD01D             BEQ      ??PIT_CH0_IRQHandler_8
    218              {
    219                  if (KEY_menuChange)//菜单选择和数据显示 更新分两次进行 减小数据量
   \   00000194   0x....             LDR      R0,??DataTable0_13
   \   00000196   0x7800             LDRB     R0,[R0, #+0]
   \   00000198   0x2800             CMP      R0,#+0
   \   0000019A   0xD00C             BEQ      ??PIT_CH0_IRQHandler_13
    220                  {
    221                      OLED_Select_ZS();
   \   0000019C   0x.... 0x....      BL       OLED_Select_ZS
    222                      KEY_menuChange = !KEY_menuChange;
   \   000001A0   0x....             LDR      R0,??DataTable0_13
   \   000001A2   0x7800             LDRB     R0,[R0, #+0]
   \   000001A4   0x2800             CMP      R0,#+0
   \   000001A6   0xD103             BNE      ??PIT_CH0_IRQHandler_14
   \   000001A8   0x2001             MOVS     R0,#+1
   \   000001AA   0x....             LDR      R1,??DataTable0_13
   \   000001AC   0x7008             STRB     R0,[R1, #+0]
   \   000001AE   0xE002             B        ??PIT_CH0_IRQHandler_13
   \                     ??PIT_CH0_IRQHandler_14: (+1)
   \   000001B0   0x2000             MOVS     R0,#+0
   \   000001B2   0x....             LDR      R1,??DataTable0_13
   \   000001B4   0x7008             STRB     R0,[R1, #+0]
    223                  }
    224                  Oled_Data_ZS();//大概需要1ms左右,但由于第二次按键不操作，所以时间差可以忽略
   \                     ??PIT_CH0_IRQHandler_13: (+1)
   \   000001B6   0x.... 0x....      BL       Oled_Data_ZS
    225                  KEY_sta = !KEY_sta;             
   \   000001BA   0x....             LDR      R0,??DataTable0_12
   \   000001BC   0x7800             LDRB     R0,[R0, #+0]
   \   000001BE   0x2800             CMP      R0,#+0
   \   000001C0   0xD103             BNE      ??PIT_CH0_IRQHandler_15
   \   000001C2   0x2001             MOVS     R0,#+1
   \   000001C4   0x....             LDR      R1,??DataTable0_12
   \   000001C6   0x7008             STRB     R0,[R1, #+0]
   \   000001C8   0xE002             B        ??PIT_CH0_IRQHandler_8
   \                     ??PIT_CH0_IRQHandler_15: (+1)
   \   000001CA   0x2000             MOVS     R0,#+0
   \   000001CC   0x....             LDR      R1,??DataTable0_12
   \   000001CE   0x7008             STRB     R0,[R1, #+0]
    226              }
    227          }    
    228          
    229          
    230          
    231          
    232          
    233          }
   \                     ??PIT_CH0_IRQHandler_8: (+1)
   \   000001D0   0xBD01             POP      {R0,PC}          ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable0:
   \   00000000   0x4003710C         DC32     0x4003710c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable0_1:
   \   00000000   0x........         DC32     PIT_times

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable0_2:
   \   00000000   0x........         DC32     zs_car

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable0_3:
   \   00000000   0x........         DC32     z

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable0_4:
   \   00000000   0x........         DC32     Stop_Flag

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable0_5:
   \   00000000   0x........         DC32     speed_set

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable0_6:
   \   00000000   0x........         DC32     speed_car

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable0_7:
   \   00000000   0x41A00000         DC32     0x41a00000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable0_8:
   \   00000000   0x........         DC32     Boma_Change

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable0_9:
   \   00000000   0x........         DC32     Boma_num

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable0_10:
   \   00000000   0x........         DC32     jiemian

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable0_11:
   \   00000000   0x........         DC32     jiemian_flag

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable0_12:
   \   00000000   0x........         DC32     KEY_sta

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable0_13:
   \   00000000   0x........         DC32     KEY_menuChange
    234          

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       8   PIT_CH0_IRQHandler
         8   -> BangBang
         8   -> Boma_Gear_ZS
         8   -> Controler
         8   -> Data_Old
         8   -> Data_Old2
         8   -> Direction_ChaSpeed_Control
         8   -> Direction_Controler
         8   -> FTM_PwmDuty
         8   -> Get_CarSpeed
         8   -> GpioSet
         8   -> GpioTurn
         8   -> Gyro_ZS
         8   -> Hall
         8   -> Inductor_analyse
         8   -> Motor_control
         8   -> OLED_Biaoge_Par_ZS
         8   -> OLED_Biaoge_ZS
         8   -> OLED_Clear
         8   -> OLED_Inductor_Dynamic
         8   -> OLED_Int16
         8   -> OLED_Key_Par_ZS
         8   -> OLED_Key_ZS
         8   -> OLED_Select_Par_ZS
         8   -> OLED_Select_ZS
         8   -> Oled_Data_Par_ZS
         8   -> Oled_Data_ZS
         8   -> Oled_Data_ZS_All
         8   -> Oled_Data_ZS_All2
         8   -> Test_Huandao
         8   -> Test_RoadInfo
         8 __aeabi_cfcmpeq
         8 __aeabi_cfcmple
       8   main
         8   -> ADC_Init
         8   -> FTM_PwmInit
         8   -> FTM_SpeedInit
         8   -> IoInit
         8   -> KEY_Init
         8   -> L3G4200_Init
         8   -> OLED_Biaoge_ZS
         8   -> OLED_Init
         8   -> PIT_EnableIrq
         8   -> PIT_Init
         8   -> UART_Init
         8   -> get_clk


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable0
       4  ??DataTable0_1
       4  ??DataTable0_10
       4  ??DataTable0_11
       4  ??DataTable0_12
       4  ??DataTable0_13
       4  ??DataTable0_2
       4  ??DataTable0_3
       4  ??DataTable0_4
       4  ??DataTable0_5
       4  ??DataTable0_6
       4  ??DataTable0_7
       4  ??DataTable0_8
       4  ??DataTable0_9
       4  Chazhi_Class
       1  KEY_textSelect
     466  PIT_CH0_IRQHandler
       2  PIT_times
       1  carStatus
       4  delay_stop
       4  direction_control_counter
       4  flash_time
       4  iic_error
       4  iic_error_counter
       4  ijk
       4  jiemian_flag
       4  kez
      96  main
       4  man
       1  menuSelect
       4  ms
       4  s
   12000  spee
       4  speed_control_counter
       4  x
       4  z
   12000  zhan
       4  zs_car
       4  zz

 
 24 068 bytes in section .bss
      5 bytes in section .data
    618 bytes in section .text
 
    618 bytes of CODE memory
 24 073 bytes of DATA memory

Errors: none
Warnings: none
