###############################################################################
#
# IAR ANSI C/C++ Compiler V7.40.2.8542/W32 for ARM        29/Jul/2018  00:37:58
# Copyright 1999-2015 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  H:\智能车程序2018\三轮比赛\7.29-sc\lib\C\KEA128_flash.c
#    Command line =  
#        H:\智能车程序2018\三轮比赛\7.29-sc\lib\C\KEA128_flash.c -D IAR -D
#        TWR_K60N512 -D _DLIB_FILE_DESCRIPTOR -lCN
#        H:\智能车程序2018\三轮比赛\7.29-sc\iar\KEA_128_FLASH\List\ -lB
#        H:\智能车程序2018\三轮比赛\7.29-sc\iar\KEA_128_FLASH\List\ -o
#        H:\智能车程序2018\三轮比赛\7.29-sc\iar\KEA_128_FLASH\Obj\ --no_cse
#        --no_unroll --no_inline --no_code_motion --no_tbaa --no_clustering
#        --no_scheduling --debug --endian=little --cpu=Cortex-M0+ -e --fpu=None
#        --dlib_config F:\IAR安装包\arm\INC\c\DLib_Config_Normal.h -I
#        H:\智能车程序2018\三轮比赛\7.29-sc\iar\..\device\H\ -I
#        H:\智能车程序2018\三轮比赛\7.29-sc\iar\..\user\H\ -I
#        H:\智能车程序2018\三轮比赛\7.29-sc\iar\..\system\ -I
#        H:\智能车程序2018\三轮比赛\7.29-sc\iar\..\lib\H\ -I
#        H:\智能车程序2018\三轮比赛\7.29-sc\iar\..\system\coreSupport\ -On
#    List file    =  
#        H:\智能车程序2018\三轮比赛\7.29-sc\iar\KEA_128_FLASH\List\KEA128_flash.lst
#    Object file  =  
#        H:\智能车程序2018\三轮比赛\7.29-sc\iar\KEA_128_FLASH\Obj\KEA128_flash.o
#
###############################################################################

H:\智能车程序2018\三轮比赛\7.29-sc\lib\C\KEA128_flash.c
      1          /*********************************************************************************************************************
      2           * COPYRIGHT NOTICE
      3           * Copyright (c) 2017,逐飞科技
      4           * All rights reserved.
      5           * 技术讨论QQ群：179029047
      6           *
      7           * 以下所有内容版权均属逐飞科技所有，未经允许不得用于商业用途，
      8           * 欢迎各位使用并传播本程序，修改内容时必须保留逐飞科技的版权声明。
      9           *
     10           * @file       		KEA128_flash
     11           * @company	   		成都逐飞科技有限公司
     12           * @author     		逐飞科技(QQ3184284598)
     13           * @version    		v2.0
     14           * @Software 		IAR 7.7 or MDK 5.23
     15           * @Target core		S9KEA128AMLK
     16           * @Taobao   		https://seekfree.taobao.com/
     17           * @date       		2017-11-6
     18           ********************************************************************************************************************/
     19          
     20          
     21          #include "KEA128_flash.h"
     22          
     23          
     24          
     25          // flash commands
     26          #define ERASE_VERITF_ALL_BLOCKS             0x01  // 擦除检验所有区块
     27          #define ERASE_VERITF_BLOCKS                 0x02  // 擦除检验数据块
     28          #define ERASE_VERITF_FLASH_SECTION          0x03  // 擦除检验Flash 段
     29          #define READ_ONCE                           0x04  // 读取一次
     30          #define PROGRAM_FLASH                       0x06  // 编程Flash
     31          #define PROGRAM_ONCE                        0x07  // 编程一次
     32          #define ERASE_ALL_BLOCKS                    0x08  // 擦除所有区块
     33          #define ERASE_FLASH_BLOCKS                  0x09  // 擦除Flash 区块
     34          #define ERASE_FLASH_SECTOR                  0x0A  // 擦除Flash 扇区
     35          #define UNSECURE_FLASH                      0x0B  // 解密的Flash
     36          #define VERITF_BACKDOOR_ACCESS_KEY          0x0C  // 检验后门访问密钥
     37          #define SET_USER_MARGIN_LEVEL               0x0D  // 设置用户裕量水平
     38          #define SET_FACTORY_MARGIN_LEVEL            0x0E  // 设置出厂裕量水平
     39          #define CONFIGURE_NVM                       0x0F  // 配置NVM
     40          
     41          
     42          

   \                                 In section .data, align 4
     43          volatile uint8 s_flash_command_run[] = {0x00, 0xB5, 0x80, 0x21, 0x01, 0x70, 0x01, 0x78, 0x09, 0x06, 0xFC, 0xD5,0x00, 0xBD};
   \                     s_flash_command_run:
   \   00000000   0x00 0xB5          DC8 0, 181, 128, 33, 1, 112, 1, 120, 9, 6, 252, 213, 0, 189, 0, 0
   \              0x80 0x21    
   \              0x01 0x70    
   \              0x01 0x78    
   \              0x09 0x06    
   \              0xFC 0xD5    
   \              0x00 0xBD    
   \              0x00 0x00    
     44          typedef void (*flash_run_entry_t)(volatile uint8 *reg);

   \                                 In section .bss, align 4
     45          flash_run_entry_t s_flash_run_entry;
   \                     s_flash_run_entry:
   \   00000000                      DS8 4
     46          
     47          //内部使用

   \                                 In section .text, align 2, keep-with-next
     48          uint8 FlashCmdStart(void)
     49          {
   \                     FlashCmdStart: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
     50              DISABLE_INTERRUPTS;
   \   00000002   0xB672             CPSID    I
     51          
     52              FTF->FSTAT = FTMRE_FSTAT_FPVIOL_MASK | FTMRE_FSTAT_ACCERR_MASK;
   \   00000004   0x2030             MOVS     R0,#+48
   \   00000006   0x....             LDR      R1,??DataTable3  ;; 0x40020005
   \   00000008   0x7008             STRB     R0,[R1, #+0]
     53          
     54              s_flash_run_entry = (flash_run_entry_t)((uint32)s_flash_command_run + 1);
   \   0000000A   0x....             LDR      R0,??DataTable3_1
   \   0000000C   0x....             LDR      R1,??DataTable3_2
   \   0000000E   0x6008             STR      R0,[R1, #+0]
     55              s_flash_run_entry(&FTF->FSTAT);
   \   00000010   0x....             LDR      R0,??DataTable3  ;; 0x40020005
   \   00000012   0x....             LDR      R1,??DataTable3_2
   \   00000014   0x6809             LDR      R1,[R1, #+0]
   \   00000016   0x4788             BLX      R1
     56          
     57              ENABLE_INTERRUPTS;
   \   00000018   0xB662             CPSIE    I
     58          
     59              if(FTF->FSTAT & (FTMRE_FSTAT_ACCERR_MASK | FTMRE_FSTAT_FPVIOL_MASK | FTMRE_FSTAT_MGSTAT_MASK)) return 1;	//出现错误
   \   0000001A   0x....             LDR      R0,??DataTable3  ;; 0x40020005
   \   0000001C   0x7800             LDRB     R0,[R0, #+0]
   \   0000001E   0x2133             MOVS     R1,#+51
   \   00000020   0x4208             TST      R0,R1
   \   00000022   0xD001             BEQ      ??FlashCmdStart_0
   \   00000024   0x2001             MOVS     R0,#+1
   \   00000026   0xE000             B        ??FlashCmdStart_1
     60              return 0;												//成功
   \                     ??FlashCmdStart_0: (+1)
   \   00000028   0x2000             MOVS     R0,#+0
   \                     ??FlashCmdStart_1: (+1)
   \   0000002A   0xBD02             POP      {R1,PC}          ;; return
     61          }
     62          
     63          
     64          //-------------------------------------------------------------------------------------------------------------------
     65          //  @brief      FLASH初始化
     66          //  @return     				返回一个扇区的大小
     67          //  @since      v1.0
     68          //  Sample usage:               uint32 dat = FLASH_GetSectorSize();
     69          //-------------------------------------------------------------------------------------------------------------------

   \                                 In section .text, align 2, keep-with-next
     70          uint32 FLASH_GetSectorSize(void)
     71          {
     72              return SECTOR_SIZE;
   \                     FLASH_GetSectorSize: (+1)
   \   00000000   0x2080             MOVS     R0,#+128
   \   00000002   0x0080             LSLS     R0,R0,#+2        ;; #+512
   \   00000004   0x4770             BX       LR               ;; return
     73          }
     74          
     75          //-------------------------------------------------------------------------------------------------------------------
     76          //  @brief      FLASH初始化
     77          //  @return     void
     78          //  @since      v1.0
     79          //  Sample usage:
     80          //-------------------------------------------------------------------------------------------------------------------

   \                                 In section .text, align 2, keep-with-next
     81          void FLASH_Init(void)
     82          {
   \                     FLASH_Init: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
     83              uint16 clk;
     84          
     85              SIM->SCGC |= SIM_SCGC_FLASH_MASK;                                   //开启flash时钟
   \   00000002   0x....             LDR      R0,??DataTable3_3  ;; 0x40048014
   \   00000004   0x6800             LDR      R0,[R0, #+0]
   \   00000006   0x2180             MOVS     R1,#+128
   \   00000008   0x0149             LSLS     R1,R1,#+5        ;; #+4096
   \   0000000A   0x4301             ORRS     R1,R1,R0
   \   0000000C   0x....             LDR      R0,??DataTable3_3  ;; 0x40048014
   \   0000000E   0x6001             STR      R1,[R0, #+0]
     86          
     87              while(!(FTF->FSTAT & FTMRE_FSTAT_CCIF_MASK));                       //等待之前命令完成
   \                     ??FLASH_Init_0: (+1)
   \   00000010   0x....             LDR      R0,??DataTable3  ;; 0x40020005
   \   00000012   0x7800             LDRB     R0,[R0, #+0]
   \   00000014   0x0600             LSLS     R0,R0,#+24
   \   00000016   0xD5FB             BPL      ??FLASH_Init_0
     88          
     89              clk = bus_clk_khz/1000-1;
   \   00000018   0x....             LDR      R0,??DataTable3_4
   \   0000001A   0x6800             LDR      R0,[R0, #+0]
   \   0000001C   0x21FA             MOVS     R1,#+250
   \   0000001E   0x0089             LSLS     R1,R1,#+2        ;; #+1000
   \   00000020   0x.... 0x....      BL       __aeabi_uidiv
   \   00000024   0x1E40             SUBS     R0,R0,#+1
   \   00000026   0x0004             MOVS     R4,R0
     90          
     91              FTF->FCLKDIV = FTMRE_FCLKDIV_FDIV(clk) | FTMRE_FCLKDIV_FDIVLCK_MASK;//设置flash分频系数
   \   00000028   0x0020             MOVS     R0,R4
   \   0000002A   0x0680             LSLS     R0,R0,#+26       ;; ZeroExtS R0,R0,#+26,#+26
   \   0000002C   0x0E80             LSRS     R0,R0,#+26
   \   0000002E   0x2140             MOVS     R1,#+64
   \   00000030   0x4301             ORRS     R1,R1,R0
   \   00000032   0x....             LDR      R0,??DataTable3_5  ;; 0x40020003
   \   00000034   0x7001             STRB     R1,[R0, #+0]
     92          
     93              FTF->FSTAT = FTMRE_FSTAT_FPVIOL_MASK | FTMRE_FSTAT_ACCERR_MASK;     //清除状态标识
   \   00000036   0x2030             MOVS     R0,#+48
   \   00000038   0x....             LDR      R1,??DataTable3  ;; 0x40020005
   \   0000003A   0x7008             STRB     R0,[R1, #+0]
     94          }
   \   0000003C   0xBD10             POP      {R4,PC}          ;; return
     95          
     96          //-------------------------------------------------------------------------------------------------------------------
     97          //  @brief      FLASH擦除扇区
     98          //  @param      SectorNum 		需要擦除的扇区编号
     99          //  @return     				返回1擦除失败，返回0擦除成功
    100          //  @since      v1.0
    101          //  Sample usage:               uint32 dat = FLASH_GetSectorSize(10);
    102          //-------------------------------------------------------------------------------------------------------------------

   \                                 In section .text, align 2, keep-with-next
    103          uint8 FLASH_EraseSector(uint32 SectorNum)
    104          {
   \                     FLASH_EraseSector: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0004             MOVS     R4,R0
    105              uint32 addr;
    106          
    107          	addr = (uint32)SectorNum*SECTOR_SIZE;
   \   00000004   0x2080             MOVS     R0,#+128
   \   00000006   0x0080             LSLS     R0,R0,#+2        ;; #+512
   \   00000008   0x4360             MULS     R0,R4,R0
   \   0000000A   0x0005             MOVS     R5,R0
    108          
    109              FTF->FCCOBIX = 0;
   \   0000000C   0x2000             MOVS     R0,#+0
   \   0000000E   0x....             LDR      R1,??DataTable3_6  ;; 0x40020001
   \   00000010   0x7008             STRB     R0,[R1, #+0]
    110              FTF->FCCOBHI = ERASE_FLASH_SECTOR;
   \   00000012   0x200A             MOVS     R0,#+10
   \   00000014   0x....             LDR      R1,??DataTable3_7  ;; 0x40020009
   \   00000016   0x7008             STRB     R0,[R1, #+0]
    111              FTF->FCCOBLO = addr>>16;
   \   00000018   0x0028             MOVS     R0,R5
   \   0000001A   0x0C00             LSRS     R0,R0,#+16
   \   0000001C   0x....             LDR      R1,??DataTable3_8  ;; 0x40020008
   \   0000001E   0x7008             STRB     R0,[R1, #+0]
    112          
    113              FTF->FCCOBIX = 1;
   \   00000020   0x2001             MOVS     R0,#+1
   \   00000022   0x....             LDR      R1,??DataTable3_6  ;; 0x40020001
   \   00000024   0x7008             STRB     R0,[R1, #+0]
    114              FTF->FCCOBHI = (addr&0xffff)>>8;
   \   00000026   0x0028             MOVS     R0,R5
   \   00000028   0x0A00             LSRS     R0,R0,#+8
   \   0000002A   0x....             LDR      R1,??DataTable3_7  ;; 0x40020009
   \   0000002C   0x7008             STRB     R0,[R1, #+0]
    115              FTF->FCCOBLO = addr&0xff;
   \   0000002E   0x0028             MOVS     R0,R5
   \   00000030   0x....             LDR      R1,??DataTable3_8  ;; 0x40020008
   \   00000032   0x7008             STRB     R0,[R1, #+0]
    116          
    117              FlashCmdStart();
   \   00000034   0x.... 0x....      BL       FlashCmdStart
    118          
    119              return 0;
   \   00000038   0x2000             MOVS     R0,#+0
   \   0000003A   0xBD32             POP      {R1,R4,R5,PC}    ;; return
    120          }
    121          
    122          //-------------------------------------------------------------------------------------------------------------------
    123          //  @brief      FLASH数据写入到扇区
    124          //  @param      SectorNum 		需要写入的扇区编号
    125          //  @param      *buf	 		数据首地址
    126          //  @param      len		 		写入的字节数 特别提醒一个uint16变量是两个字节 一个uint32变量是四个字节 每次写入得长度必须为4得倍数
    127          //  @param      offset		 	必须为4的整数倍
    128          //  @return     				返回1写入失败，返回0写入成功
    129          //  @since      v1.0
    130          //  Sample usage:               FLASH_WriteSector(10,(const uint8 *)buf,4,0);//将buf数组里面的前四位数据写入到10号扇区(每一位是uint8类型)
    131          //  @note                       使用flash时，最好从最后一个扇区开始使用，最后一个扇区号为255
    132          //-------------------------------------------------------------------------------------------------------------------
    133          
    134          

   \                                 In section .text, align 2, keep-with-next
    135          uint8 FLASH_WriteSector(uint32 SectorNum, const uint8 *buf, uint32 len, uint32 offset)
    136          {
   \                     FLASH_WriteSector: (+1)
   \   00000000   0xB5FD             PUSH     {R0,R2-R7,LR}
   \   00000002   0x000C             MOVS     R4,R1
    137              uint16 step, i;
    138              uint32 addr;
    139          
    140          	addr = (uint32)SectorNum*SECTOR_SIZE + offset;
   \   00000004   0x9800             LDR      R0,[SP, #+0]
   \   00000006   0x2180             MOVS     R1,#+128
   \   00000008   0x0089             LSLS     R1,R1,#+2        ;; #+512
   \   0000000A   0x4348             MULS     R0,R1,R0
   \   0000000C   0x9902             LDR      R1,[SP, #+8]
   \   0000000E   0x1840             ADDS     R0,R0,R1
   \   00000010   0x0006             MOVS     R6,R0
    141          
    142              step = 4;
   \   00000012   0x2004             MOVS     R0,#+4
   \   00000014   0x0007             MOVS     R7,R0
    143          
    144          	for(i=0; i<len; i+=step)
   \   00000016   0x2000             MOVS     R0,#+0
   \   00000018   0x0005             MOVS     R5,R0
   \                     ??FLASH_WriteSector_0: (+1)
   \   0000001A   0xB2AD             UXTH     R5,R5
   \   0000001C   0x9801             LDR      R0,[SP, #+4]
   \   0000001E   0x4285             CMP      R5,R0
   \   00000020   0xD22F             BCS      ??FLASH_WriteSector_1
    145          	{
    146                  FTF->FCCOBIX = 0;
   \   00000022   0x2000             MOVS     R0,#+0
   \   00000024   0x....             LDR      R1,??DataTable3_6  ;; 0x40020001
   \   00000026   0x7008             STRB     R0,[R1, #+0]
    147                  FTF->FCCOBHI = PROGRAM_FLASH;
   \   00000028   0x2006             MOVS     R0,#+6
   \   0000002A   0x....             LDR      R1,??DataTable3_7  ;; 0x40020009
   \   0000002C   0x7008             STRB     R0,[R1, #+0]
    148                  FTF->FCCOBLO = addr>>16;
   \   0000002E   0x0030             MOVS     R0,R6
   \   00000030   0x0C00             LSRS     R0,R0,#+16
   \   00000032   0x....             LDR      R1,??DataTable3_8  ;; 0x40020008
   \   00000034   0x7008             STRB     R0,[R1, #+0]
    149          
    150                  FTF->FCCOBIX = 1;
   \   00000036   0x2001             MOVS     R0,#+1
   \   00000038   0x....             LDR      R1,??DataTable3_6  ;; 0x40020001
   \   0000003A   0x7008             STRB     R0,[R1, #+0]
    151                  FTF->FCCOBHI = (addr&0xFFFF)>>8;
   \   0000003C   0x0030             MOVS     R0,R6
   \   0000003E   0x0A00             LSRS     R0,R0,#+8
   \   00000040   0x....             LDR      R1,??DataTable3_7  ;; 0x40020009
   \   00000042   0x7008             STRB     R0,[R1, #+0]
    152                  FTF->FCCOBLO = addr&0xFC;
   \   00000044   0x0030             MOVS     R0,R6
   \   00000046   0x21FC             MOVS     R1,#+252
   \   00000048   0x4001             ANDS     R1,R1,R0
   \   0000004A   0x....             LDR      R0,??DataTable3_8  ;; 0x40020008
   \   0000004C   0x7001             STRB     R1,[R0, #+0]
    153          
    154                  FTF->FCCOBIX = 2;
   \   0000004E   0x2002             MOVS     R0,#+2
   \   00000050   0x....             LDR      R1,??DataTable3_6  ;; 0x40020001
   \   00000052   0x7008             STRB     R0,[R1, #+0]
    155                  FTF->FCCOBLO = buf[0];
   \   00000054   0x7820             LDRB     R0,[R4, #+0]
   \   00000056   0x....             LDR      R1,??DataTable3_8  ;; 0x40020008
   \   00000058   0x7008             STRB     R0,[R1, #+0]
    156                  FTF->FCCOBHI = buf[1];
   \   0000005A   0x7860             LDRB     R0,[R4, #+1]
   \   0000005C   0x....             LDR      R1,??DataTable3_7  ;; 0x40020009
   \   0000005E   0x7008             STRB     R0,[R1, #+0]
    157          
    158                  FTF->FCCOBIX = 3;
   \   00000060   0x2003             MOVS     R0,#+3
   \   00000062   0x....             LDR      R1,??DataTable3_6  ;; 0x40020001
   \   00000064   0x7008             STRB     R0,[R1, #+0]
    159                  FTF->FCCOBLO = buf[2];
   \   00000066   0x78A0             LDRB     R0,[R4, #+2]
   \   00000068   0x....             LDR      R1,??DataTable3_8  ;; 0x40020008
   \   0000006A   0x7008             STRB     R0,[R1, #+0]
    160                  FTF->FCCOBHI = buf[3];
   \   0000006C   0x78E0             LDRB     R0,[R4, #+3]
   \   0000006E   0x....             LDR      R1,??DataTable3_7  ;; 0x40020009
   \   00000070   0x7008             STRB     R0,[R1, #+0]
    161          
    162                  buf += step;
   \   00000072   0xB2BF             UXTH     R7,R7
   \   00000074   0x19E4             ADDS     R4,R4,R7
    163                  addr += step;
   \   00000076   0xB2BF             UXTH     R7,R7
   \   00000078   0x19F6             ADDS     R6,R6,R7
    164          
    165                  FlashCmdStart();
   \   0000007A   0x.... 0x....      BL       FlashCmdStart
    166              }
   \   0000007E   0x19ED             ADDS     R5,R5,R7
   \   00000080   0xE7CB             B        ??FLASH_WriteSector_0
    167              return 0;
   \                     ??FLASH_WriteSector_1: (+1)
   \   00000082   0x2000             MOVS     R0,#+0
   \   00000084   0xBDFE             POP      {R1-R7,PC}       ;; return
    168          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3:
   \   00000000   0x40020005         DC32     0x40020005

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_1:
   \   00000000   0x........         DC32     s_flash_command_run+0x1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_2:
   \   00000000   0x........         DC32     s_flash_run_entry

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_3:
   \   00000000   0x40048014         DC32     0x40048014

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_4:
   \   00000000   0x........         DC32     bus_clk_khz

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_5:
   \   00000000   0x40020003         DC32     0x40020003

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_6:
   \   00000000   0x40020001         DC32     0x40020001

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_7:
   \   00000000   0x40020009         DC32     0x40020009

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_8:
   \   00000000   0x40020008         DC32     0x40020008
    169          
    170          
    171          

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      16   FLASH_EraseSector
        16   -> FlashCmdStart
       0   FLASH_GetSectorSize
       8   FLASH_Init
         8 __aeabi_uidiv
      32   FLASH_WriteSector
        32   -> FlashCmdStart
       8   FlashCmdStart
         8   -- Indirect call


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable3
       4  ??DataTable3_1
       4  ??DataTable3_2
       4  ??DataTable3_3
       4  ??DataTable3_4
       4  ??DataTable3_5
       4  ??DataTable3_6
       4  ??DataTable3_7
       4  ??DataTable3_8
      60  FLASH_EraseSector
       6  FLASH_GetSectorSize
      62  FLASH_Init
     134  FLASH_WriteSector
      44  FlashCmdStart
      16  s_flash_command_run
       4  s_flash_run_entry

 
   4 bytes in section .bss
  16 bytes in section .data
 342 bytes in section .text
 
 342 bytes of CODE memory
  20 bytes of DATA memory

Errors: none
Warnings: none
