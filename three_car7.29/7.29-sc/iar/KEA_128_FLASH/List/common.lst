###############################################################################
#
# IAR ANSI C/C++ Compiler V7.40.2.8542/W32 for ARM        29/Jul/2018  00:37:56
# Copyright 1999-2015 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  H:\智能车程序2018\三轮比赛\7.29-sc\user\C\common.c
#    Command line =  
#        H:\智能车程序2018\三轮比赛\7.29-sc\user\C\common.c -D IAR -D
#        TWR_K60N512 -D _DLIB_FILE_DESCRIPTOR -lCN
#        H:\智能车程序2018\三轮比赛\7.29-sc\iar\KEA_128_FLASH\List\ -lB
#        H:\智能车程序2018\三轮比赛\7.29-sc\iar\KEA_128_FLASH\List\ -o
#        H:\智能车程序2018\三轮比赛\7.29-sc\iar\KEA_128_FLASH\Obj\ --no_cse
#        --no_unroll --no_inline --no_code_motion --no_tbaa --no_clustering
#        --no_scheduling --debug --endian=little --cpu=Cortex-M0+ -e --fpu=None
#        --dlib_config F:\IAR安装包\arm\INC\c\DLib_Config_Normal.h -I
#        H:\智能车程序2018\三轮比赛\7.29-sc\iar\..\device\H\ -I
#        H:\智能车程序2018\三轮比赛\7.29-sc\iar\..\user\H\ -I
#        H:\智能车程序2018\三轮比赛\7.29-sc\iar\..\system\ -I
#        H:\智能车程序2018\三轮比赛\7.29-sc\iar\..\lib\H\ -I
#        H:\智能车程序2018\三轮比赛\7.29-sc\iar\..\system\coreSupport\ -On
#    List file    =  
#        H:\智能车程序2018\三轮比赛\7.29-sc\iar\KEA_128_FLASH\List\common.lst
#    Object file  =  
#        H:\智能车程序2018\三轮比赛\7.29-sc\iar\KEA_128_FLASH\Obj\common.o
#
###############################################################################

H:\智能车程序2018\三轮比赛\7.29-sc\user\C\common.c
      1          /*********************************************************************************************************************
      2           * COPYRIGHT NOTICE
      3           * Copyright (c) 2017,逐飞科技
      4           * All rights reserved.
      5           * 技术讨论QQ群：179029047
      6           *
      7           * 以下所有内容版权均属逐飞科技所有，未经允许不得用于商业用途，
      8           * 欢迎各位使用并传播本程序，修改内容时必须保留逐飞科技的版权声明。
      9           *
     10           * @file       		common
     11           * @company	   		成都逐飞科技有限公司
     12           * @author     		逐飞科技(QQ3184284598)
     13           * @version    		v2.0
     14           * @Software 		IAR 7.7 or MDK 5.23
     15           * @Target core		S9KEA128AMLK
     16           * @Taobao   		https://seekfree.taobao.com/
     17           * @date       		2017-11-6
     18           ********************************************************************************************************************/
     19          
     20          #include "common.h"
     21          #include "system_SKEAZ1284.h"
     22          
     23          #define EX_REF_CLK  16000 //(定义外部参考时钟为16000KHZ)

   \                                 In section .bss, align 4
     24          uint32 ics_clk_khz;
   \                     ics_clk_khz:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
     25          uint32 ftm_clk_khz;
   \                     ftm_clk_khz:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
     26          uint32 core_clk_khz;
   \                     core_clk_khz:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
     27          uint32 bus_clk_khz;
   \                     bus_clk_khz:
   \   00000000                      DS8 4
     28          
     29          
     30          

   \                                 In section .text, align 2, keep-with-next
     31          void get_clk(void)
     32          {
   \                     get_clk: (+1)
   \   00000000   0xB500             PUSH     {LR}
   \   00000002   0xB087             SUB      SP,SP,#+28
     33              uint16 prescaler_factor[]={1,2,4,8,16,32,64,128,256,512,1024};
   \   00000004   0x4668             MOV      R0,SP
   \   00000006   0x....             LDR      R1,??DataTable1
   \   00000008   0x2218             MOVS     R2,#+24
   \   0000000A   0x.... 0x....      BL       __aeabi_memcpy4
     34          
     35              if(2 == KEA128_CLOCK)   //内部时钟
     36              {
     37                  ics_clk_khz = 48000;
     38                  ftm_clk_khz = 48000;
     39                  core_clk_khz = 48000;
     40                  bus_clk_khz = 24000;
     41              }
     42              else                    //外部时钟
     43              {
     44                  ics_clk_khz  = EX_REF_CLK * 1280 ;
   \   0000000E   0x....             LDR      R0,??DataTable1_1  ;; 0x1388000
   \   00000010   0x....             LDR      R1,??DataTable1_2
   \   00000012   0x6008             STR      R0,[R1, #+0]
     45                  ics_clk_khz = ics_clk_khz / prescaler_factor[((ICS->C1&ICS_C1_RDIV_MASK) >> ICS_C1_RDIV_SHIFT) + 5];    //计算FLL输出频率
   \   00000014   0x....             LDR      R0,??DataTable1_2
   \   00000016   0x6800             LDR      R0,[R0, #+0]
   \   00000018   0x4669             MOV      R1,SP
   \   0000001A   0x....             LDR      R2,??DataTable1_3  ;; 0x40064000
   \   0000001C   0x7812             LDRB     R2,[R2, #+0]
   \   0000001E   0xB2D2             UXTB     R2,R2
   \   00000020   0x08D2             LSRS     R2,R2,#+3
   \   00000022   0x0752             LSLS     R2,R2,#+29       ;; ZeroExtS R2,R2,#+29,#+29
   \   00000024   0x0F52             LSRS     R2,R2,#+29
   \   00000026   0x2302             MOVS     R3,#+2
   \   00000028   0x435A             MULS     R2,R3,R2
   \   0000002A   0x1889             ADDS     R1,R1,R2
   \   0000002C   0x8949             LDRH     R1,[R1, #+10]
   \   0000002E   0x.... 0x....      BL       __aeabi_uidiv
   \   00000032   0x....             LDR      R1,??DataTable1_2
   \   00000034   0x6008             STR      R0,[R1, #+0]
     46                  ics_clk_khz = ics_clk_khz / prescaler_factor[(ICS->C2&ICS_C2_BDIV_MASK) >> ICS_C2_BDIV_SHIFT];          //计算ICSCLKOUT
   \   00000036   0x....             LDR      R0,??DataTable1_2
   \   00000038   0x6800             LDR      R0,[R0, #+0]
   \   0000003A   0x4669             MOV      R1,SP
   \   0000003C   0x....             LDR      R2,??DataTable1_4  ;; 0x40064001
   \   0000003E   0x7812             LDRB     R2,[R2, #+0]
   \   00000040   0xB2D2             UXTB     R2,R2
   \   00000042   0x0952             LSRS     R2,R2,#+5
   \   00000044   0x2302             MOVS     R3,#+2
   \   00000046   0x435A             MULS     R2,R3,R2
   \   00000048   0x5A89             LDRH     R1,[R1, R2]
   \   0000004A   0x.... 0x....      BL       __aeabi_uidiv
   \   0000004E   0x....             LDR      R1,??DataTable1_2
   \   00000050   0x6008             STR      R0,[R1, #+0]
     47          
     48                  core_clk_khz = ics_clk_khz  / (((SIM->CLKDIV&SIM_CLKDIV_OUTDIV1_MASK) >> SIM_CLKDIV_OUTDIV1_SHIFT) + 1);
   \   00000052   0x....             LDR      R0,??DataTable1_2
   \   00000054   0x6800             LDR      R0,[R0, #+0]
   \   00000056   0x....             LDR      R1,??DataTable1_5  ;; 0x40048024
   \   00000058   0x6809             LDR      R1,[R1, #+0]
   \   0000005A   0x0F09             LSRS     R1,R1,#+28
   \   0000005C   0x0789             LSLS     R1,R1,#+30       ;; ZeroExtS R1,R1,#+30,#+30
   \   0000005E   0x0F89             LSRS     R1,R1,#+30
   \   00000060   0x1C49             ADDS     R1,R1,#+1
   \   00000062   0x.... 0x....      BL       __aeabi_uidiv
   \   00000066   0x....             LDR      R1,??DataTable1_6
   \   00000068   0x6008             STR      R0,[R1, #+0]
     49                  bus_clk_khz  = core_clk_khz / (((SIM->CLKDIV&SIM_CLKDIV_OUTDIV2_MASK) >> SIM_CLKDIV_OUTDIV2_SHIFT) + 1);
   \   0000006A   0x....             LDR      R0,??DataTable1_6
   \   0000006C   0x6800             LDR      R0,[R0, #+0]
   \   0000006E   0x....             LDR      R1,??DataTable1_5  ;; 0x40048024
   \   00000070   0x680A             LDR      R2,[R1, #+0]
   \   00000072   0x0011             MOVS     R1,R2
   \   00000074   0x01C9             LSLS     R1,R1,#+7        ;; ZeroExtS R1,R1,#+7,#+31
   \   00000076   0x0FC9             LSRS     R1,R1,#+31
   \   00000078   0x1C49             ADDS     R1,R1,#+1
   \   0000007A   0x.... 0x....      BL       __aeabi_uidiv
   \   0000007E   0x....             LDR      R1,??DataTable1_7
   \   00000080   0x6008             STR      R0,[R1, #+0]
     50                  ftm_clk_khz  = ics_clk_khz  / (((SIM->CLKDIV&SIM_CLKDIV_OUTDIV3_MASK) >> SIM_CLKDIV_OUTDIV3_SHIFT) + 1);
   \   00000082   0x....             LDR      R0,??DataTable1_2
   \   00000084   0x6800             LDR      R0,[R0, #+0]
   \   00000086   0x....             LDR      R1,??DataTable1_5  ;; 0x40048024
   \   00000088   0x680A             LDR      R2,[R1, #+0]
   \   0000008A   0x0011             MOVS     R1,R2
   \   0000008C   0x02C9             LSLS     R1,R1,#+11       ;; ZeroExtS R1,R1,#+11,#+31
   \   0000008E   0x0FC9             LSRS     R1,R1,#+31
   \   00000090   0x1C49             ADDS     R1,R1,#+1
   \   00000092   0x.... 0x....      BL       __aeabi_uidiv
   \   00000096   0x....             LDR      R1,??DataTable1_8
   \   00000098   0x6008             STR      R0,[R1, #+0]
     51              }
     52          }
   \   0000009A   0xB007             ADD      SP,SP,#+28
   \   0000009C   0xBD00             POP      {PC}             ;; return
     53          
     54          
     55          //-------------------------------------------------------------------------------------------------------------------
     56          //  @brief      设置中断向量表地址
     57          //  @param      vtor            新的中断向量表地址
     58          //  @return     void
     59          //  @since      v1.0
     60          //  Sample usage:               write_vtor(0x1fff0000);;
     61          //-------------------------------------------------------------------------------------------------------------------

   \                                 In section .text, align 2, keep-with-next
     62          void write_vtor (int vtor)
     63          {
     64              // Write the VTOR with the new value
     65              SCB->VTOR = vtor;
   \                     write_vtor: (+1)
   \   00000000   0x....             LDR      R1,??DataTable1_9  ;; 0xe000ed08
   \   00000002   0x6008             STR      R0,[R1, #+0]
     66          }
   \   00000004   0x4770             BX       LR               ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1:
   \   00000000   0x........         DC32     ?_0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_1:
   \   00000000   0x01388000         DC32     0x1388000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_2:
   \   00000000   0x........         DC32     ics_clk_khz

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_3:
   \   00000000   0x40064000         DC32     0x40064000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_4:
   \   00000000   0x40064001         DC32     0x40064001

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_5:
   \   00000000   0x40048024         DC32     0x40048024

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_6:
   \   00000000   0x........         DC32     core_clk_khz

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_7:
   \   00000000   0x........         DC32     bus_clk_khz

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_8:
   \   00000000   0x........         DC32     ftm_clk_khz

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_9:
   \   00000000   0xE000ED08         DC32     0xe000ed08

   \                                 In section .rodata, align 4
   \                     ?_0:
   \   00000000   0x0001 0x0002      DC16 1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024
   \              0x0004 0x0008
   \              0x0010 0x0020
   \              0x0040 0x0080
   \              0x0100 0x0200
   \              0x0400       
   \   00000016   0x00 0x00          DC8 0, 0
     67          
     68          
     69          
     70          

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      32   get_clk
        32   -> __aeabi_memcpy4
        32 __aeabi_uidiv
       0   write_vtor


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable1
       4  ??DataTable1_1
       4  ??DataTable1_2
       4  ??DataTable1_3
       4  ??DataTable1_4
       4  ??DataTable1_5
       4  ??DataTable1_6
       4  ??DataTable1_7
       4  ??DataTable1_8
       4  ??DataTable1_9
      24  ?_0
       4  bus_clk_khz
       4  core_clk_khz
       4  ftm_clk_khz
     158  get_clk
       4  ics_clk_khz
       6  write_vtor

 
  16 bytes in section .bss
  24 bytes in section .rodata
 204 bytes in section .text
 
 204 bytes of CODE  memory
  24 bytes of CONST memory
  16 bytes of DATA  memory

Errors: none
Warnings: none
