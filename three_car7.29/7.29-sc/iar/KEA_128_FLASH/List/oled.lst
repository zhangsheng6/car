###############################################################################
#
# IAR ANSI C/C++ Compiler V7.40.2.8542/W32 for ARM        29/Jul/2018  00:38:02
# Copyright 1999-2015 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  H:\智能车程序2018\三轮比赛\7.29-sc\device\C\oled.c
#    Command line =  
#        H:\智能车程序2018\三轮比赛\7.29-sc\device\C\oled.c -D IAR -D
#        TWR_K60N512 -D _DLIB_FILE_DESCRIPTOR -lCN
#        H:\智能车程序2018\三轮比赛\7.29-sc\iar\KEA_128_FLASH\List\ -lB
#        H:\智能车程序2018\三轮比赛\7.29-sc\iar\KEA_128_FLASH\List\ -o
#        H:\智能车程序2018\三轮比赛\7.29-sc\iar\KEA_128_FLASH\Obj\ --no_cse
#        --no_unroll --no_inline --no_code_motion --no_tbaa --no_clustering
#        --no_scheduling --debug --endian=little --cpu=Cortex-M0+ -e --fpu=None
#        --dlib_config F:\IAR安装包\arm\INC\c\DLib_Config_Normal.h -I
#        H:\智能车程序2018\三轮比赛\7.29-sc\iar\..\device\H\ -I
#        H:\智能车程序2018\三轮比赛\7.29-sc\iar\..\user\H\ -I
#        H:\智能车程序2018\三轮比赛\7.29-sc\iar\..\system\ -I
#        H:\智能车程序2018\三轮比赛\7.29-sc\iar\..\lib\H\ -I
#        H:\智能车程序2018\三轮比赛\7.29-sc\iar\..\system\coreSupport\ -On
#    List file    =  
#        H:\智能车程序2018\三轮比赛\7.29-sc\iar\KEA_128_FLASH\List\oled.lst
#    Object file  =  
#        H:\智能车程序2018\三轮比赛\7.29-sc\iar\KEA_128_FLASH\Obj\oled.o
#
###############################################################################

H:\智能车程序2018\三轮比赛\7.29-sc\device\C\oled.c
      1          /**
      2            ******************************************************************************
      3            * COPYRIGHT NOTICE
      4            * Copyright (c) 2018,华北科技学院
      5            * All rights reserved.
      6            *
      7            * 文件名称：    oled.c
      8            * 文件标识：
      9            * 摘    要：    OLED显示
     10            *
     11            * 当前版本：     1.0
     12            * 负    责：     韩志伟
     13            * 时    间：     2018年1月4日 10:04:05
     14            ******************************************************************************
     15            */
     16          
     17          #include "oled.h"
     18          #include "stdio.h"
     19          #include "stdarg.h"
     20          

   \                                 In section .data, align 4
     21          SPI_Type* OLED_SPI[2] = SPI_BASES; //定义两个指针数组保存 SPIx 的地址
   \                     OLED_SPI:
   \   00000000   0x40076000         DC32 40076000H, 40077000H
   \              0x40077000   

   \                                 In section .bss, align 4
     22          unsigned char OLED_GRAM[128][8] = {0};
   \                     OLED_GRAM:
   \   00000000                      DS8 1024
     23          
     24          #define Max_Column	128
     25          #define Max_Row		64
     26          
     27          //菜单数字 高8宽7

   \                                 In section .rodata, align 4
     28          const uint8 menuNum[][7] =
   \                     menuNum:
   \   00000000   0xC1 0xC5          DC8 193, 197, 195, 255, 193, 193, 193, 129, 197, 227, 211, 211, 207
   \              0xC3 0xFF    
   \              0xC1 0xC1    
   \              0xC1 0x81    
   \              0xC5 0xE3    
   \              0xD3 0xD3    
   \              0xCF         
   \   0000000D   0xC1 0xC3          DC8 193, 195, 219, 219, 219, 219, 255, 255, 177, 169, 165, 163, 255
   \              0xDB 0xDB    
   \              0xDB 0xDB    
   \              0xFF 0xFF    
   \              0xB1 0xA9    
   \              0xA5 0xA3    
   \              0xFF         
   \   0000001A   0xA1 0xA1          DC8 161, 161, 255, 253, 185, 145, 0, 0, 0, 0
   \              0xFF 0xFD    
   \              0xB9 0x91    
   \              0x00 0x00    
   \              0x00 0x00    
     29          {
     30              {0xC1,0xC5,0xC3,0xFF,0xC1,0xC1,0xC1}, //1
     31              {0x81,0xC5,0xE3,0xD3,0xD3,0xCF,0xC1}, //2
     32              {0xC3,0xDB,0xDB,0xDB,0xDB,0xFF,0xFF}, //3
     33              {0xB1,0xA9,0xA5,0xA3,0xFF,0xA1,0xA1}, //4
     34              {0xFF,0xFD,0xB9,0x91}//小三角
     35          };
     36          
     37          //logo 图标
     38          //uint8 logo[][8] =
     39          //{{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
     40          //{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
     41          //{0x00,0x00,0x00,0x00,0x00,0x0C,0x01,0x00},
     42          //{0x00,0x00,0x00,0x00,0x00,0x27,0x01,0x00},
     43          //{0x00,0x00,0x00,0x00,0xF0,0x21,0x01,0x00},
     44          //{0x00,0x00,0x00,0x00,0x00,0x21,0x01,0x00},
     45          //{0x00,0x00,0x00,0x00,0x00,0xE1,0xFF,0x07},
     46          //{0x00,0x00,0x00,0x00,0x00,0x21,0x01,0x06},
     47          //{0x00,0x00,0x00,0x00,0x00,0x21,0x01,0x03},
     48          //{0x00,0x00,0x00,0x00,0x00,0x21,0x81,0x01},
     49          //{0x00,0x00,0x04,0x00,0x00,0x01,0xC1,0x00},
     50          //{0x00,0x02,0x04,0x00,0x00,0x00,0x40,0x00},
     51          //{0x00,0x03,0x04,0x00,0x80,0x00,0x00,0x01},
     52          //{0x00,0x01,0x04,0x00,0x80,0x00,0x08,0x01},
     53          //{0x80,0x01,0x04,0x00,0x80,0x00,0x88,0x00},
     54          //{0xC0,0x00,0x04,0x00,0x80,0xFC,0xC9,0x00},
     55          //{0xE0,0xFF,0x07,0x00,0x80,0x27,0x1F,0x00},
     56          //{0x00,0x00,0x04,0x00,0xE0,0x25,0x09,0x00},
     57          //{0x00,0x00,0x04,0x00,0xB0,0x24,0x09,0x00},
     58          //{0x00,0x00,0x04,0x00,0x90,0x04,0x08,0x00},
     59          //{0x00,0x00,0x04,0x00,0x80,0x04,0x28,0x00},
     60          //{0x00,0x00,0x04,0x00,0x80,0xFC,0x6F,0x00},
     61          //{0x00,0x00,0x00,0x00,0x80,0x00,0xC8,0x01},
     62          //{0x00,0x00,0x00,0x00,0x00,0x00,0x08,0x00},
     63          //{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
     64          //{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
     65          //{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
     66          //{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
     67          //{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
     68          //{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
     69          //{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
     70          //{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
     71          //{0x00,0x00,0x00,0x1E,0x3C,0x00,0x00,0x00},
     72          //{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
     73          //{0x00,0x00,0x00,0xFE,0x3F,0x00,0x00,0x00},
     74          //{0x00,0x00,0x00,0x00,0x00,0x00,0x04,0x00},
     75          //{0x00,0x08,0x00,0xFE,0x3F,0x00,0x08,0x00},
     76          //{0x00,0x04,0x00,0x00,0x00,0x00,0x11,0x00},
     77          //{0x00,0x22,0x00,0xF0,0x07,0x00,0x02,0x00},
     78          //{0x00,0x11,0x00,0x0E,0x38,0x40,0x04,0x00},
     79          //{0x80,0x88,0xC0,0x01,0xC0,0x81,0x00,0x00},
     80          //{0x40,0x44,0x38,0x00,0x00,0x07,0x01,0x01},
     81          //{0x20,0x22,0x06,0x00,0x00,0x18,0x00,0x02},
     82          //{0x10,0x91,0x01,0x00,0x00,0x60,0x40,0x04},
     83          //{0x88,0x48,0x00,0x00,0x00,0x80,0x81,0x00},
     84          //{0x40,0x24,0x00,0x00,0x00,0x00,0x12,0x01},
     85          //{0x20,0x12,0x00,0x00,0x00,0x00,0x24,0x00},
     86          //{0x00,0x09,0x00,0x00,0x00,0x00,0x48,0x00},
     87          //{0x80,0x08,0x00,0x00,0x00,0x00,0x10,0x00},
     88          //{0x00,0x04,0x1C,0x00,0x00,0x00,0x20,0x00},
     89          //{0x00,0x04,0x36,0x00,0x00,0x00,0x20,0x00},
     90          //{0x00,0x82,0xC1,0x00,0x00,0x00,0x40,0x00},
     91          //{0x00,0x42,0x00,0x01,0x00,0x00,0x40,0x00},
     92          //{0x00,0x22,0x00,0x02,0x00,0x18,0x40,0x00},
     93          //{0x00,0x11,0x00,0x04,0xF0,0x0F,0x87,0x00},
     94          //{0x00,0x09,0x00,0x08,0x00,0x81,0x83,0x00},
     95          //{0x00,0x05,0x20,0x10,0x80,0xC8,0x81,0x00},
     96          //{0x95,0x04,0x36,0x10,0x80,0xE8,0x00,0xA9},
     97          //{0x95,0x02,0x93,0x20,0xC0,0xF8,0x00,0xA9},
     98          //{0x95,0x82,0xDF,0x20,0xC0,0xBF,0x01,0xA9},
     99          //{0x55,0xC1,0x7C,0x40,0xC0,0x18,0x03,0xAA},
    100          //{0xC4,0x01,0xEC,0x43,0x00,0x0C,0x06,0x8A},
    101          //{0xC4,0x00,0xA4,0x87,0x00,0x06,0x04,0x8A},
    102          //{0xC4,0x00,0x21,0x80,0x00,0x06,0x06,0x8A},
    103          //{0x44,0x10,0x01,0x80,0x00,0x0C,0x03,0x8B},
    104          //{0x44,0x30,0x83,0x00,0x01,0x98,0x81,0x8B},
    105          //{0xD5,0xE0,0xFB,0x00,0x01,0xF0,0x80,0xAA},
    106          //{0x95,0x00,0x0F,0x00,0x02,0x60,0x40,0xA9},
    107          //{0x95,0x61,0x02,0x00,0x02,0x00,0x40,0xA9},
    108          //{0x15,0x31,0x02,0x00,0x04,0x00,0x20,0xA9},
    109          //{0x00,0x11,0x04,0x00,0x04,0x00,0xA0,0x00},
    110          //{0x00,0x02,0x04,0x00,0x08,0x00,0x90,0x00},
    111          //{0x00,0x02,0x04,0x00,0x08,0x00,0x90,0x00},
    112          //{0x00,0x02,0x04,0x00,0x10,0x00,0x48,0x00},
    113          //{0x00,0x04,0x04,0x00,0x20,0x00,0x44,0x00},
    114          //{0x00,0x04,0x00,0x00,0x40,0x00,0x42,0x00},
    115          //{0x00,0x08,0x00,0x00,0x80,0x81,0x21,0x00},
    116          //{0x00,0x08,0x00,0x00,0x00,0x66,0x20,0x00},
    117          //{0x00,0x12,0x00,0x00,0x00,0x18,0x90,0x00},
    118          //{0x00,0x24,0x00,0x00,0x00,0x00,0x48,0x00},
    119          //{0x80,0x48,0x00,0x00,0x00,0x00,0x24,0x02},
    120          //{0x00,0x81,0x00,0x00,0x00,0x00,0x02,0x01},
    121          //{0x20,0x02,0x01,0x00,0x00,0x80,0x81,0x08},
    122          //{0x40,0x00,0x02,0x00,0x00,0x60,0x40,0x04},
    123          //{0x80,0x80,0x04,0x00,0x00,0x18,0x22,0x02},
    124          //{0x00,0x01,0x39,0x00,0x00,0x07,0x11,0x01},
    125          //{0x00,0x22,0xC2,0x01,0xC0,0x81,0x88,0x00},
    126          //{0x00,0x44,0x00,0x0E,0x38,0x00,0x44,0x00},
    127          //{0x00,0x88,0x00,0xF0,0x07,0x00,0x22,0x00},
    128          //{0x00,0x10,0x00,0x00,0x00,0x00,0x10,0x00},
    129          //{0x00,0x20,0x00,0xFE,0x3F,0x00,0x08,0x00},
    130          //{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
    131          //{0x00,0x00,0x00,0x1E,0x3C,0x00,0x00,0x00},
    132          //{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
    133          //{0x00,0x00,0x00,0x1E,0x3C,0x00,0x00,0x00},
    134          //{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
    135          //{0x00,0x00,0x00,0x00,0x00,0x40,0x00,0x00},
    136          //{0x00,0x00,0x00,0x00,0x00,0x40,0x00,0x00},
    137          //{0x00,0x00,0x00,0x00,0x00,0x40,0x98,0x00},
    138          //{0x00,0x00,0x00,0x00,0x00,0x40,0x97,0x00},
    139          //{0x00,0x00,0x00,0x00,0x00,0xF0,0xD1,0x00},
    140          //{0x00,0x00,0x00,0x00,0x00,0x4F,0x70,0x00},
    141          //{0x00,0x00,0x00,0x00,0x00,0x40,0x30,0x00},
    142          //{0x00,0x00,0x00,0x00,0x00,0x40,0x1E,0x00},
    143          //{0x00,0x00,0x00,0x00,0x00,0xF8,0x11,0x00},
    144          //{0xC0,0x07,0x1E,0x00,0x00,0x4F,0x10,0x00},
    145          //{0x60,0x0C,0x3F,0x00,0x00,0x40,0x10,0x00},
    146          //{0x20,0x98,0x21,0x00,0x00,0x40,0x10,0x00},
    147          //{0x10,0xF0,0x60,0x00,0x00,0x00,0xD0,0x00},
    148          //{0x10,0x60,0x60,0x00,0x00,0x40,0x41,0x00},
    149          //{0x10,0x30,0x60,0x00,0x00,0x60,0x61,0x00},
    150          //{0x10,0x70,0x60,0x00,0x00,0x20,0x31,0x00},
    151          //{0x10,0xC8,0x60,0x00,0x00,0x30,0x19,0x00},
    152          //{0x30,0x8C,0x60,0x00,0x00,0xF8,0x07,0x00},
    153          //{0xE0,0x86,0x30,0x00,0x00,0x0C,0x07,0x00},
    154          //{0x80,0x03,0x1B,0x00,0x00,0x06,0x0D,0x00},
    155          //{0x00,0x00,0x0E,0x00,0x00,0x82,0x18,0x00},
    156          //{0x00,0x00,0x00,0x00,0x00,0x80,0x30,0x00},
    157          //{0x00,0x00,0x00,0x00,0x00,0x80,0x20,0x00},
    158          //{0x00,0x00,0x00,0x00,0x00,0x80,0x40,0x00},
    159          //{0x00,0x00,0x00,0x00,0x00,0x80,0xC0,0x00},
    160          //{0x00,0x00,0x00,0x00,0x00,0x80,0x80,0x00},
    161          //{0x00,0x00,0x00,0x00,0x00,0x80,0x00,0x00},
    162          //{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
    163          //{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
    164          //{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
    165          //{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
    166          //{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00}
    167          //};
    168          
    169          
    170          //======================================

   \                                 In section .rodata, align 4
    171          const uint8 F6x8[][6] =
   \                     F6x8:
   \   00000000   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 47, 0, 0, 0, 0, 7, 0, 7, 0, 0, 20, 127
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x2F    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x07 0x00    
   \              0x07 0x00    
   \              0x00 0x14    
   \              0x7F         
   \   00000015   0x14 0x7F          DC8 20, 127, 20, 0, 36, 42, 127, 42, 18, 0, 98, 100, 8, 19, 35, 0, 54
   \              0x14 0x00    
   \              0x24 0x2A    
   \              0x7F 0x2A    
   \              0x12 0x00    
   \              0x62 0x64    
   \              0x08 0x13    
   \              0x23 0x00    
   \              0x36         
   \   00000026   0x49 0x55          DC8 73, 85, 34, 80, 0, 0, 5, 3, 0, 0, 0, 0, 28, 34, 65, 0, 0, 0, 65, 34
   \              0x22 0x50    
   \              0x00 0x00    
   \              0x05 0x03    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x1C 0x22    
   \              0x41 0x00    
   \              0x00 0x00    
   \              0x41 0x22    
   \   0000003A   0x1C 0x00          DC8 28, 0, 0, 20, 8, 62, 8, 20, 0, 8, 8, 62, 8, 8, 0, 0, 0, 160, 96, 0
   \              0x00 0x14    
   \              0x08 0x3E    
   \              0x08 0x14    
   \              0x00 0x08    
   \              0x08 0x3E    
   \              0x08 0x08    
   \              0x00 0x00    
   \              0x00 0xA0    
   \              0x60 0x00    
   \   0000004E   0x00 0x08          DC8 0, 8, 8, 8, 8, 8, 0, 0, 96, 96, 0, 0, 0, 32, 16, 8, 4, 2, 0, 62, 81
   \              0x08 0x08    
   \              0x08 0x08    
   \              0x00 0x00    
   \              0x60 0x60    
   \              0x00 0x00    
   \              0x00 0x20    
   \              0x10 0x08    
   \              0x04 0x02    
   \              0x00 0x3E    
   \              0x51         
   \   00000063   0x49 0x45          DC8 73, 69, 62, 0, 0, 66, 127, 64, 0, 0, 66, 97, 81, 73, 70, 0, 33, 65
   \              0x3E 0x00    
   \              0x00 0x42    
   \              0x7F 0x40    
   \              0x00 0x00    
   \              0x42 0x61    
   \              0x51 0x49    
   \              0x46 0x00    
   \              0x21 0x41    
   \   00000075   0x45 0x4B          DC8 69, 75, 49, 0, 24, 20, 18, 127, 16, 0, 39, 69, 69, 69, 57, 0, 60
   \              0x31 0x00    
   \              0x18 0x14    
   \              0x12 0x7F    
   \              0x10 0x00    
   \              0x27 0x45    
   \              0x45 0x45    
   \              0x39 0x00    
   \              0x3C         
   \   00000086   0x4A 0x49          DC8 74, 73, 73, 48, 0, 1, 113, 9, 5, 3, 0, 54, 73, 73, 73, 54, 0, 6, 73
   \              0x49 0x30    
   \              0x00 0x01    
   \              0x71 0x09    
   \              0x05 0x03    
   \              0x00 0x36    
   \              0x49 0x49    
   \              0x49 0x36    
   \              0x00 0x06    
   \              0x49         
   \   00000099   0x49 0x29          DC8 73, 41, 30, 0, 0, 54, 54, 0, 0, 0, 0, 86, 54, 0, 0, 0, 8, 20, 34
   \              0x1E 0x00    
   \              0x00 0x36    
   \              0x36 0x00    
   \              0x00 0x00    
   \              0x00 0x56    
   \              0x36 0x00    
   \              0x00 0x00    
   \              0x08 0x14    
   \              0x22         
   \   000000AC   0x41 0x00          DC8 65, 0, 0, 20, 20, 20, 20, 20, 0, 0, 65, 34, 20, 8, 0, 2, 1, 81, 9
   \              0x00 0x14    
   \              0x14 0x14    
   \              0x14 0x14    
   \              0x00 0x00    
   \              0x41 0x22    
   \              0x14 0x08    
   \              0x00 0x02    
   \              0x01 0x51    
   \              0x09         
   \   000000BF   0x06 0x00          DC8 6, 0, 50, 73, 89, 81, 62, 0, 124, 18, 17, 18, 124, 0, 127, 73, 73
   \              0x32 0x49    
   \              0x59 0x51    
   \              0x3E 0x00    
   \              0x7C 0x12    
   \              0x11 0x12    
   \              0x7C 0x00    
   \              0x7F 0x49    
   \              0x49         
   \   000000D0   0x49 0x36          DC8 73, 54, 0, 62, 65, 65, 65, 34, 0, 127, 65, 65, 34, 28, 0, 127, 73
   \              0x00 0x3E    
   \              0x41 0x41    
   \              0x41 0x22    
   \              0x00 0x7F    
   \              0x41 0x41    
   \              0x22 0x1C    
   \              0x00 0x7F    
   \              0x49         
   \   000000E1   0x49 0x49          DC8 73, 73, 65, 0, 127, 9, 9, 9, 1, 0, 62, 65, 73, 73, 122, 0, 127, 8
   \              0x41 0x00    
   \              0x7F 0x09    
   \              0x09 0x09    
   \              0x01 0x00    
   \              0x3E 0x41    
   \              0x49 0x49    
   \              0x7A 0x00    
   \              0x7F 0x08    
   \   000000F3   0x08 0x08          DC8 8, 8, 127, 0, 0, 65, 127, 65, 0, 0, 32, 64, 65, 63, 1, 0, 127, 8
   \              0x7F 0x00    
   \              0x00 0x41    
   \              0x7F 0x41    
   \              0x00 0x00    
   \              0x20 0x40    
   \              0x41 0x3F    
   \              0x01 0x00    
   \              0x7F 0x08    
   \   00000105   0x14 0x22          DC8 20, 34, 65, 0, 127, 64, 64, 64, 64, 0, 127, 2, 12, 2, 127, 0, 127
   \              0x41 0x00    
   \              0x7F 0x40    
   \              0x40 0x40    
   \              0x40 0x00    
   \              0x7F 0x02    
   \              0x0C 0x02    
   \              0x7F 0x00    
   \              0x7F         
   \   00000116   0x04 0x08          DC8 4, 8, 16, 127, 0, 62, 65, 65, 65, 62, 0, 127, 9, 9, 9, 6, 0, 62, 65
   \              0x10 0x7F    
   \              0x00 0x3E    
   \              0x41 0x41    
   \              0x41 0x3E    
   \              0x00 0x7F    
   \              0x09 0x09    
   \              0x09 0x06    
   \              0x00 0x3E    
   \              0x41         
   \   00000129   0x51 0x21          DC8 81, 33, 94, 0, 127, 9, 25, 41, 70, 0, 70, 73, 73, 73, 49, 0, 1, 1
   \              0x5E 0x00    
   \              0x7F 0x09    
   \              0x19 0x29    
   \              0x46 0x00    
   \              0x46 0x49    
   \              0x49 0x49    
   \              0x31 0x00    
   \              0x01 0x01    
   \   0000013B   0x7F 0x01          DC8 127, 1, 1, 0, 63, 64, 64, 64, 63, 0, 31, 32, 64, 32, 31, 0, 63, 64
   \              0x01 0x00    
   \              0x3F 0x40    
   \              0x40 0x40    
   \              0x3F 0x00    
   \              0x1F 0x20    
   \              0x40 0x20    
   \              0x1F 0x00    
   \              0x3F 0x40    
   \   0000014D   0x38 0x40          DC8 56, 64, 63, 0, 99, 20, 8, 20, 99, 0, 7, 8, 112, 8, 7, 0, 97, 81, 73
   \              0x3F 0x00    
   \              0x63 0x14    
   \              0x08 0x14    
   \              0x63 0x00    
   \              0x07 0x08    
   \              0x70 0x08    
   \              0x07 0x00    
   \              0x61 0x51    
   \              0x49         
   \   00000160   0x45 0x43          DC8 69, 67, 0, 0, 127, 65, 65, 0, 0, 85, 42, 85, 42, 85, 0, 0, 65, 65
   \              0x00 0x00    
   \              0x7F 0x41    
   \              0x41 0x00    
   \              0x00 0x55    
   \              0x2A 0x55    
   \              0x2A 0x55    
   \              0x00 0x00    
   \              0x41 0x41    
   \   00000172   0x7F 0x00          DC8 127, 0, 0, 4, 2, 1, 2, 4, 0, 64, 64, 64, 64, 64, 0, 0, 1, 2, 4, 0
   \              0x00 0x04    
   \              0x02 0x01    
   \              0x02 0x04    
   \              0x00 0x40    
   \              0x40 0x40    
   \              0x40 0x40    
   \              0x00 0x00    
   \              0x01 0x02    
   \              0x04 0x00    
   \   00000186   0x00 0x20          DC8 0, 32, 84, 84, 84, 120, 0, 127, 72, 68, 68, 56, 0, 56, 68, 68, 68
   \              0x54 0x54    
   \              0x54 0x78    
   \              0x00 0x7F    
   \              0x48 0x44    
   \              0x44 0x38    
   \              0x00 0x38    
   \              0x44 0x44    
   \              0x44         
   \   00000197   0x20 0x00          DC8 32, 0, 56, 68, 68, 72, 127, 0, 56, 84, 84, 84, 24, 0, 8, 126, 9, 1
   \              0x38 0x44    
   \              0x44 0x48    
   \              0x7F 0x00    
   \              0x38 0x54    
   \              0x54 0x54    
   \              0x18 0x00    
   \              0x08 0x7E    
   \              0x09 0x01    
   \   000001A9   0x02 0x00          DC8 2, 0, 24, 164, 164, 164, 124, 0, 127, 8, 4, 4, 120, 0, 0, 68, 125
   \              0x18 0xA4    
   \              0xA4 0xA4    
   \              0x7C 0x00    
   \              0x7F 0x08    
   \              0x04 0x04    
   \              0x78 0x00    
   \              0x00 0x44    
   \              0x7D         
   \   000001BA   0x40 0x00          DC8 64, 0, 0, 64, 128, 132, 125, 0, 0, 127, 16, 40, 68, 0, 0, 0, 65
   \              0x00 0x40    
   \              0x80 0x84    
   \              0x7D 0x00    
   \              0x00 0x7F    
   \              0x10 0x28    
   \              0x44 0x00    
   \              0x00 0x00    
   \              0x41         
   \   000001CB   0x7F 0x40          DC8 127, 64, 0, 0, 124, 4, 24, 4, 120, 0, 124, 8, 4, 4, 120, 0, 56, 68
   \              0x00 0x00    
   \              0x7C 0x04    
   \              0x18 0x04    
   \              0x78 0x00    
   \              0x7C 0x08    
   \              0x04 0x04    
   \              0x78 0x00    
   \              0x38 0x44    
   \   000001DD   0x44 0x44          DC8 68, 68, 56, 0, 252, 36, 36, 36, 24, 0, 24, 36, 36, 24, 252, 0, 124
   \              0x38 0x00    
   \              0xFC 0x24    
   \              0x24 0x24    
   \              0x18 0x00    
   \              0x18 0x24    
   \              0x24 0x18    
   \              0xFC 0x00    
   \              0x7C         
   \   000001EE   0x08 0x04          DC8 8, 4, 4, 8, 0, 72, 84, 84, 84, 32, 0, 4, 63, 68, 64, 32, 0, 60, 64
   \              0x04 0x08    
   \              0x00 0x48    
   \              0x54 0x54    
   \              0x54 0x20    
   \              0x00 0x04    
   \              0x3F 0x44    
   \              0x40 0x20    
   \              0x00 0x3C    
   \              0x40         
   \   00000201   0x40 0x20          DC8 64, 32, 124, 0, 28, 32, 64, 32, 28, 0, 60, 64, 48, 64, 60, 0, 68
   \              0x7C 0x00    
   \              0x1C 0x20    
   \              0x40 0x20    
   \              0x1C 0x00    
   \              0x3C 0x40    
   \              0x30 0x40    
   \              0x3C 0x00    
   \              0x44         
   \   00000212   0x28 0x10          DC8 40, 16, 40, 68, 0, 28, 160, 160, 160, 124, 0, 68, 100, 84, 76, 68
   \              0x28 0x44    
   \              0x00 0x1C    
   \              0xA0 0xA0    
   \              0xA0 0x7C    
   \              0x00 0x44    
   \              0x64 0x54    
   \              0x4C 0x44    
   \   00000222   0x14 0x14          DC8 20, 20, 20, 20, 20, 20
   \              0x14 0x14    
   \              0x14 0x14    
    172          {
    173              { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },   // sp
    174              { 0x00, 0x00, 0x00, 0x2f, 0x00, 0x00 },   // !
    175              { 0x00, 0x00, 0x07, 0x00, 0x07, 0x00 },   // "
    176              { 0x00, 0x14, 0x7f, 0x14, 0x7f, 0x14 },   // #
    177              { 0x00, 0x24, 0x2a, 0x7f, 0x2a, 0x12 },   // $
    178              { 0x00, 0x62, 0x64, 0x08, 0x13, 0x23 },   // %
    179              { 0x00, 0x36, 0x49, 0x55, 0x22, 0x50 },   // &
    180              { 0x00, 0x00, 0x05, 0x03, 0x00, 0x00 },   // '
    181              { 0x00, 0x00, 0x1c, 0x22, 0x41, 0x00 },   // (
    182              { 0x00, 0x00, 0x41, 0x22, 0x1c, 0x00 },   // )
    183              { 0x00, 0x14, 0x08, 0x3E, 0x08, 0x14 },   // *
    184              { 0x00, 0x08, 0x08, 0x3E, 0x08, 0x08 },   // +
    185              { 0x00, 0x00, 0x00, 0xA0, 0x60, 0x00 },   // ,
    186              { 0x00, 0x08, 0x08, 0x08, 0x08, 0x08 },   // -
    187              { 0x00, 0x00, 0x60, 0x60, 0x00, 0x00 },   // .
    188              { 0x00, 0x20, 0x10, 0x08, 0x04, 0x02 },   // /
    189              { 0x00, 0x3E, 0x51, 0x49, 0x45, 0x3E },   // 0
    190              { 0x00, 0x00, 0x42, 0x7F, 0x40, 0x00 },   // 1
    191              { 0x00, 0x42, 0x61, 0x51, 0x49, 0x46 },   // 2
    192              { 0x00, 0x21, 0x41, 0x45, 0x4B, 0x31 },   // 3
    193              { 0x00, 0x18, 0x14, 0x12, 0x7F, 0x10 },   // 4
    194              { 0x00, 0x27, 0x45, 0x45, 0x45, 0x39 },   // 5
    195              { 0x00, 0x3C, 0x4A, 0x49, 0x49, 0x30 },   // 6
    196              { 0x00, 0x01, 0x71, 0x09, 0x05, 0x03 },   // 7
    197              { 0x00, 0x36, 0x49, 0x49, 0x49, 0x36 },   // 8
    198              { 0x00, 0x06, 0x49, 0x49, 0x29, 0x1E },   // 9
    199              { 0x00, 0x00, 0x36, 0x36, 0x00, 0x00 },   // :
    200              { 0x00, 0x00, 0x56, 0x36, 0x00, 0x00 },   // ;
    201              { 0x00, 0x08, 0x14, 0x22, 0x41, 0x00 },   // <
    202              { 0x00, 0x14, 0x14, 0x14, 0x14, 0x14 },   // =
    203              { 0x00, 0x00, 0x41, 0x22, 0x14, 0x08 },   // >
    204              { 0x00, 0x02, 0x01, 0x51, 0x09, 0x06 },   // ?
    205              { 0x00, 0x32, 0x49, 0x59, 0x51, 0x3E },   // @
    206              { 0x00, 0x7C, 0x12, 0x11, 0x12, 0x7C },   // A
    207              { 0x00, 0x7F, 0x49, 0x49, 0x49, 0x36 },   // B
    208              { 0x00, 0x3E, 0x41, 0x41, 0x41, 0x22 },   // C
    209              { 0x00, 0x7F, 0x41, 0x41, 0x22, 0x1C },   // D
    210              { 0x00, 0x7F, 0x49, 0x49, 0x49, 0x41 },   // E
    211              { 0x00, 0x7F, 0x09, 0x09, 0x09, 0x01 },   // F
    212              { 0x00, 0x3E, 0x41, 0x49, 0x49, 0x7A },   // G
    213              { 0x00, 0x7F, 0x08, 0x08, 0x08, 0x7F },   // H
    214              { 0x00, 0x00, 0x41, 0x7F, 0x41, 0x00 },   // I
    215              { 0x00, 0x20, 0x40, 0x41, 0x3F, 0x01 },   // J
    216              { 0x00, 0x7F, 0x08, 0x14, 0x22, 0x41 },   // K
    217              { 0x00, 0x7F, 0x40, 0x40, 0x40, 0x40 },   // L
    218              { 0x00, 0x7F, 0x02, 0x0C, 0x02, 0x7F },   // M
    219              { 0x00, 0x7F, 0x04, 0x08, 0x10, 0x7F },   // N
    220              { 0x00, 0x3E, 0x41, 0x41, 0x41, 0x3E },   // O
    221              { 0x00, 0x7F, 0x09, 0x09, 0x09, 0x06 },   // P
    222              { 0x00, 0x3E, 0x41, 0x51, 0x21, 0x5E },   // Q
    223              { 0x00, 0x7F, 0x09, 0x19, 0x29, 0x46 },   // R
    224              { 0x00, 0x46, 0x49, 0x49, 0x49, 0x31 },   // S
    225              { 0x00, 0x01, 0x01, 0x7F, 0x01, 0x01 },   // T
    226              { 0x00, 0x3F, 0x40, 0x40, 0x40, 0x3F },   // U
    227              { 0x00, 0x1F, 0x20, 0x40, 0x20, 0x1F },   // V
    228              { 0x00, 0x3F, 0x40, 0x38, 0x40, 0x3F },   // W
    229              { 0x00, 0x63, 0x14, 0x08, 0x14, 0x63 },   // X
    230              { 0x00, 0x07, 0x08, 0x70, 0x08, 0x07 },   // Y
    231              { 0x00, 0x61, 0x51, 0x49, 0x45, 0x43 },   // Z
    232              { 0x00, 0x00, 0x7F, 0x41, 0x41, 0x00 },   // [
    233              { 0x00, 0x55, 0x2A, 0x55, 0x2A, 0x55 },   // /*\*/
    234              { 0x00, 0x00, 0x41, 0x41, 0x7F, 0x00 },   // ]
    235              { 0x00, 0x04, 0x02, 0x01, 0x02, 0x04 },   // ^
    236              { 0x00, 0x40, 0x40, 0x40, 0x40, 0x40 },   // _
    237              { 0x00, 0x00, 0x01, 0x02, 0x04, 0x00 },   // '
    238              { 0x00, 0x20, 0x54, 0x54, 0x54, 0x78 },   // a
    239              { 0x00, 0x7F, 0x48, 0x44, 0x44, 0x38 },   // b
    240              { 0x00, 0x38, 0x44, 0x44, 0x44, 0x20 },   // c
    241              { 0x00, 0x38, 0x44, 0x44, 0x48, 0x7F },   // d
    242              { 0x00, 0x38, 0x54, 0x54, 0x54, 0x18 },   // e
    243              { 0x00, 0x08, 0x7E, 0x09, 0x01, 0x02 },   // f
    244              { 0x00, 0x18, 0xA4, 0xA4, 0xA4, 0x7C },   // g
    245              { 0x00, 0x7F, 0x08, 0x04, 0x04, 0x78 },   // h
    246              { 0x00, 0x00, 0x44, 0x7D, 0x40, 0x00 },   // i
    247              { 0x00, 0x40, 0x80, 0x84, 0x7D, 0x00 },   // j
    248              { 0x00, 0x7F, 0x10, 0x28, 0x44, 0x00 },   // k
    249              { 0x00, 0x00, 0x41, 0x7F, 0x40, 0x00 },   // l
    250              { 0x00, 0x7C, 0x04, 0x18, 0x04, 0x78 },   // m
    251              { 0x00, 0x7C, 0x08, 0x04, 0x04, 0x78 },   // n
    252              { 0x00, 0x38, 0x44, 0x44, 0x44, 0x38 },   // o
    253              { 0x00, 0xFC, 0x24, 0x24, 0x24, 0x18 },   // p
    254              { 0x00, 0x18, 0x24, 0x24, 0x18, 0xFC },   // q
    255              { 0x00, 0x7C, 0x08, 0x04, 0x04, 0x08 },   // r
    256              { 0x00, 0x48, 0x54, 0x54, 0x54, 0x20 },   // s
    257              { 0x00, 0x04, 0x3F, 0x44, 0x40, 0x20 },   // t
    258              { 0x00, 0x3C, 0x40, 0x40, 0x20, 0x7C },   // u
    259              { 0x00, 0x1C, 0x20, 0x40, 0x20, 0x1C },   // v
    260              { 0x00, 0x3C, 0x40, 0x30, 0x40, 0x3C },   // w
    261              { 0x00, 0x44, 0x28, 0x10, 0x28, 0x44 },   // x
    262              { 0x00, 0x1C, 0xA0, 0xA0, 0xA0, 0x7C },   // y
    263              { 0x00, 0x44, 0x64, 0x54, 0x4C, 0x44 },   // z
    264              { 0x14, 0x14, 0x14, 0x14, 0x14, 0x14 }    // horiz lines
    265          };
    266          

   \                                 In section .rodata, align 4
    267          const uint8 F8X16[]=
   \                     F8X16:
   \   00000000   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 248, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0xF8    
   \              0x00 0x00    
   \   00000016   0x00 0x00          DC8 0, 0, 0, 0, 0, 51, 48, 0, 0, 0, 0, 16, 12, 6, 16, 12, 6, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x33    
   \              0x30 0x00    
   \              0x00 0x00    
   \              0x00 0x10    
   \              0x0C 0x06    
   \              0x10 0x0C    
   \              0x06 0x00    
   \              0x00 0x00    
   \              0x00         
   \   0000002B   0x00 0x00          DC8 0, 0, 0, 0, 0, 64, 192, 120, 64, 192, 120, 64, 0, 4, 63, 4, 4, 63
   \              0x00 0x00    
   \              0x00 0x40    
   \              0xC0 0x78    
   \              0x40 0xC0    
   \              0x78 0x40    
   \              0x00 0x04    
   \              0x3F 0x04    
   \              0x04 0x3F    
   \   0000003D   0x04 0x04          DC8 4, 4, 0, 0, 112, 136, 252, 8, 48, 0, 0, 0, 24, 32, 255, 33, 30, 0
   \              0x00 0x00    
   \              0x70 0x88    
   \              0xFC 0x08    
   \              0x30 0x00    
   \              0x00 0x00    
   \              0x18 0x20    
   \              0xFF 0x21    
   \              0x1E 0x00    
   \   0000004F   0x00 0xF0          DC8 0, 240, 8, 240, 0, 224, 24, 0, 0, 0, 33, 28, 3, 30, 33, 30, 0, 0
   \              0x08 0xF0    
   \              0x00 0xE0    
   \              0x18 0x00    
   \              0x00 0x00    
   \              0x21 0x1C    
   \              0x03 0x1E    
   \              0x21 0x1E    
   \              0x00 0x00    
   \   00000061   0xF0 0x08          DC8 240, 8, 136, 112, 0, 0, 0, 30, 33, 35, 36, 25, 39, 33, 16, 16, 22
   \              0x88 0x70    
   \              0x00 0x00    
   \              0x00 0x1E    
   \              0x21 0x23    
   \              0x24 0x19    
   \              0x27 0x21    
   \              0x10 0x10    
   \              0x16         
   \   00000072   0x0E 0x00          DC8 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 224, 24, 4, 2
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0xE0    
   \              0x18 0x04    
   \              0x02         
   \   00000087   0x00 0x00          DC8 0, 0, 0, 0, 7, 24, 32, 64, 0, 0, 2, 4, 24, 224, 0, 0, 0, 0, 64, 32
   \              0x00 0x00    
   \              0x07 0x18    
   \              0x20 0x40    
   \              0x00 0x00    
   \              0x02 0x04    
   \              0x18 0xE0    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x40 0x20    
   \   0000009B   0x18 0x07          DC8 24, 7, 0, 0, 0, 64, 64, 128, 240, 128, 64, 64, 0, 2, 2, 1, 15, 1, 2
   \              0x00 0x00    
   \              0x00 0x40    
   \              0x40 0x80    
   \              0xF0 0x80    
   \              0x40 0x40    
   \              0x00 0x02    
   \              0x02 0x01    
   \              0x0F 0x01    
   \              0x02         
   \   000000AE   0x02 0x00          DC8 2, 0, 0, 0, 0, 240, 0, 0, 0, 0, 1, 1, 1, 31, 1, 1, 1, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0xF0    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x01 0x01    
   \              0x01 0x1F    
   \              0x01 0x01    
   \              0x01 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   000000C4   0x00 0x00          DC8 0, 0, 0, 0, 128, 176, 112, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x80 0xB0    
   \              0x70 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00         
   \   000000D9   0x01 0x01          DC8 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 48, 48, 0, 0, 0, 0
   \              0x01 0x01    
   \              0x01 0x01    
   \              0x01 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x30 0x30    
   \              0x00 0x00    
   \              0x00 0x00    
   \   000000EF   0x00 0x00          DC8 0, 0, 0, 0, 0, 128, 96, 24, 4, 0, 96, 24, 6, 1, 0, 0, 0, 0, 224, 16
   \              0x00 0x00    
   \              0x00 0x80    
   \              0x60 0x18    
   \              0x04 0x00    
   \              0x60 0x18    
   \              0x06 0x01    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0xE0 0x10    
   \   00000103   0x08 0x08          DC8 8, 8, 16, 224, 0, 0, 15, 16, 32, 32, 16, 15, 0, 0, 16, 16, 248, 0
   \              0x10 0xE0    
   \              0x00 0x00    
   \              0x0F 0x10    
   \              0x20 0x20    
   \              0x10 0x0F    
   \              0x00 0x00    
   \              0x10 0x10    
   \              0xF8 0x00    
   \   00000115   0x00 0x00          DC8 0, 0, 0, 0, 32, 32, 63, 32, 32, 0, 0, 0, 112, 8, 8, 8, 136, 112, 0
   \              0x00 0x00    
   \              0x20 0x20    
   \              0x3F 0x20    
   \              0x20 0x00    
   \              0x00 0x00    
   \              0x70 0x08    
   \              0x08 0x08    
   \              0x88 0x70    
   \              0x00         
   \   00000128   0x00 0x30          DC8 0, 48, 40, 36, 34, 33, 48, 0, 0, 48, 8, 136, 136, 72, 48, 0, 0, 24
   \              0x28 0x24    
   \              0x22 0x21    
   \              0x30 0x00    
   \              0x00 0x30    
   \              0x08 0x88    
   \              0x88 0x48    
   \              0x30 0x00    
   \              0x00 0x18    
   \   0000013A   0x20 0x20          DC8 32, 32, 32, 17, 14, 0, 0, 0, 192, 32, 16, 248, 0, 0, 0, 7, 4, 36
   \              0x20 0x11    
   \              0x0E 0x00    
   \              0x00 0x00    
   \              0xC0 0x20    
   \              0x10 0xF8    
   \              0x00 0x00    
   \              0x00 0x07    
   \              0x04 0x24    
   \   0000014C   0x24 0x3F          DC8 36, 63, 36, 0, 0, 248, 8, 136, 136, 8, 8, 0, 0, 25, 33, 32, 32, 17
   \              0x24 0x00    
   \              0x00 0xF8    
   \              0x08 0x88    
   \              0x88 0x08    
   \              0x08 0x00    
   \              0x00 0x19    
   \              0x21 0x20    
   \              0x20 0x11    
   \   0000015E   0x0E 0x00          DC8 14, 0, 0, 224, 16, 136, 136, 24, 0, 0, 0, 15, 17, 32, 32, 17, 14, 0
   \              0x00 0xE0    
   \              0x10 0x88    
   \              0x88 0x18    
   \              0x00 0x00    
   \              0x00 0x0F    
   \              0x11 0x20    
   \              0x20 0x11    
   \              0x0E 0x00    
   \   00000170   0x00 0x38          DC8 0, 56, 8, 8, 200, 56, 8, 0, 0, 0, 0, 63, 0, 0, 0, 0, 0, 112, 136, 8
   \              0x08 0x08    
   \              0xC8 0x38    
   \              0x08 0x00    
   \              0x00 0x00    
   \              0x00 0x3F    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x70    
   \              0x88 0x08    
   \   00000184   0x08 0x88          DC8 8, 136, 112, 0, 0, 28, 34, 33, 33, 34, 28, 0, 0, 224, 16, 8, 8, 16
   \              0x70 0x00    
   \              0x00 0x1C    
   \              0x22 0x21    
   \              0x21 0x22    
   \              0x1C 0x00    
   \              0x00 0xE0    
   \              0x10 0x08    
   \              0x08 0x10    
   \   00000196   0xE0 0x00          DC8 224, 0, 0, 0, 49, 34, 34, 17, 15, 0, 0, 0, 0, 192, 192, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x31 0x22    
   \              0x22 0x11    
   \              0x0F 0x00    
   \              0x00 0x00    
   \              0x00 0xC0    
   \              0xC0 0x00    
   \              0x00 0x00    
   \              0x00         
   \   000001A9   0x00 0x00          DC8 0, 0, 48, 48, 0, 0, 0, 0, 0, 0, 128, 0, 0, 0, 0, 0, 0, 128, 96, 0
   \              0x30 0x30    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x80 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x80    
   \              0x60 0x00    
   \   000001BD   0x00 0x00          DC8 0, 0, 0, 0, 0, 128, 64, 32, 16, 8, 0, 0, 1, 2, 4, 8, 16, 32, 0, 64
   \              0x00 0x00    
   \              0x00 0x80    
   \              0x40 0x20    
   \              0x10 0x08    
   \              0x00 0x00    
   \              0x01 0x02    
   \              0x04 0x08    
   \              0x10 0x20    
   \              0x00 0x40    
   \   000001D1   0x40 0x40          DC8 64, 64, 64, 64, 64, 64, 0, 4, 4, 4, 4, 4, 4, 4, 0, 0, 8, 16, 32, 64
   \              0x40 0x40    
   \              0x40 0x40    
   \              0x00 0x04    
   \              0x04 0x04    
   \              0x04 0x04    
   \              0x04 0x04    
   \              0x00 0x00    
   \              0x08 0x10    
   \              0x20 0x40    
   \   000001E5   0x80 0x00          DC8 128, 0, 0, 0, 32, 16, 8, 4, 2, 1, 0, 0, 112, 72, 8, 8, 8, 240, 0, 0
   \              0x00 0x00    
   \              0x20 0x10    
   \              0x08 0x04    
   \              0x02 0x01    
   \              0x00 0x00    
   \              0x70 0x48    
   \              0x08 0x08    
   \              0x08 0xF0    
   \              0x00 0x00    
   \   000001F9   0x00 0x00          DC8 0, 0, 48, 54, 1, 0, 0, 192, 48, 200, 40, 232, 16, 224, 0, 7, 24, 39
   \              0x30 0x36    
   \              0x01 0x00    
   \              0x00 0xC0    
   \              0x30 0xC8    
   \              0x28 0xE8    
   \              0x10 0xE0    
   \              0x00 0x07    
   \              0x18 0x27    
   \   0000020B   0x24 0x23          DC8 36, 35, 20, 11, 0, 0, 0, 192, 56, 224, 0, 0, 0, 32, 60, 35, 2, 2
   \              0x14 0x0B    
   \              0x00 0x00    
   \              0x00 0xC0    
   \              0x38 0xE0    
   \              0x00 0x00    
   \              0x00 0x20    
   \              0x3C 0x23    
   \              0x02 0x02    
   \   0000021D   0x27 0x38          DC8 39, 56, 32, 8, 248, 136, 136, 136, 112, 0, 0, 32, 63, 32, 32, 32
   \              0x20 0x08    
   \              0xF8 0x88    
   \              0x88 0x88    
   \              0x70 0x00    
   \              0x00 0x20    
   \              0x3F 0x20    
   \              0x20 0x20    
   \   0000022D   0x11 0x0E          DC8 17, 14, 0, 192, 48, 8, 8, 8, 8, 56, 0, 7, 24, 32, 32, 32, 16, 8, 0
   \              0x00 0xC0    
   \              0x30 0x08    
   \              0x08 0x08    
   \              0x08 0x38    
   \              0x00 0x07    
   \              0x18 0x20    
   \              0x20 0x20    
   \              0x10 0x08    
   \              0x00         
   \   00000240   0x08 0xF8          DC8 8, 248, 8, 8, 8, 16, 224, 0, 32, 63, 32, 32, 32, 16, 15, 0, 8, 248
   \              0x08 0x08    
   \              0x08 0x10    
   \              0xE0 0x00    
   \              0x20 0x3F    
   \              0x20 0x20    
   \              0x20 0x10    
   \              0x0F 0x00    
   \              0x08 0xF8    
   \   00000252   0x88 0x88          DC8 136, 136, 232, 8, 16, 0, 32, 63, 32, 32, 35, 32, 24, 0, 8, 248, 136
   \              0xE8 0x08    
   \              0x10 0x00    
   \              0x20 0x3F    
   \              0x20 0x20    
   \              0x23 0x20    
   \              0x18 0x00    
   \              0x08 0xF8    
   \              0x88         
   \   00000263   0x88 0xE8          DC8 136, 232, 8, 16, 0, 32, 63, 32, 0, 3, 0, 0, 0, 192, 48, 8, 8, 8, 56
   \              0x08 0x10    
   \              0x00 0x20    
   \              0x3F 0x20    
   \              0x00 0x03    
   \              0x00 0x00    
   \              0x00 0xC0    
   \              0x30 0x08    
   \              0x08 0x08    
   \              0x38         
   \   00000276   0x00 0x00          DC8 0, 0, 7, 24, 32, 32, 34, 30, 2, 0, 8, 248, 8, 0, 0, 8, 248, 8, 32
   \              0x07 0x18    
   \              0x20 0x20    
   \              0x22 0x1E    
   \              0x02 0x00    
   \              0x08 0xF8    
   \              0x08 0x00    
   \              0x00 0x08    
   \              0xF8 0x08    
   \              0x20         
   \   00000289   0x3F 0x21          DC8 63, 33, 1, 1, 33, 63, 32, 0, 8, 8, 248, 8, 8, 0, 0, 0, 32, 32, 63
   \              0x01 0x01    
   \              0x21 0x3F    
   \              0x20 0x00    
   \              0x08 0x08    
   \              0xF8 0x08    
   \              0x08 0x00    
   \              0x00 0x00    
   \              0x20 0x20    
   \              0x3F         
   \   0000029C   0x20 0x20          DC8 32, 32, 0, 0, 0, 0, 8, 8, 248, 8, 8, 0, 192, 128, 128, 128, 127, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x08 0x08    
   \              0xF8 0x08    
   \              0x08 0x00    
   \              0xC0 0x80    
   \              0x80 0x80    
   \              0x7F 0x00    
   \   000002AE   0x00 0x00          DC8 0, 0, 8, 248, 136, 192, 40, 24, 8, 0, 32, 63, 32, 1, 38, 56, 32, 0
   \              0x08 0xF8    
   \              0x88 0xC0    
   \              0x28 0x18    
   \              0x08 0x00    
   \              0x20 0x3F    
   \              0x20 0x01    
   \              0x26 0x38    
   \              0x20 0x00    
   \   000002C0   0x08 0xF8          DC8 8, 248, 8, 0, 0, 0, 0, 0, 32, 63, 32, 32, 32, 32, 48, 0, 8, 248
   \              0x08 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x20 0x3F    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x30 0x00    
   \              0x08 0xF8    
   \   000002D2   0xF8 0x00          DC8 248, 0, 248, 248, 8, 0, 32, 63, 0, 63, 0, 63, 32, 0, 8, 248, 48
   \              0xF8 0xF8    
   \              0x08 0x00    
   \              0x20 0x3F    
   \              0x00 0x3F    
   \              0x00 0x3F    
   \              0x20 0x00    
   \              0x08 0xF8    
   \              0x30         
   \   000002E3   0xC0 0x00          DC8 192, 0, 8, 248, 8, 32, 63, 32, 0, 7, 24, 63, 0, 224, 16, 8, 8, 8
   \              0x08 0xF8    
   \              0x08 0x20    
   \              0x3F 0x20    
   \              0x00 0x07    
   \              0x18 0x3F    
   \              0x00 0xE0    
   \              0x10 0x08    
   \              0x08 0x08    
   \   000002F5   0x10 0xE0          DC8 16, 224, 0, 15, 16, 32, 32, 32, 16, 15, 0, 8, 248, 8, 8, 8, 8, 240
   \              0x00 0x0F    
   \              0x10 0x20    
   \              0x20 0x20    
   \              0x10 0x0F    
   \              0x00 0x08    
   \              0xF8 0x08    
   \              0x08 0x08    
   \              0x08 0xF0    
   \   00000307   0x00 0x20          DC8 0, 32, 63, 33, 1, 1, 1, 0, 0, 224, 16, 8, 8, 8, 16, 224, 0, 15, 24
   \              0x3F 0x21    
   \              0x01 0x01    
   \              0x01 0x00    
   \              0x00 0xE0    
   \              0x10 0x08    
   \              0x08 0x08    
   \              0x10 0xE0    
   \              0x00 0x0F    
   \              0x18         
   \   0000031A   0x24 0x24          DC8 36, 36, 56, 80, 79, 0, 8, 248, 136, 136, 136, 136, 112, 0, 32, 63
   \              0x38 0x50    
   \              0x4F 0x00    
   \              0x08 0xF8    
   \              0x88 0x88    
   \              0x88 0x88    
   \              0x70 0x00    
   \              0x20 0x3F    
   \   0000032A   0x20 0x00          DC8 32, 0, 3, 12, 48, 32, 0, 112, 136, 8, 8, 8, 56, 0, 0, 56, 32, 33
   \              0x03 0x0C    
   \              0x30 0x20    
   \              0x00 0x70    
   \              0x88 0x08    
   \              0x08 0x08    
   \              0x38 0x00    
   \              0x00 0x38    
   \              0x20 0x21    
   \   0000033C   0x21 0x22          DC8 33, 34, 28, 0, 24, 8, 8, 248, 8, 8, 24, 0, 0, 0, 32, 63, 32, 0, 0
   \              0x1C 0x00    
   \              0x18 0x08    
   \              0x08 0xF8    
   \              0x08 0x08    
   \              0x18 0x00    
   \              0x00 0x00    
   \              0x20 0x3F    
   \              0x20 0x00    
   \              0x00         
   \   0000034F   0x00 0x08          DC8 0, 8, 248, 8, 0, 0, 8, 248, 8, 0, 31, 32, 32, 32, 32, 31, 0, 8, 120
   \              0xF8 0x08    
   \              0x00 0x00    
   \              0x08 0xF8    
   \              0x08 0x00    
   \              0x1F 0x20    
   \              0x20 0x20    
   \              0x20 0x1F    
   \              0x00 0x08    
   \              0x78         
   \   00000362   0x88 0x00          DC8 136, 0, 0, 200, 56, 8, 0, 0, 7, 56, 14, 1, 0, 0, 248, 8, 0, 248, 0
   \              0x00 0xC8    
   \              0x38 0x08    
   \              0x00 0x00    
   \              0x07 0x38    
   \              0x0E 0x01    
   \              0x00 0x00    
   \              0xF8 0x08    
   \              0x00 0xF8    
   \              0x00         
   \   00000375   0x08 0xF8          DC8 8, 248, 0, 3, 60, 7, 0, 7, 60, 3, 0, 8, 24, 104, 128, 128, 104, 24
   \              0x00 0x03    
   \              0x3C 0x07    
   \              0x00 0x07    
   \              0x3C 0x03    
   \              0x00 0x08    
   \              0x18 0x68    
   \              0x80 0x80    
   \              0x68 0x18    
   \   00000387   0x08 0x20          DC8 8, 32, 48, 44, 3, 3, 44, 48, 32, 8, 56, 200, 0, 200, 56, 8, 0, 0, 0
   \              0x30 0x2C    
   \              0x03 0x03    
   \              0x2C 0x30    
   \              0x20 0x08    
   \              0x38 0xC8    
   \              0x00 0xC8    
   \              0x38 0x08    
   \              0x00 0x00    
   \              0x00         
   \   0000039A   0x20 0x3F          DC8 32, 63, 32, 0, 0, 0, 16, 8, 8, 8, 200, 56, 8, 0, 32, 56, 38, 33, 32
   \              0x20 0x00    
   \              0x00 0x00    
   \              0x10 0x08    
   \              0x08 0x08    
   \              0xC8 0x38    
   \              0x08 0x00    
   \              0x20 0x38    
   \              0x26 0x21    
   \              0x20         
   \   000003AD   0x20 0x18          DC8 32, 24, 0, 0, 0, 0, 254, 2, 2, 2, 0, 0, 0, 0, 127, 64, 64, 64, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0xFE 0x02    
   \              0x02 0x02    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x7F 0x40    
   \              0x40 0x40    
   \              0x00 0x00    
   \   000003C1   0x0C 0x30          DC8 12, 48, 192, 0, 0, 0, 0, 0, 0, 0, 1, 6, 56, 192, 0, 0, 2, 2, 2, 254
   \              0xC0 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x01 0x06    
   \              0x38 0xC0    
   \              0x00 0x00    
   \              0x02 0x02    
   \              0x02 0xFE    
   \   000003D5   0x00 0x00          DC8 0, 0, 0, 0, 64, 64, 64, 127, 0, 0, 0, 0, 0, 4, 2, 2, 2, 4, 0, 0, 0
   \              0x00 0x00    
   \              0x40 0x40    
   \              0x40 0x7F    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x04    
   \              0x02 0x02    
   \              0x02 0x04    
   \              0x00 0x00    
   \              0x00         
   \   000003EA   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 128, 128, 128, 128, 128
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x80 0x80    
   \              0x80 0x80    
   \              0x80         
   \   000003FD   0x80 0x80          DC8 128, 128, 128, 0, 2, 2, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x80 0x00    
   \              0x02 0x02    
   \              0x04 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00         
   \   00000412   0x80 0x80          DC8 128, 128, 128, 128, 0, 0, 0, 25, 36, 34, 34, 34, 63, 32, 8, 248, 0
   \              0x80 0x80    
   \              0x00 0x00    
   \              0x00 0x19    
   \              0x24 0x22    
   \              0x22 0x22    
   \              0x3F 0x20    
   \              0x08 0xF8    
   \              0x00         
   \   00000423   0x80 0x80          DC8 128, 128, 0, 0, 0, 0, 63, 17, 32, 32, 17, 14, 0, 0, 0, 0, 128, 128
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x3F 0x11    
   \              0x20 0x20    
   \              0x11 0x0E    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x80 0x80    
   \   00000435   0x80 0x00          DC8 128, 0, 0, 0, 14, 17, 32, 32, 32, 17, 0, 0, 0, 0, 128, 128, 136
   \              0x00 0x00    
   \              0x0E 0x11    
   \              0x20 0x20    
   \              0x20 0x11    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x80 0x80    
   \              0x88         
   \   00000446   0xF8 0x00          DC8 248, 0, 0, 14, 17, 32, 32, 16, 63, 32, 0, 0, 128, 128, 128, 128, 0
   \              0x00 0x0E    
   \              0x11 0x20    
   \              0x20 0x10    
   \              0x3F 0x20    
   \              0x00 0x00    
   \              0x80 0x80    
   \              0x80 0x80    
   \              0x00         
   \   00000457   0x00 0x00          DC8 0, 0, 31, 34, 34, 34, 34, 19, 0, 0, 128, 128, 240, 136, 136, 136
   \              0x1F 0x22    
   \              0x22 0x22    
   \              0x22 0x13    
   \              0x00 0x00    
   \              0x80 0x80    
   \              0xF0 0x88    
   \              0x88 0x88    
   \   00000467   0x18 0x00          DC8 24, 0, 32, 32, 63, 32, 32, 0, 0, 0, 0, 128, 128, 128, 128, 128, 0
   \              0x20 0x20    
   \              0x3F 0x20    
   \              0x20 0x00    
   \              0x00 0x00    
   \              0x00 0x80    
   \              0x80 0x80    
   \              0x80 0x80    
   \              0x00         
   \   00000478   0x00 0x6B          DC8 0, 107, 148, 148, 148, 147, 96, 0, 8, 248, 0, 128, 128, 128, 0, 0
   \              0x94 0x94    
   \              0x94 0x93    
   \              0x60 0x00    
   \              0x08 0xF8    
   \              0x00 0x80    
   \              0x80 0x80    
   \              0x00 0x00    
   \   00000488   0x20 0x3F          DC8 32, 63, 33, 0, 0, 32, 63, 32, 0, 128, 152, 152, 0, 0, 0, 0, 0, 32
   \              0x21 0x00    
   \              0x00 0x20    
   \              0x3F 0x20    
   \              0x00 0x80    
   \              0x98 0x98    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x20    
   \   0000049A   0x20 0x3F          DC8 32, 63, 32, 32, 0, 0, 0, 0, 0, 128, 152, 152, 0, 0, 0, 192, 128
   \              0x20 0x20    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x80    
   \              0x98 0x98    
   \              0x00 0x00    
   \              0x00 0xC0    
   \              0x80         
   \   000004AB   0x80 0x80          DC8 128, 128, 127, 0, 0, 8, 248, 0, 0, 128, 128, 128, 0, 32, 63, 36, 2
   \              0x7F 0x00    
   \              0x00 0x08    
   \              0xF8 0x00    
   \              0x00 0x80    
   \              0x80 0x80    
   \              0x00 0x20    
   \              0x3F 0x24    
   \              0x02         
   \   000004BC   0x2D 0x30          DC8 45, 48, 32, 0, 0, 8, 8, 248, 0, 0, 0, 0, 0, 32, 32, 63, 32, 32, 0
   \              0x20 0x00    
   \              0x00 0x08    
   \              0x08 0xF8    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x20    
   \              0x20 0x3F    
   \              0x20 0x20    
   \              0x00         
   \   000004CF   0x00 0x80          DC8 0, 128, 128, 128, 128, 128, 128, 128, 0, 32, 63, 32, 0, 63, 32, 0
   \              0x80 0x80    
   \              0x80 0x80    
   \              0x80 0x80    
   \              0x00 0x20    
   \              0x3F 0x20    
   \              0x00 0x3F    
   \              0x20 0x00    
   \   000004DF   0x3F 0x80          DC8 63, 128, 128, 0, 128, 128, 128, 0, 0, 32, 63, 33, 0, 0, 32, 63, 32
   \              0x80 0x00    
   \              0x80 0x80    
   \              0x80 0x00    
   \              0x00 0x20    
   \              0x3F 0x21    
   \              0x00 0x00    
   \              0x20 0x3F    
   \              0x20         
   \   000004F0   0x00 0x00          DC8 0, 0, 128, 128, 128, 128, 0, 0, 0, 31, 32, 32, 32, 32, 31, 0, 128
   \              0x80 0x80    
   \              0x80 0x80    
   \              0x00 0x00    
   \              0x00 0x1F    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x1F 0x00    
   \              0x80         
   \   00000501   0x80 0x00          DC8 128, 0, 128, 128, 0, 0, 0, 128, 255, 161, 32, 32, 17, 14, 0, 0, 0
   \              0x80 0x80    
   \              0x00 0x00    
   \              0x00 0x80    
   \              0xFF 0xA1    
   \              0x20 0x20    
   \              0x11 0x0E    
   \              0x00 0x00    
   \              0x00         
   \   00000512   0x00 0x80          DC8 0, 128, 128, 128, 128, 0, 0, 14, 17, 32, 32, 160, 255, 128, 128
   \              0x80 0x80    
   \              0x80 0x00    
   \              0x00 0x0E    
   \              0x11 0x20    
   \              0x20 0xA0    
   \              0xFF 0x80    
   \              0x80         
   \   00000521   0x80 0x80          DC8 128, 128, 0, 128, 128, 128, 0, 32, 32, 63, 33, 32, 0, 1, 0, 0, 0
   \              0x00 0x80    
   \              0x80 0x80    
   \              0x00 0x20    
   \              0x20 0x3F    
   \              0x21 0x20    
   \              0x00 0x01    
   \              0x00 0x00    
   \              0x00         
   \   00000532   0x80 0x80          DC8 128, 128, 128, 128, 128, 0, 0, 51, 36, 36, 36, 36, 25, 0, 0, 128
   \              0x80 0x80    
   \              0x80 0x00    
   \              0x00 0x33    
   \              0x24 0x24    
   \              0x24 0x24    
   \              0x19 0x00    
   \              0x00 0x80    
   \   00000542   0x80 0xE0          DC8 128, 224, 128, 128, 0, 0, 0, 0, 0, 31, 32, 32, 0, 0, 128, 128, 0, 0
   \              0x80 0x80    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x1F    
   \              0x20 0x20    
   \              0x00 0x00    
   \              0x80 0x80    
   \              0x00 0x00    
   \   00000554   0x00 0x80          DC8 0, 128, 128, 0, 0, 31, 32, 32, 32, 16, 63, 32, 128, 128, 128, 0, 0
   \              0x80 0x00    
   \              0x00 0x1F    
   \              0x20 0x20    
   \              0x20 0x10    
   \              0x3F 0x20    
   \              0x80 0x80    
   \              0x80 0x00    
   \              0x00         
   \   00000565   0x80 0x80          DC8 128, 128, 128, 0, 1, 14, 48, 8, 6, 1, 0, 128, 128, 0, 128, 0, 128
   \              0x80 0x00    
   \              0x01 0x0E    
   \              0x30 0x08    
   \              0x06 0x01    
   \              0x00 0x80    
   \              0x80 0x00    
   \              0x80 0x00    
   \              0x80         
   \   00000576   0x80 0x80          DC8 128, 128, 15, 48, 12, 3, 12, 48, 15, 0, 0, 128, 128, 0, 128, 128
   \              0x0F 0x30    
   \              0x0C 0x03    
   \              0x0C 0x30    
   \              0x0F 0x00    
   \              0x00 0x80    
   \              0x80 0x00    
   \              0x80 0x80    
   \   00000586   0x80 0x00          DC8 128, 0, 0, 32, 49, 46, 14, 49, 32, 0, 128, 128, 128, 0, 0, 128, 128
   \              0x00 0x20    
   \              0x31 0x2E    
   \              0x0E 0x31    
   \              0x20 0x00    
   \              0x80 0x80    
   \              0x80 0x00    
   \              0x00 0x80    
   \              0x80         
   \   00000597   0x80 0x80          DC8 128, 128, 129, 142, 112, 24, 6, 1, 0, 0, 128, 128, 128, 128, 128
   \              0x81 0x8E    
   \              0x70 0x18    
   \              0x06 0x01    
   \              0x00 0x00    
   \              0x80 0x80    
   \              0x80 0x80    
   \              0x80         
   \   000005A6   0x80 0x00          DC8 128, 0, 0, 33, 48, 44, 34, 33, 48, 0, 0, 0, 0, 0, 128, 124, 2, 2, 0
   \              0x00 0x21    
   \              0x30 0x2C    
   \              0x22 0x21    
   \              0x30 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x80 0x7C    
   \              0x02 0x02    
   \              0x00         
   \   000005B9   0x00 0x00          DC8 0, 0, 0, 0, 63, 64, 64, 0, 0, 0, 0, 255, 0, 0, 0, 0, 0, 0, 0, 255
   \              0x00 0x00    
   \              0x3F 0x40    
   \              0x40 0x00    
   \              0x00 0x00    
   \              0x00 0xFF    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0xFF    
   \   000005CD   0x00 0x00          DC8 0, 0, 0, 0, 2, 2, 124, 128, 0, 0, 0, 0, 64, 64, 63, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x02 0x02    
   \              0x7C 0x80    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x40 0x40    
   \              0x3F 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   000005E1   0x06 0x01          DC8 6, 1, 1, 2, 2, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x01 0x02    
   \              0x02 0x04    
   \              0x04 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00         
    268          {
    269            0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,// 0
    270            0x00,0x00,0x00,0xF8,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x33,0x30,0x00,0x00,0x00,//!1
    271            0x00,0x10,0x0C,0x06,0x10,0x0C,0x06,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,//"2
    272            0x40,0xC0,0x78,0x40,0xC0,0x78,0x40,0x00,0x04,0x3F,0x04,0x04,0x3F,0x04,0x04,0x00,//#3
    273            0x00,0x70,0x88,0xFC,0x08,0x30,0x00,0x00,0x00,0x18,0x20,0xFF,0x21,0x1E,0x00,0x00,//$4
    274            0xF0,0x08,0xF0,0x00,0xE0,0x18,0x00,0x00,0x00,0x21,0x1C,0x03,0x1E,0x21,0x1E,0x00,//%5
    275            0x00,0xF0,0x08,0x88,0x70,0x00,0x00,0x00,0x1E,0x21,0x23,0x24,0x19,0x27,0x21,0x10,//&6
    276            0x10,0x16,0x0E,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,//'7
    277            0x00,0x00,0x00,0xE0,0x18,0x04,0x02,0x00,0x00,0x00,0x00,0x07,0x18,0x20,0x40,0x00,//(8
    278            0x00,0x02,0x04,0x18,0xE0,0x00,0x00,0x00,0x00,0x40,0x20,0x18,0x07,0x00,0x00,0x00,//)9
    279            0x40,0x40,0x80,0xF0,0x80,0x40,0x40,0x00,0x02,0x02,0x01,0x0F,0x01,0x02,0x02,0x00,//*10
    280            0x00,0x00,0x00,0xF0,0x00,0x00,0x00,0x00,0x01,0x01,0x01,0x1F,0x01,0x01,0x01,0x00,//+11
    281            0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0xB0,0x70,0x00,0x00,0x00,0x00,0x00,//,12
    282            0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x01,0x01,0x01,0x01,0x01,0x01,//-13
    283            0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x30,0x30,0x00,0x00,0x00,0x00,0x00,//.14
    284            0x00,0x00,0x00,0x00,0x80,0x60,0x18,0x04,0x00,0x60,0x18,0x06,0x01,0x00,0x00,0x00,///15
    285            0x00,0xE0,0x10,0x08,0x08,0x10,0xE0,0x00,0x00,0x0F,0x10,0x20,0x20,0x10,0x0F,0x00,//016
    286            0x00,0x10,0x10,0xF8,0x00,0x00,0x00,0x00,0x00,0x20,0x20,0x3F,0x20,0x20,0x00,0x00,//117
    287            0x00,0x70,0x08,0x08,0x08,0x88,0x70,0x00,0x00,0x30,0x28,0x24,0x22,0x21,0x30,0x00,//218
    288            0x00,0x30,0x08,0x88,0x88,0x48,0x30,0x00,0x00,0x18,0x20,0x20,0x20,0x11,0x0E,0x00,//319
    289            0x00,0x00,0xC0,0x20,0x10,0xF8,0x00,0x00,0x00,0x07,0x04,0x24,0x24,0x3F,0x24,0x00,//420
    290            0x00,0xF8,0x08,0x88,0x88,0x08,0x08,0x00,0x00,0x19,0x21,0x20,0x20,0x11,0x0E,0x00,//521
    291            0x00,0xE0,0x10,0x88,0x88,0x18,0x00,0x00,0x00,0x0F,0x11,0x20,0x20,0x11,0x0E,0x00,//622
    292            0x00,0x38,0x08,0x08,0xC8,0x38,0x08,0x00,0x00,0x00,0x00,0x3F,0x00,0x00,0x00,0x00,//723
    293            0x00,0x70,0x88,0x08,0x08,0x88,0x70,0x00,0x00,0x1C,0x22,0x21,0x21,0x22,0x1C,0x00,//824
    294            0x00,0xE0,0x10,0x08,0x08,0x10,0xE0,0x00,0x00,0x00,0x31,0x22,0x22,0x11,0x0F,0x00,//925
    295            0x00,0x00,0x00,0xC0,0xC0,0x00,0x00,0x00,0x00,0x00,0x00,0x30,0x30,0x00,0x00,0x00,//:26
    296            0x00,0x00,0x00,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x60,0x00,0x00,0x00,0x00,//;27
    297            0x00,0x00,0x80,0x40,0x20,0x10,0x08,0x00,0x00,0x01,0x02,0x04,0x08,0x10,0x20,0x00,//<28
    298            0x40,0x40,0x40,0x40,0x40,0x40,0x40,0x00,0x04,0x04,0x04,0x04,0x04,0x04,0x04,0x00,//=29
    299            0x00,0x08,0x10,0x20,0x40,0x80,0x00,0x00,0x00,0x20,0x10,0x08,0x04,0x02,0x01,0x00,//>30
    300            0x00,0x70,0x48,0x08,0x08,0x08,0xF0,0x00,0x00,0x00,0x00,0x30,0x36,0x01,0x00,0x00,//?31
    301            0xC0,0x30,0xC8,0x28,0xE8,0x10,0xE0,0x00,0x07,0x18,0x27,0x24,0x23,0x14,0x0B,0x00,//@32
    302            0x00,0x00,0xC0,0x38,0xE0,0x00,0x00,0x00,0x20,0x3C,0x23,0x02,0x02,0x27,0x38,0x20,//A33
    303            0x08,0xF8,0x88,0x88,0x88,0x70,0x00,0x00,0x20,0x3F,0x20,0x20,0x20,0x11,0x0E,0x00,//B34
    304            0xC0,0x30,0x08,0x08,0x08,0x08,0x38,0x00,0x07,0x18,0x20,0x20,0x20,0x10,0x08,0x00,//C35
    305            0x08,0xF8,0x08,0x08,0x08,0x10,0xE0,0x00,0x20,0x3F,0x20,0x20,0x20,0x10,0x0F,0x00,//D36
    306            0x08,0xF8,0x88,0x88,0xE8,0x08,0x10,0x00,0x20,0x3F,0x20,0x20,0x23,0x20,0x18,0x00,//E37
    307            0x08,0xF8,0x88,0x88,0xE8,0x08,0x10,0x00,0x20,0x3F,0x20,0x00,0x03,0x00,0x00,0x00,//F38
    308            0xC0,0x30,0x08,0x08,0x08,0x38,0x00,0x00,0x07,0x18,0x20,0x20,0x22,0x1E,0x02,0x00,//G39
    309            0x08,0xF8,0x08,0x00,0x00,0x08,0xF8,0x08,0x20,0x3F,0x21,0x01,0x01,0x21,0x3F,0x20,//H40
    310            0x00,0x08,0x08,0xF8,0x08,0x08,0x00,0x00,0x00,0x20,0x20,0x3F,0x20,0x20,0x00,0x00,//I41
    311            0x00,0x00,0x08,0x08,0xF8,0x08,0x08,0x00,0xC0,0x80,0x80,0x80,0x7F,0x00,0x00,0x00,//J42
    312            0x08,0xF8,0x88,0xC0,0x28,0x18,0x08,0x00,0x20,0x3F,0x20,0x01,0x26,0x38,0x20,0x00,//K43
    313            0x08,0xF8,0x08,0x00,0x00,0x00,0x00,0x00,0x20,0x3F,0x20,0x20,0x20,0x20,0x30,0x00,//L44
    314            0x08,0xF8,0xF8,0x00,0xF8,0xF8,0x08,0x00,0x20,0x3F,0x00,0x3F,0x00,0x3F,0x20,0x00,//M45
    315            0x08,0xF8,0x30,0xC0,0x00,0x08,0xF8,0x08,0x20,0x3F,0x20,0x00,0x07,0x18,0x3F,0x00,//N46
    316            0xE0,0x10,0x08,0x08,0x08,0x10,0xE0,0x00,0x0F,0x10,0x20,0x20,0x20,0x10,0x0F,0x00,//O47
    317            0x08,0xF8,0x08,0x08,0x08,0x08,0xF0,0x00,0x20,0x3F,0x21,0x01,0x01,0x01,0x00,0x00,//P48
    318            0xE0,0x10,0x08,0x08,0x08,0x10,0xE0,0x00,0x0F,0x18,0x24,0x24,0x38,0x50,0x4F,0x00,//Q49
    319            0x08,0xF8,0x88,0x88,0x88,0x88,0x70,0x00,0x20,0x3F,0x20,0x00,0x03,0x0C,0x30,0x20,//R50
    320            0x00,0x70,0x88,0x08,0x08,0x08,0x38,0x00,0x00,0x38,0x20,0x21,0x21,0x22,0x1C,0x00,//S51
    321            0x18,0x08,0x08,0xF8,0x08,0x08,0x18,0x00,0x00,0x00,0x20,0x3F,0x20,0x00,0x00,0x00,//T52
    322            0x08,0xF8,0x08,0x00,0x00,0x08,0xF8,0x08,0x00,0x1F,0x20,0x20,0x20,0x20,0x1F,0x00,//U53
    323            0x08,0x78,0x88,0x00,0x00,0xC8,0x38,0x08,0x00,0x00,0x07,0x38,0x0E,0x01,0x00,0x00,//V54
    324            0xF8,0x08,0x00,0xF8,0x00,0x08,0xF8,0x00,0x03,0x3C,0x07,0x00,0x07,0x3C,0x03,0x00,//W55
    325            0x08,0x18,0x68,0x80,0x80,0x68,0x18,0x08,0x20,0x30,0x2C,0x03,0x03,0x2C,0x30,0x20,//X56
    326            0x08,0x38,0xC8,0x00,0xC8,0x38,0x08,0x00,0x00,0x00,0x20,0x3F,0x20,0x00,0x00,0x00,//Y57
    327            0x10,0x08,0x08,0x08,0xC8,0x38,0x08,0x00,0x20,0x38,0x26,0x21,0x20,0x20,0x18,0x00,//Z58
    328            0x00,0x00,0x00,0xFE,0x02,0x02,0x02,0x00,0x00,0x00,0x00,0x7F,0x40,0x40,0x40,0x00,//[59
    329            0x00,0x0C,0x30,0xC0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x06,0x38,0xC0,0x00,//\60
    330            0x00,0x02,0x02,0x02,0xFE,0x00,0x00,0x00,0x00,0x40,0x40,0x40,0x7F,0x00,0x00,0x00,//]61
    331            0x00,0x00,0x04,0x02,0x02,0x02,0x04,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,//^62
    332            0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,//_63
    333            0x00,0x02,0x02,0x04,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,//`64
    334            0x00,0x00,0x80,0x80,0x80,0x80,0x00,0x00,0x00,0x19,0x24,0x22,0x22,0x22,0x3F,0x20,//a65
    335            0x08,0xF8,0x00,0x80,0x80,0x00,0x00,0x00,0x00,0x3F,0x11,0x20,0x20,0x11,0x0E,0x00,//b66
    336            0x00,0x00,0x00,0x80,0x80,0x80,0x00,0x00,0x00,0x0E,0x11,0x20,0x20,0x20,0x11,0x00,//c67
    337            0x00,0x00,0x00,0x80,0x80,0x88,0xF8,0x00,0x00,0x0E,0x11,0x20,0x20,0x10,0x3F,0x20,//d68
    338            0x00,0x00,0x80,0x80,0x80,0x80,0x00,0x00,0x00,0x1F,0x22,0x22,0x22,0x22,0x13,0x00,//e69
    339            0x00,0x80,0x80,0xF0,0x88,0x88,0x88,0x18,0x00,0x20,0x20,0x3F,0x20,0x20,0x00,0x00,//f70
    340            0x00,0x00,0x80,0x80,0x80,0x80,0x80,0x00,0x00,0x6B,0x94,0x94,0x94,0x93,0x60,0x00,//g71
    341            0x08,0xF8,0x00,0x80,0x80,0x80,0x00,0x00,0x20,0x3F,0x21,0x00,0x00,0x20,0x3F,0x20,//h72
    342            0x00,0x80,0x98,0x98,0x00,0x00,0x00,0x00,0x00,0x20,0x20,0x3F,0x20,0x20,0x00,0x00,//i73
    343            0x00,0x00,0x00,0x80,0x98,0x98,0x00,0x00,0x00,0xC0,0x80,0x80,0x80,0x7F,0x00,0x00,//j74
    344            0x08,0xF8,0x00,0x00,0x80,0x80,0x80,0x00,0x20,0x3F,0x24,0x02,0x2D,0x30,0x20,0x00,//k75
    345            0x00,0x08,0x08,0xF8,0x00,0x00,0x00,0x00,0x00,0x20,0x20,0x3F,0x20,0x20,0x00,0x00,//l76
    346            0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x00,0x20,0x3F,0x20,0x00,0x3F,0x20,0x00,0x3F,//m77
    347            0x80,0x80,0x00,0x80,0x80,0x80,0x00,0x00,0x20,0x3F,0x21,0x00,0x00,0x20,0x3F,0x20,//n78
    348            0x00,0x00,0x80,0x80,0x80,0x80,0x00,0x00,0x00,0x1F,0x20,0x20,0x20,0x20,0x1F,0x00,//o79
    349            0x80,0x80,0x00,0x80,0x80,0x00,0x00,0x00,0x80,0xFF,0xA1,0x20,0x20,0x11,0x0E,0x00,//p80
    350            0x00,0x00,0x00,0x80,0x80,0x80,0x80,0x00,0x00,0x0E,0x11,0x20,0x20,0xA0,0xFF,0x80,//q81
    351            0x80,0x80,0x80,0x00,0x80,0x80,0x80,0x00,0x20,0x20,0x3F,0x21,0x20,0x00,0x01,0x00,//r82
    352            0x00,0x00,0x80,0x80,0x80,0x80,0x80,0x00,0x00,0x33,0x24,0x24,0x24,0x24,0x19,0x00,//s83
    353            0x00,0x80,0x80,0xE0,0x80,0x80,0x00,0x00,0x00,0x00,0x00,0x1F,0x20,0x20,0x00,0x00,//t84
    354            0x80,0x80,0x00,0x00,0x00,0x80,0x80,0x00,0x00,0x1F,0x20,0x20,0x20,0x10,0x3F,0x20,//u85
    355            0x80,0x80,0x80,0x00,0x00,0x80,0x80,0x80,0x00,0x01,0x0E,0x30,0x08,0x06,0x01,0x00,//v86
    356            0x80,0x80,0x00,0x80,0x00,0x80,0x80,0x80,0x0F,0x30,0x0C,0x03,0x0C,0x30,0x0F,0x00,//w87
    357            0x00,0x80,0x80,0x00,0x80,0x80,0x80,0x00,0x00,0x20,0x31,0x2E,0x0E,0x31,0x20,0x00,//x88
    358            0x80,0x80,0x80,0x00,0x00,0x80,0x80,0x80,0x80,0x81,0x8E,0x70,0x18,0x06,0x01,0x00,//y89
    359            0x00,0x80,0x80,0x80,0x80,0x80,0x80,0x00,0x00,0x21,0x30,0x2C,0x22,0x21,0x30,0x00,//z90
    360            0x00,0x00,0x00,0x00,0x80,0x7C,0x02,0x02,0x00,0x00,0x00,0x00,0x00,0x3F,0x40,0x40,//{91
    361            0x00,0x00,0x00,0x00,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0x00,0x00,0x00,//|92
    362            0x00,0x02,0x02,0x7C,0x80,0x00,0x00,0x00,0x00,0x40,0x40,0x3F,0x00,0x00,0x00,0x00,//}93
    363            0x00,0x06,0x01,0x01,0x02,0x02,0x04,0x04,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,//~94
    364          };
    365          
    366          /**
    367            * 简介
    368            *     写命令
    369          //  */
    370          //void OLED_WrCmd(unsigned char cmd)
    371          //{
    372          //  uint8 i=8;
    373          //  CL_CS
    374          //  CL_DC
    375          //  while(i--)
    376          //  {
    377          //    CL_OSCLK
    378          //    if(cmd&0x80)
    379          //      SDIN
    380          //    else
    381          //      CL_SDIN
    382          //    cmd<<=1;
    383          //    OSCLK
    384          //  }
    385          //  DC
    386          //  CS
    387          //}

   \                                 In section .text, align 2, keep-with-next
    388          void OLED_WrCmd(unsigned char cmd)
    389          {
   \                     OLED_WrCmd: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
    390              CL_DC;
   \   00000004   0x2100             MOVS     R1,#+0
   \   00000006   0x2046             MOVS     R0,#+70
   \   00000008   0x.... 0x....      BL       GpioSet
    391          
    392              while ( !( OLED_SPI[1]->S & SPI_S_SPTEF_MASK ) );
   \                     ??OLED_WrCmd_0: (+1)
   \   0000000C   0x....             LDR      R0,??DataTable4
   \   0000000E   0x6840             LDR      R0,[R0, #+4]
   \   00000010   0x78C0             LDRB     R0,[R0, #+3]
   \   00000012   0x0680             LSLS     R0,R0,#+26
   \   00000014   0xD5FA             BPL      ??OLED_WrCmd_0
    393              OLED_SPI[1]->D = cmd;
   \   00000016   0x....             LDR      R0,??DataTable4
   \   00000018   0x6840             LDR      R0,[R0, #+4]
   \   0000001A   0x7144             STRB     R4,[R0, #+5]
    394          
    395              DC;
   \   0000001C   0x2101             MOVS     R1,#+1
   \   0000001E   0x2046             MOVS     R0,#+70
   \   00000020   0x.... 0x....      BL       GpioSet
    396          }
   \   00000024   0xBD10             POP      {R4,PC}          ;; return
    397          /**
    398            * 简介
    399            *     写数据
    400            */
    401          //void OLED_WrDat(unsigned char data)
    402          //{
    403          //  uint8 i=8;
    404          //  CL_CS
    405          //  DC
    406          //  while(i--)
    407          //  {
    408          //    CL_OSCLK
    409          //    if(data&0x80)
    410          //      SDIN
    411          //    else
    412          //      CL_SDIN
    413          //    data<<=1;
    414          //    OSCLK
    415          //  }
    416          //  DC
    417          //  CS
    418          //}

   \                                 In section .text, align 2, keep-with-next
    419          void OLED_WrDat(unsigned char data)
    420          {
   \                     OLED_WrDat: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
    421              DC;
   \   00000004   0x2101             MOVS     R1,#+1
   \   00000006   0x2046             MOVS     R0,#+70
   \   00000008   0x.... 0x....      BL       GpioSet
    422              while( !( OLED_SPI[1]->S & SPI_S_SPTEF_MASK ) );
   \                     ??OLED_WrDat_0: (+1)
   \   0000000C   0x....             LDR      R0,??DataTable4
   \   0000000E   0x6840             LDR      R0,[R0, #+4]
   \   00000010   0x78C0             LDRB     R0,[R0, #+3]
   \   00000012   0x0680             LSLS     R0,R0,#+26
   \   00000014   0xD5FA             BPL      ??OLED_WrDat_0
    423              OLED_SPI[1]->D = data;
   \   00000016   0x....             LDR      R0,??DataTable4
   \   00000018   0x6840             LDR      R0,[R0, #+4]
   \   0000001A   0x7144             STRB     R4,[R0, #+5]
    424              CL_DC;
   \   0000001C   0x2100             MOVS     R1,#+0
   \   0000001E   0x2046             MOVS     R0,#+70
   \   00000020   0x.... 0x....      BL       GpioSet
    425          }
   \   00000024   0xBD10             POP      {R4,PC}          ;; return
    426          
    427          
    428          /**
    429            * 简介
    430            *     清屏
    431            */

   \                                 In section .text, align 2, keep-with-next
    432          void OLED_Clear(void)
    433          {
   \                     OLED_Clear: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
    434              uint8 y, x;
    435              for (y=0; y<8; y++)
   \   00000002   0x2000             MOVS     R0,#+0
   \   00000004   0x0004             MOVS     R4,R0
   \                     ??OLED_Clear_0: (+1)
   \   00000006   0xB2E4             UXTB     R4,R4
   \   00000008   0x2C08             CMP      R4,#+8
   \   0000000A   0xDA16             BGE      ??OLED_Clear_1
    436              {
    437                  OLED_WrCmd(0xb0+y);//设置页地址（0~7）
   \   0000000C   0x0020             MOVS     R0,R4
   \   0000000E   0x3850             SUBS     R0,R0,#+80
   \   00000010   0xB2C0             UXTB     R0,R0
   \   00000012   0x.... 0x....      BL       OLED_WrCmd
    438                  OLED_WrCmd(0x01);  //设置显示位置―列低地址,偏移了1列
   \   00000016   0x2001             MOVS     R0,#+1
   \   00000018   0x.... 0x....      BL       OLED_WrCmd
    439                  OLED_WrCmd(0x10);  //设置显示位置―列高地址
   \   0000001C   0x2010             MOVS     R0,#+16
   \   0000001E   0x.... 0x....      BL       OLED_WrCmd
    440                  for(x=0; x<Max_Column; x++)
   \   00000022   0x2000             MOVS     R0,#+0
   \   00000024   0x0005             MOVS     R5,R0
   \                     ??OLED_Clear_2: (+1)
   \   00000026   0xB2ED             UXTB     R5,R5
   \   00000028   0x2D80             CMP      R5,#+128
   \   0000002A   0xDA04             BGE      ??OLED_Clear_3
    441                      OLED_WrDat(0);
   \   0000002C   0x2000             MOVS     R0,#+0
   \   0000002E   0x.... 0x....      BL       OLED_WrDat
   \   00000032   0x1C6D             ADDS     R5,R5,#+1
   \   00000034   0xE7F7             B        ??OLED_Clear_2
    442              }
   \                     ??OLED_Clear_3: (+1)
   \   00000036   0x1C64             ADDS     R4,R4,#+1
   \   00000038   0xE7E5             B        ??OLED_Clear_0
    443          }
   \                     ??OLED_Clear_1: (+1)
   \   0000003A   0xBD31             POP      {R0,R4,R5,PC}    ;; return
    444          
    445          /**
    446            * 简介
    447            *     画点
    448            * 参数
    449            *     x   列 0~127
    450            *     y   页 0~7
    451            */

   \                                 In section .text, align 2, keep-with-next
    452          void OLED_Set_Pos(unsigned char x, unsigned char y)
    453          {
   \                     OLED_Set_Pos: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0005             MOVS     R5,R0
   \   00000004   0x000C             MOVS     R4,R1
    454            OLED_WrCmd(0xb0+y);
   \   00000006   0x0020             MOVS     R0,R4
   \   00000008   0x3850             SUBS     R0,R0,#+80
   \   0000000A   0xB2C0             UXTB     R0,R0
   \   0000000C   0x.... 0x....      BL       OLED_WrCmd
    455            OLED_WrCmd(((x&0xf0)>>4)|0x10);
   \   00000010   0x0029             MOVS     R1,R5
   \   00000012   0xB2C9             UXTB     R1,R1
   \   00000014   0x0909             LSRS     R1,R1,#+4
   \   00000016   0x2010             MOVS     R0,#+16
   \   00000018   0x4308             ORRS     R0,R0,R1
   \   0000001A   0xB2C0             UXTB     R0,R0
   \   0000001C   0x.... 0x....      BL       OLED_WrCmd
    456            OLED_WrCmd((x&0x0f));
   \   00000020   0x0728             LSLS     R0,R5,#+28       ;; ZeroExtS R0,R5,#+28,#+28
   \   00000022   0x0F00             LSRS     R0,R0,#+28
   \   00000024   0x.... 0x....      BL       OLED_WrCmd
    457          }
   \   00000028   0xBD31             POP      {R0,R4,R5,PC}    ;; return
    458          
    459          /**
    460            * 简介
    461            *     OLED初始化
    462            * 注意
    463            *     对应引脚请查看Variable.h文件
    464            */

   \                                 In section .text, align 2, keep-with-next
    465          void OLED_Init(void)
    466          {
   \                     OLED_Init: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    467              spi_init(SPI_PORT, USE_PCS, MASTER, 20*1000*1000);
   \   00000002   0x....             LDR      R3,??DataTable4_1  ;; 0x1312d00
   \   00000004   0x2200             MOVS     R2,#+0
   \   00000006   0x2101             MOVS     R1,#+1
   \   00000008   0x2001             MOVS     R0,#+1
   \   0000000A   0x.... 0x....      BL       spi_init
    468          //    DDRCS;
    469              DDRDC;
   \   0000000E   0x2201             MOVS     R2,#+1
   \   00000010   0x2101             MOVS     R1,#+1
   \   00000012   0x2046             MOVS     R0,#+70
   \   00000014   0x.... 0x....      BL       GpioInit
    470          //    DDRSDIN;
    471          //    DDROSCLK;
    472              DDRRES;
   \   00000018   0x2201             MOVS     R2,#+1
   \   0000001A   0x2101             MOVS     R1,#+1
   \   0000001C   0x2045             MOVS     R0,#+69
   \   0000001E   0x.... 0x....      BL       GpioInit
    473          
    474              CL_RES;
   \   00000022   0x2100             MOVS     R1,#+0
   \   00000024   0x2045             MOVS     R0,#+69
   \   00000026   0x.... 0x....      BL       GpioSet
    475              SystickDelayMs(50);
   \   0000002A   0x2032             MOVS     R0,#+50
   \   0000002C   0x.... 0x....      BL       SystickDelayMs
    476              RES;
   \   00000030   0x2101             MOVS     R1,#+1
   \   00000032   0x2045             MOVS     R0,#+69
   \   00000034   0x.... 0x....      BL       GpioSet
    477          
    478              OLED_WrCmd(0xae);//--turn off oled panel
   \   00000038   0x20AE             MOVS     R0,#+174
   \   0000003A   0x.... 0x....      BL       OLED_WrCmd
    479              OLED_WrCmd(0x00);//---set low column address
   \   0000003E   0x2000             MOVS     R0,#+0
   \   00000040   0x.... 0x....      BL       OLED_WrCmd
    480              OLED_WrCmd(0x10);//---set high column address
   \   00000044   0x2010             MOVS     R0,#+16
   \   00000046   0x.... 0x....      BL       OLED_WrCmd
    481              OLED_WrCmd(0x40);//--set start line address  Set Mapping RAM Display Start Line (0x00~0x3F)
   \   0000004A   0x2040             MOVS     R0,#+64
   \   0000004C   0x.... 0x....      BL       OLED_WrCmd
    482              OLED_WrCmd(0x81);//--set contrast control register
   \   00000050   0x2081             MOVS     R0,#+129
   \   00000052   0x.... 0x....      BL       OLED_WrCmd
    483              OLED_WrCmd(0xcf);// Set SEG Output Current Brightness
   \   00000056   0x20CF             MOVS     R0,#+207
   \   00000058   0x.... 0x....      BL       OLED_WrCmd
    484              OLED_WrCmd(0xa1);//--Set SEG/Column Mapping     0xa0左右反置 0xa1正常
   \   0000005C   0x20A1             MOVS     R0,#+161
   \   0000005E   0x.... 0x....      BL       OLED_WrCmd
    485              OLED_WrCmd(0xc8);//Set COM/Row Scan Direction   0xc0上下反置 0xc8正常
   \   00000062   0x20C8             MOVS     R0,#+200
   \   00000064   0x.... 0x....      BL       OLED_WrCmd
    486              OLED_WrCmd(0xa6);//--set normal display
   \   00000068   0x20A6             MOVS     R0,#+166
   \   0000006A   0x.... 0x....      BL       OLED_WrCmd
    487              OLED_WrCmd(0xa8);//--set multiplex ratio(1 to 64)
   \   0000006E   0x20A8             MOVS     R0,#+168
   \   00000070   0x.... 0x....      BL       OLED_WrCmd
    488              OLED_WrCmd(0x3f);//--1/64 duty
   \   00000074   0x203F             MOVS     R0,#+63
   \   00000076   0x.... 0x....      BL       OLED_WrCmd
    489              OLED_WrCmd(0xd3);//-set display offset	Shift Mapping RAM Counter (0x00~0x3F)
   \   0000007A   0x20D3             MOVS     R0,#+211
   \   0000007C   0x.... 0x....      BL       OLED_WrCmd
    490              OLED_WrCmd(0x00);//-not offset
   \   00000080   0x2000             MOVS     R0,#+0
   \   00000082   0x.... 0x....      BL       OLED_WrCmd
    491              OLED_WrCmd(0xd5);//--set display clock divide ratio/oscillator frequency
   \   00000086   0x20D5             MOVS     R0,#+213
   \   00000088   0x.... 0x....      BL       OLED_WrCmd
    492              OLED_WrCmd(0x80);//--set divide ratio, Set Clock as 100 Frames/Sec
   \   0000008C   0x2080             MOVS     R0,#+128
   \   0000008E   0x.... 0x....      BL       OLED_WrCmd
    493              OLED_WrCmd(0xd9);//--set pre-charge period
   \   00000092   0x20D9             MOVS     R0,#+217
   \   00000094   0x.... 0x....      BL       OLED_WrCmd
    494              OLED_WrCmd(0xf1);//Set Pre-Charge as 15 Clocks & Discharge as 1 Clock
   \   00000098   0x20F1             MOVS     R0,#+241
   \   0000009A   0x.... 0x....      BL       OLED_WrCmd
    495              OLED_WrCmd(0xda);//--set com pins hardware configuration
   \   0000009E   0x20DA             MOVS     R0,#+218
   \   000000A0   0x.... 0x....      BL       OLED_WrCmd
    496              OLED_WrCmd(0x12);
   \   000000A4   0x2012             MOVS     R0,#+18
   \   000000A6   0x.... 0x....      BL       OLED_WrCmd
    497              OLED_WrCmd(0xdb);//--set vcomh
   \   000000AA   0x20DB             MOVS     R0,#+219
   \   000000AC   0x.... 0x....      BL       OLED_WrCmd
    498              OLED_WrCmd(0x40);//Set VCOM Deselect Level
   \   000000B0   0x2040             MOVS     R0,#+64
   \   000000B2   0x.... 0x....      BL       OLED_WrCmd
    499              OLED_WrCmd(0x20);//-Set Page Addressing Mode (0x00/0x01/0x02)
   \   000000B6   0x2020             MOVS     R0,#+32
   \   000000B8   0x.... 0x....      BL       OLED_WrCmd
    500              OLED_WrCmd(0x02);//
   \   000000BC   0x2002             MOVS     R0,#+2
   \   000000BE   0x.... 0x....      BL       OLED_WrCmd
    501              OLED_WrCmd(0x8d);//--set Charge Pump enable/disable
   \   000000C2   0x208D             MOVS     R0,#+141
   \   000000C4   0x.... 0x....      BL       OLED_WrCmd
    502              OLED_WrCmd(0x14);//--set(0x10) disable
   \   000000C8   0x2014             MOVS     R0,#+20
   \   000000CA   0x.... 0x....      BL       OLED_WrCmd
    503              OLED_WrCmd(0xa4);// Disable Entire Display On (0xa4/0xa5)
   \   000000CE   0x20A4             MOVS     R0,#+164
   \   000000D0   0x.... 0x....      BL       OLED_WrCmd
    504              OLED_WrCmd(0xa6);// Disable Inverse Display On (0xa6/a7)
   \   000000D4   0x20A6             MOVS     R0,#+166
   \   000000D6   0x.... 0x....      BL       OLED_WrCmd
    505              OLED_WrCmd(0xaf);//--turn on oled panel
   \   000000DA   0x20AF             MOVS     R0,#+175
   \   000000DC   0x.... 0x....      BL       OLED_WrCmd
    506              OLED_Clear();
   \   000000E0   0x.... 0x....      BL       OLED_Clear
    507              OLED_Set_Pos(0,0);
   \   000000E4   0x2100             MOVS     R1,#+0
   \   000000E6   0x2000             MOVS     R0,#+0
   \   000000E8   0x.... 0x....      BL       OLED_Set_Pos
    508          }
   \   000000EC   0xBD01             POP      {R0,PC}          ;; return
    509          
    510          /**
    511            * 简介
    512            *     显示一个字符串 f8x16
    513            */

   \                                 In section .text, align 2, keep-with-next
    514          void OLED_DisplayStr(unsigned char x,unsigned char y,char *str)
    515          {
   \                     OLED_DisplayStr: (+1)
   \   00000000   0xB5F7             PUSH     {R0-R2,R4-R7,LR}
   \   00000002   0x0004             MOVS     R4,R0
    516          	unsigned char c=0,i=0,j=0;
   \   00000004   0x2700             MOVS     R7,#+0
   \   00000006   0x2500             MOVS     R5,#+0
   \   00000008   0x2600             MOVS     R6,#+0
    517          	while (str[j]!='\0')
   \                     ??OLED_DisplayStr_0: (+1)
   \   0000000A   0x9802             LDR      R0,[SP, #+8]
   \   0000000C   0xB2F6             UXTB     R6,R6
   \   0000000E   0x5D80             LDRB     R0,[R0, R6]
   \   00000010   0x2800             CMP      R0,#+0
   \   00000012   0xD039             BEQ      ??OLED_DisplayStr_1
    518          	{
    519          		c=str[j]-32;
   \   00000014   0x9802             LDR      R0,[SP, #+8]
   \   00000016   0xB2F6             UXTB     R6,R6
   \   00000018   0x5D80             LDRB     R0,[R0, R6]
   \   0000001A   0x3820             SUBS     R0,R0,#+32
   \   0000001C   0x0007             MOVS     R7,R0
    520          		if(x>120){return;}
   \   0000001E   0xB2E4             UXTB     R4,R4
   \   00000020   0x2C79             CMP      R4,#+121
   \   00000022   0xDA31             BGE      ??OLED_DisplayStr_2
    521          			OLED_Set_Pos(x,y);
   \                     ??OLED_DisplayStr_3: (+1)
   \   00000024   0x4668             MOV      R0,SP
   \   00000026   0x7901             LDRB     R1,[R0, #+4]
   \   00000028   0x0020             MOVS     R0,R4
   \   0000002A   0xB2C0             UXTB     R0,R0
   \   0000002C   0x.... 0x....      BL       OLED_Set_Pos
    522          		for(i=0;i<8;i++)
   \   00000030   0x2000             MOVS     R0,#+0
   \   00000032   0x0005             MOVS     R5,R0
   \                     ??OLED_DisplayStr_4: (+1)
   \   00000034   0xB2ED             UXTB     R5,R5
   \   00000036   0x2D08             CMP      R5,#+8
   \   00000038   0xDA0A             BGE      ??OLED_DisplayStr_5
    523          			OLED_WrDat(F8X16[c*16+i]);
   \   0000003A   0x....             LDR      R0,??DataTable5
   \   0000003C   0xB2FF             UXTB     R7,R7
   \   0000003E   0x2110             MOVS     R1,#+16
   \   00000040   0x4379             MULS     R1,R7,R1
   \   00000042   0xB2ED             UXTB     R5,R5
   \   00000044   0x1949             ADDS     R1,R1,R5
   \   00000046   0x5C40             LDRB     R0,[R0, R1]
   \   00000048   0x.... 0x....      BL       OLED_WrDat
   \   0000004C   0x1C6D             ADDS     R5,R5,#+1
   \   0000004E   0xE7F1             B        ??OLED_DisplayStr_4
    524          		OLED_Set_Pos(x,y+1);
   \                     ??OLED_DisplayStr_5: (+1)
   \   00000050   0x4668             MOV      R0,SP
   \   00000052   0x7901             LDRB     R1,[R0, #+4]
   \   00000054   0x1C49             ADDS     R1,R1,#+1
   \   00000056   0xB2C9             UXTB     R1,R1
   \   00000058   0x0020             MOVS     R0,R4
   \   0000005A   0xB2C0             UXTB     R0,R0
   \   0000005C   0x.... 0x....      BL       OLED_Set_Pos
    525          		for(i=0;i<8;i++)
   \   00000060   0x2000             MOVS     R0,#+0
   \   00000062   0x0005             MOVS     R5,R0
   \                     ??OLED_DisplayStr_6: (+1)
   \   00000064   0xB2ED             UXTB     R5,R5
   \   00000066   0x2D08             CMP      R5,#+8
   \   00000068   0xDA0B             BGE      ??OLED_DisplayStr_7
    526          			OLED_WrDat(F8X16[c*16+i+8]);
   \   0000006A   0x....             LDR      R0,??DataTable5
   \   0000006C   0xB2FF             UXTB     R7,R7
   \   0000006E   0x2110             MOVS     R1,#+16
   \   00000070   0x4379             MULS     R1,R7,R1
   \   00000072   0xB2ED             UXTB     R5,R5
   \   00000074   0x1949             ADDS     R1,R1,R5
   \   00000076   0x1840             ADDS     R0,R0,R1
   \   00000078   0x7A00             LDRB     R0,[R0, #+8]
   \   0000007A   0x.... 0x....      BL       OLED_WrDat
   \   0000007E   0x1C6D             ADDS     R5,R5,#+1
   \   00000080   0xE7F0             B        ??OLED_DisplayStr_6
    527          		x+=8;
   \                     ??OLED_DisplayStr_7: (+1)
   \   00000082   0x3408             ADDS     R4,R4,#+8
    528          		j++;
   \   00000084   0x1C76             ADDS     R6,R6,#+1
   \   00000086   0xE7C0             B        ??OLED_DisplayStr_0
    529          	}
    530          }
   \                     ??OLED_DisplayStr_1: (+1)
   \                     ??OLED_DisplayStr_2: (+1)
   \   00000088   0xBDF7             POP      {R0-R2,R4-R7,PC}  ;; return
    531          
    532          /**
    533            * 简介
    534            *     显示一个字符串 f6x8
    535            */

   \                                 In section .text, align 2, keep-with-next
    536          uint8 OLED_DisplaytinyStr(unsigned char x,unsigned char y,char *str)
    537          {
   \                     OLED_DisplaytinyStr: (+1)
   \   00000000   0xB5F7             PUSH     {R0-R2,R4-R7,LR}
   \   00000002   0x0006             MOVS     R6,R0
    538          	unsigned char c=0,i=0,j=0;
   \   00000004   0x2700             MOVS     R7,#+0
   \   00000006   0x2400             MOVS     R4,#+0
   \   00000008   0x2500             MOVS     R5,#+0
    539          	while (str[j]!='\0')
   \                     ??OLED_DisplaytinyStr_0: (+1)
   \   0000000A   0x9802             LDR      R0,[SP, #+8]
   \   0000000C   0xB2ED             UXTB     R5,R5
   \   0000000E   0x5D40             LDRB     R0,[R0, R5]
   \   00000010   0x2800             CMP      R0,#+0
   \   00000012   0xD01D             BEQ      ??OLED_DisplaytinyStr_1
    540          	{
    541          		c = str[j]-32;
   \   00000014   0x9802             LDR      R0,[SP, #+8]
   \   00000016   0xB2ED             UXTB     R5,R5
   \   00000018   0x5D40             LDRB     R0,[R0, R5]
   \   0000001A   0x3820             SUBS     R0,R0,#+32
   \   0000001C   0x0007             MOVS     R7,R0
    542          
    543          			OLED_Set_Pos(x,y);
   \   0000001E   0x4668             MOV      R0,SP
   \   00000020   0x7901             LDRB     R1,[R0, #+4]
   \   00000022   0x0030             MOVS     R0,R6
   \   00000024   0xB2C0             UXTB     R0,R0
   \   00000026   0x.... 0x....      BL       OLED_Set_Pos
    544          		for(i=0;i<6;i++)
   \   0000002A   0x2000             MOVS     R0,#+0
   \   0000002C   0x0004             MOVS     R4,R0
   \                     ??OLED_DisplaytinyStr_2: (+1)
   \   0000002E   0xB2E4             UXTB     R4,R4
   \   00000030   0x2C06             CMP      R4,#+6
   \   00000032   0xDA0A             BGE      ??OLED_DisplaytinyStr_3
    545          			OLED_WrDat(F6x8[c][i]);
   \   00000034   0x....             LDR      R0,??DataTable5_1
   \   00000036   0xB2FF             UXTB     R7,R7
   \   00000038   0x2106             MOVS     R1,#+6
   \   0000003A   0x4379             MULS     R1,R7,R1
   \   0000003C   0x1840             ADDS     R0,R0,R1
   \   0000003E   0xB2E4             UXTB     R4,R4
   \   00000040   0x5D00             LDRB     R0,[R0, R4]
   \   00000042   0x.... 0x....      BL       OLED_WrDat
   \   00000046   0x1C64             ADDS     R4,R4,#+1
   \   00000048   0xE7F1             B        ??OLED_DisplaytinyStr_2
    546          		x+=6;
   \                     ??OLED_DisplaytinyStr_3: (+1)
   \   0000004A   0x1DB6             ADDS     R6,R6,#+6
    547          		j++;
   \   0000004C   0x1C6D             ADDS     R5,R5,#+1
   \   0000004E   0xE7DC             B        ??OLED_DisplaytinyStr_0
    548          	}
    549          
    550              return x;
   \                     ??OLED_DisplaytinyStr_1: (+1)
   \   00000050   0x0030             MOVS     R0,R6
   \   00000052   0xB2C0             UXTB     R0,R0
   \   00000054   0xBDFE             POP      {R1-R7,PC}       ;; return
    551          }
    552          
    553          
    554          /**
    555            * 简介
    556            *     绘制一个点（x,y)
    557            * 参数
    558            *     x，y     坐标
    559            * 备注
    560            *     x的范围0～127，y的范围0～63
    561            *     最好不要使用此函数，会打乱菜单布局
    562            */

   \                                 In section .text, align 2, keep-with-next
    563          void OLED_PutPixel(unsigned char x,unsigned char y)
    564          {
   \                     OLED_PutPixel: (+1)
   \   00000000   0xB5F8             PUSH     {R3-R7,LR}
   \   00000002   0x0005             MOVS     R5,R0
   \   00000004   0x000C             MOVS     R4,R1
    565            unsigned char data1;  //data1当前点的数据
    566            if(x>127||y>64)return;
   \   00000006   0xB2ED             UXTB     R5,R5
   \   00000008   0x2D80             CMP      R5,#+128
   \   0000000A   0xDA02             BGE      ??OLED_PutPixel_0
   \   0000000C   0xB2E4             UXTB     R4,R4
   \   0000000E   0x2C41             CMP      R4,#+65
   \   00000010   0xDB00             BLT      ??OLED_PutPixel_1
   \                     ??OLED_PutPixel_0: (+1)
   \   00000012   0xE012             B        ??OLED_PutPixel_2
    567            OLED_Set_Pos(x, y>>3);
   \                     ??OLED_PutPixel_1: (+1)
   \   00000014   0x0021             MOVS     R1,R4
   \   00000016   0xB2C9             UXTB     R1,R1
   \   00000018   0x08C9             LSRS     R1,R1,#+3
   \   0000001A   0x0028             MOVS     R0,R5
   \   0000001C   0xB2C0             UXTB     R0,R0
   \   0000001E   0x.... 0x....      BL       OLED_Set_Pos
    568            data1 = 0x01<<(y%8);
   \   00000022   0x2701             MOVS     R7,#+1
   \   00000024   0xB2E4             UXTB     R4,R4
   \   00000026   0x0020             MOVS     R0,R4
   \   00000028   0x2108             MOVS     R1,#+8
   \   0000002A   0x.... 0x....      BL       __aeabi_idivmod
   \   0000002E   0x408F             LSLS     R7,R7,R1
   \   00000030   0x003E             MOVS     R6,R7
    569          //  OLED_WrCmd(0xb0+(y>>3));
    570          //  OLED_WrCmd(((x&0xf0)>>4)|0x10);
    571          //  OLED_WrCmd((x&0x0f)|0x00);
    572            OLED_WrDat(data1);
   \   00000032   0x0030             MOVS     R0,R6
   \   00000034   0xB2C0             UXTB     R0,R0
   \   00000036   0x.... 0x....      BL       OLED_WrDat
    573          }
   \                     ??OLED_PutPixel_2: (+1)
   \   0000003A   0xBDF1             POP      {R0,R4-R7,PC}    ;; return
    574          
    575          /**
    576            * 简介
    577            *     绘制 菜单
    578            * 备注
    579            *     y
    580            *         0 --- 空出
    581            *         1,5
    582            *              x  0 ~ 127 双横线
    583            *         1 ~ 7
    584            *              x  0,67,127 --- 竖线
    585            *         1,5
    586            *              x  30,94 --- 参数数字
    587            *     页分配
    588            *         0       --- 空出
    589            *         1,5     --- 菜单数字
    590            *         2~4,6~7 --- 显示区域
    591            *     显示区域坐标
    592            *         菜单     x   y --- x  y
    593            *           1      1   2    66  4  可显示 11个字符，3行
    594            *           2      68  2   126  4  可显示 9 个字符,3行
    595            *           3      1   6   126  7  可显示 21个字符,2行
    596            *           4      1   6   126  7  可显示 21个字符,2行
    597            */

   \                                 In section .text, align 2, keep-with-next
    598          void OLED_Menu()
    599          {
   \                     OLED_Menu: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
    600            uint8 i, x, y;
    601          
    602            for (i=0; i<10; i++)
   \   00000002   0x2000             MOVS     R0,#+0
   \   00000004   0x0006             MOVS     R6,R0
   \                     ??OLED_Menu_0: (+1)
   \   00000006   0xB2F6             UXTB     R6,R6
   \   00000008   0x2E0A             CMP      R6,#+10
   \   0000000A   0xDB00             BLT      .+4
   \   0000000C   0xE0EC             B        ??OLED_Menu_1
    603            {
    604                switch (i)
   \   0000000E   0xB2F6             UXTB     R6,R6
   \   00000010   0x2E00             CMP      R6,#+0
   \   00000012   0xD010             BEQ      ??OLED_Menu_2
   \   00000014   0x2E02             CMP      R6,#+2
   \   00000016   0xD02E             BEQ      ??OLED_Menu_3
   \   00000018   0xD31D             BCC      ??OLED_Menu_4
   \   0000001A   0x2E04             CMP      R6,#+4
   \   0000001C   0xD04B             BEQ      ??OLED_Menu_5
   \   0000001E   0xD33A             BCC      ??OLED_Menu_6
   \   00000020   0x2E06             CMP      R6,#+6
   \   00000022   0xD06B             BEQ      ??OLED_Menu_7
   \   00000024   0xD357             BCC      ??OLED_Menu_8
   \   00000026   0x2E08             CMP      R6,#+8
   \   00000028   0xD100             BNE      .+4
   \   0000002A   0xE08F             B        ??OLED_Menu_9
   \   0000002C   0xD37A             BCC      ??OLED_Menu_10
   \   0000002E   0x2E09             CMP      R6,#+9
   \   00000030   0xD100             BNE      .+4
   \   00000032   0xE09F             B        ??OLED_Menu_11
   \   00000034   0xE0D6             B        ??OLED_Menu_12
    605                {
    606                    //先画横再画竖线，竖线将横线覆盖掉,再画数字覆盖
    607                case 0://-------------------- 上双横线
    608                    for (x=0; x<128; x++)// 0~127
   \                     ??OLED_Menu_2: (+1)
   \   00000036   0x2000             MOVS     R0,#+0
   \   00000038   0x0004             MOVS     R4,R0
   \                     ??OLED_Menu_13: (+1)
   \   0000003A   0xB2E4             UXTB     R4,R4
   \   0000003C   0x2C80             CMP      R4,#+128
   \   0000003E   0xDA09             BGE      ??OLED_Menu_14
    609                    {
    610                        OLED_Set_Pos(x, 1);
   \   00000040   0x2101             MOVS     R1,#+1
   \   00000042   0x0020             MOVS     R0,R4
   \   00000044   0xB2C0             UXTB     R0,R0
   \   00000046   0x.... 0x....      BL       OLED_Set_Pos
    611                        OLED_WrDat(0x81);//双横杠为0x81
   \   0000004A   0x2081             MOVS     R0,#+129
   \   0000004C   0x.... 0x....      BL       OLED_WrDat
    612                    }
   \   00000050   0x1C64             ADDS     R4,R4,#+1
   \   00000052   0xE7F2             B        ??OLED_Menu_13
    613                    break;
   \                     ??OLED_Menu_14: (+1)
   \   00000054   0xE0C6             B        ??OLED_Menu_15
    614                case 1://-------------------- 下双横线
    615                    for (x=0; x<128; x++)// 0~127
   \                     ??OLED_Menu_4: (+1)
   \   00000056   0x2000             MOVS     R0,#+0
   \   00000058   0x0004             MOVS     R4,R0
   \                     ??OLED_Menu_16: (+1)
   \   0000005A   0xB2E4             UXTB     R4,R4
   \   0000005C   0x2C80             CMP      R4,#+128
   \   0000005E   0xDA09             BGE      ??OLED_Menu_17
    616                    {
    617                        OLED_Set_Pos(x, 5);
   \   00000060   0x2105             MOVS     R1,#+5
   \   00000062   0x0020             MOVS     R0,R4
   \   00000064   0xB2C0             UXTB     R0,R0
   \   00000066   0x.... 0x....      BL       OLED_Set_Pos
    618                        OLED_WrDat(0x81);
   \   0000006A   0x2081             MOVS     R0,#+129
   \   0000006C   0x.... 0x....      BL       OLED_WrDat
    619                    }
   \   00000070   0x1C64             ADDS     R4,R4,#+1
   \   00000072   0xE7F2             B        ??OLED_Menu_16
    620                    break;
   \                     ??OLED_Menu_17: (+1)
   \   00000074   0xE0B6             B        ??OLED_Menu_15
    621                case 2://-------------------- 左竖线
    622                    for (y=1; y<8; y++)// 1~7
   \                     ??OLED_Menu_3: (+1)
   \   00000076   0x2001             MOVS     R0,#+1
   \   00000078   0x0005             MOVS     R5,R0
   \                     ??OLED_Menu_18: (+1)
   \   0000007A   0xB2ED             UXTB     R5,R5
   \   0000007C   0x2D08             CMP      R5,#+8
   \   0000007E   0xDA09             BGE      ??OLED_Menu_19
    623                    {
    624                        OLED_Set_Pos(0, y);
   \   00000080   0x0029             MOVS     R1,R5
   \   00000082   0xB2C9             UXTB     R1,R1
   \   00000084   0x2000             MOVS     R0,#+0
   \   00000086   0x.... 0x....      BL       OLED_Set_Pos
    625                        OLED_WrDat(0xff);
   \   0000008A   0x20FF             MOVS     R0,#+255
   \   0000008C   0x.... 0x....      BL       OLED_WrDat
    626                    }
   \   00000090   0x1C6D             ADDS     R5,R5,#+1
   \   00000092   0xE7F2             B        ??OLED_Menu_18
    627                    break;
   \                     ??OLED_Menu_19: (+1)
   \   00000094   0xE0A6             B        ??OLED_Menu_15
    628                case 3://-------------------- 中竖线
    629                    for (y=1; y<6; y++)// 1~5
   \                     ??OLED_Menu_6: (+1)
   \   00000096   0x2001             MOVS     R0,#+1
   \   00000098   0x0005             MOVS     R5,R0
   \                     ??OLED_Menu_20: (+1)
   \   0000009A   0xB2ED             UXTB     R5,R5
   \   0000009C   0x2D06             CMP      R5,#+6
   \   0000009E   0xDA09             BGE      ??OLED_Menu_21
    630                    {
    631                        OLED_Set_Pos(67, y);
   \   000000A0   0x0029             MOVS     R1,R5
   \   000000A2   0xB2C9             UXTB     R1,R1
   \   000000A4   0x2043             MOVS     R0,#+67
   \   000000A6   0x.... 0x....      BL       OLED_Set_Pos
    632                        OLED_WrDat(0xff);
   \   000000AA   0x20FF             MOVS     R0,#+255
   \   000000AC   0x.... 0x....      BL       OLED_WrDat
    633                    }
   \   000000B0   0x1C6D             ADDS     R5,R5,#+1
   \   000000B2   0xE7F2             B        ??OLED_Menu_20
    634                    break;
   \                     ??OLED_Menu_21: (+1)
   \   000000B4   0xE096             B        ??OLED_Menu_15
    635                case 4://-------------------- 右竖线
    636                    for (y=1; y<8; y++)// 1~7
   \                     ??OLED_Menu_5: (+1)
   \   000000B6   0x2001             MOVS     R0,#+1
   \   000000B8   0x0005             MOVS     R5,R0
   \                     ??OLED_Menu_22: (+1)
   \   000000BA   0xB2ED             UXTB     R5,R5
   \   000000BC   0x2D08             CMP      R5,#+8
   \   000000BE   0xDA09             BGE      ??OLED_Menu_23
    637                    {
    638                        OLED_Set_Pos(127, y);
   \   000000C0   0x0029             MOVS     R1,R5
   \   000000C2   0xB2C9             UXTB     R1,R1
   \   000000C4   0x207F             MOVS     R0,#+127
   \   000000C6   0x.... 0x....      BL       OLED_Set_Pos
    639                        OLED_WrDat(0xff);
   \   000000CA   0x20FF             MOVS     R0,#+255
   \   000000CC   0x.... 0x....      BL       OLED_WrDat
    640                    }
   \   000000D0   0x1C6D             ADDS     R5,R5,#+1
   \   000000D2   0xE7F2             B        ??OLED_Menu_22
    641                    break;
   \                     ??OLED_Menu_23: (+1)
   \   000000D4   0xE086             B        ??OLED_Menu_15
    642                case 5://-------------------- 菜单1数字
    643                    for (x=0; x<7; x++)
   \                     ??OLED_Menu_8: (+1)
   \   000000D6   0x2000             MOVS     R0,#+0
   \   000000D8   0x0004             MOVS     R4,R0
   \                     ??OLED_Menu_24: (+1)
   \   000000DA   0xB2E4             UXTB     R4,R4
   \   000000DC   0x2C07             CMP      R4,#+7
   \   000000DE   0xDA0C             BGE      ??OLED_Menu_25
    644                    {
    645                        OLED_Set_Pos(30+x, 1);//30~36
   \   000000E0   0x2101             MOVS     R1,#+1
   \   000000E2   0x0020             MOVS     R0,R4
   \   000000E4   0x301E             ADDS     R0,R0,#+30
   \   000000E6   0xB2C0             UXTB     R0,R0
   \   000000E8   0x.... 0x....      BL       OLED_Set_Pos
    646                        OLED_WrDat(menuNum[0][x]);
   \   000000EC   0x....             LDR      R0,??DataTable5_2
   \   000000EE   0xB2E4             UXTB     R4,R4
   \   000000F0   0x5D00             LDRB     R0,[R0, R4]
   \   000000F2   0x.... 0x....      BL       OLED_WrDat
    647                    }
   \   000000F6   0x1C64             ADDS     R4,R4,#+1
   \   000000F8   0xE7EF             B        ??OLED_Menu_24
    648                    break;
   \                     ??OLED_Menu_25: (+1)
   \   000000FA   0xE073             B        ??OLED_Menu_15
    649                case 6://-------------------- 菜单2数字
    650                    for (x=0; x<7; x++)
   \                     ??OLED_Menu_7: (+1)
   \   000000FC   0x2000             MOVS     R0,#+0
   \   000000FE   0x0004             MOVS     R4,R0
   \                     ??OLED_Menu_26: (+1)
   \   00000100   0xB2E4             UXTB     R4,R4
   \   00000102   0x2C07             CMP      R4,#+7
   \   00000104   0xDA0D             BGE      ??OLED_Menu_27
    651                    {
    652                        OLED_Set_Pos(94+x, 1);//94~101
   \   00000106   0x2101             MOVS     R1,#+1
   \   00000108   0x0020             MOVS     R0,R4
   \   0000010A   0x305E             ADDS     R0,R0,#+94
   \   0000010C   0xB2C0             UXTB     R0,R0
   \   0000010E   0x.... 0x....      BL       OLED_Set_Pos
    653                        OLED_WrDat(menuNum[1][x]);
   \   00000112   0x....             LDR      R0,??DataTable5_2
   \   00000114   0xB2E4             UXTB     R4,R4
   \   00000116   0x1900             ADDS     R0,R0,R4
   \   00000118   0x79C0             LDRB     R0,[R0, #+7]
   \   0000011A   0x.... 0x....      BL       OLED_WrDat
    654                    }
   \   0000011E   0x1C64             ADDS     R4,R4,#+1
   \   00000120   0xE7EE             B        ??OLED_Menu_26
    655                    break;
   \                     ??OLED_Menu_27: (+1)
   \   00000122   0xE05F             B        ??OLED_Menu_15
    656                case 7://-------------------- 菜单3数字
    657                    for (x=0; x<7; x++)
   \                     ??OLED_Menu_10: (+1)
   \   00000124   0x2000             MOVS     R0,#+0
   \   00000126   0x0004             MOVS     R4,R0
   \                     ??OLED_Menu_28: (+1)
   \   00000128   0xB2E4             UXTB     R4,R4
   \   0000012A   0x2C07             CMP      R4,#+7
   \   0000012C   0xDA0D             BGE      ??OLED_Menu_29
    658                    {
    659                        OLED_Set_Pos(30+x, 5);//30~36
   \   0000012E   0x2105             MOVS     R1,#+5
   \   00000130   0x0020             MOVS     R0,R4
   \   00000132   0x301E             ADDS     R0,R0,#+30
   \   00000134   0xB2C0             UXTB     R0,R0
   \   00000136   0x.... 0x....      BL       OLED_Set_Pos
    660                        OLED_WrDat(menuNum[2][x]);
   \   0000013A   0x....             LDR      R0,??DataTable5_2
   \   0000013C   0xB2E4             UXTB     R4,R4
   \   0000013E   0x1900             ADDS     R0,R0,R4
   \   00000140   0x7B80             LDRB     R0,[R0, #+14]
   \   00000142   0x.... 0x....      BL       OLED_WrDat
    661                    }
   \   00000146   0x1C64             ADDS     R4,R4,#+1
   \   00000148   0xE7EE             B        ??OLED_Menu_28
    662                    break;
   \                     ??OLED_Menu_29: (+1)
   \   0000014A   0xE04B             B        ??OLED_Menu_15
    663                case 8://-------------------- 菜单4数字
    664                    for (x=0; x<7; x++)
   \                     ??OLED_Menu_9: (+1)
   \   0000014C   0x2000             MOVS     R0,#+0
   \   0000014E   0x0004             MOVS     R4,R0
   \                     ??OLED_Menu_30: (+1)
   \   00000150   0xB2E4             UXTB     R4,R4
   \   00000152   0x2C07             CMP      R4,#+7
   \   00000154   0xDA0D             BGE      ??OLED_Menu_31
    665                    {
    666                        OLED_Set_Pos(94+x, 5);//94~101
   \   00000156   0x2105             MOVS     R1,#+5
   \   00000158   0x0020             MOVS     R0,R4
   \   0000015A   0x305E             ADDS     R0,R0,#+94
   \   0000015C   0xB2C0             UXTB     R0,R0
   \   0000015E   0x.... 0x....      BL       OLED_Set_Pos
    667                        OLED_WrDat(menuNum[3][x]);
   \   00000162   0x....             LDR      R0,??DataTable5_2
   \   00000164   0xB2E4             UXTB     R4,R4
   \   00000166   0x1900             ADDS     R0,R0,R4
   \   00000168   0x7D40             LDRB     R0,[R0, #+21]
   \   0000016A   0x.... 0x....      BL       OLED_WrDat
    668                    }
   \   0000016E   0x1C64             ADDS     R4,R4,#+1
   \   00000170   0xE7EE             B        ??OLED_Menu_30
    669                    break;
   \                     ??OLED_Menu_31: (+1)
   \   00000172   0xE037             B        ??OLED_Menu_15
    670          
    671                case 9:/* 各个菜单预先显示,可屏蔽 */
    672                  
    673          //         OLED_DisplaytinyStr(1, 0, "Chabi:");//菜单1内容显示
    674          
    675                   OLED_DisplaytinyStr(1, 2, "P:");//菜单1内容显示
   \                     ??OLED_Menu_11: (+1)
   \   00000174   0x....             ADR      R2,??DataTable5_3  ;; 0x50, 0x3A, 0x00, 0x00
   \   00000176   0x2102             MOVS     R1,#+2
   \   00000178   0x2001             MOVS     R0,#+1
   \   0000017A   0x.... 0x....      BL       OLED_DisplaytinyStr
    676                   OLED_DisplaytinyStr(1, 3, "I:");//菜单2内容显示
   \   0000017E   0x....             ADR      R2,??DataTable5_4  ;; 0x49, 0x3A, 0x00, 0x00
   \   00000180   0x2103             MOVS     R1,#+3
   \   00000182   0x2001             MOVS     R0,#+1
   \   00000184   0x.... 0x....      BL       OLED_DisplaytinyStr
    677                   OLED_DisplaytinyStr(1, 4, "D:");//菜单3内容显示
   \   00000188   0x....             ADR      R2,??DataTable5_5  ;; 0x44, 0x3A, 0x00, 0x00
   \   0000018A   0x2104             MOVS     R1,#+4
   \   0000018C   0x2001             MOVS     R0,#+1
   \   0000018E   0x.... 0x....      BL       OLED_DisplaytinyStr
    678          
    679                   OLED_DisplaytinyStr(68, 2, "P:");//菜单4内容显示
   \   00000192   0x....             ADR      R2,??DataTable5_3  ;; 0x50, 0x3A, 0x00, 0x00
   \   00000194   0x2102             MOVS     R1,#+2
   \   00000196   0x2044             MOVS     R0,#+68
   \   00000198   0x.... 0x....      BL       OLED_DisplaytinyStr
    680                   OLED_DisplaytinyStr(68, 3, "I:");//菜单5内容显示
   \   0000019C   0x....             ADR      R2,??DataTable5_4  ;; 0x49, 0x3A, 0x00, 0x00
   \   0000019E   0x2103             MOVS     R1,#+3
   \   000001A0   0x2044             MOVS     R0,#+68
   \   000001A2   0x.... 0x....      BL       OLED_DisplaytinyStr
    681                   OLED_DisplaytinyStr(68, 4, "D:");//菜单6内容显示         
   \   000001A6   0x....             ADR      R2,??DataTable5_5  ;; 0x44, 0x3A, 0x00, 0x00
   \   000001A8   0x2104             MOVS     R1,#+4
   \   000001AA   0x2044             MOVS     R0,#+68
   \   000001AC   0x.... 0x....      BL       OLED_DisplaytinyStr
    682                   
    683          //         OLED_DisplaytinyStr(68, 6, "K1:");//菜单10内容显示
    684                   OLED_DisplaytinyStr(1, 6, "AP:");//菜单10内容显示
   \   000001B0   0x....             ADR      R2,??DataTable5_6  ;; "AP:"
   \   000001B2   0x2106             MOVS     R1,#+6
   \   000001B4   0x2001             MOVS     R0,#+1
   \   000001B6   0x.... 0x....      BL       OLED_DisplaytinyStr
    685                   OLED_DisplaytinyStr(1, 7, "AD:");//菜单11内容显示
   \   000001BA   0x....             ADR      R2,??DataTable5_7  ;; "AD:"
   \   000001BC   0x2107             MOVS     R1,#+7
   \   000001BE   0x2001             MOVS     R0,#+1
   \   000001C0   0x.... 0x....      BL       OLED_DisplaytinyStr
    686          //         OLED_DisplaytinyStr(68, 8, "AL:");//菜单12内容显示
    687                   OLED_DisplaytinyStr(68, 8, "CF:");//菜单12内容显示
   \   000001C4   0x....             ADR      R2,??DataTable5_8  ;; "CF:"
   \   000001C6   0x2108             MOVS     R1,#+8
   \   000001C8   0x2044             MOVS     R0,#+68
   \   000001CA   0x.... 0x....      BL       OLED_DisplaytinyStr
    688          
    689                   OLED_DisplaytinyStr(68, 6, "SZ:");//菜单7内容显示
   \   000001CE   0x....             ADR      R2,??DataTable5_9  ;; "SZ:"
   \   000001D0   0x2106             MOVS     R1,#+6
   \   000001D2   0x2044             MOVS     R0,#+68
   \   000001D4   0x.... 0x....      BL       OLED_DisplaytinyStr
    690                   OLED_DisplaytinyStr(68, 7, "SW:");//菜单8内容显示
   \   000001D8   0x....             ADR      R2,??DataTable5_10  ;; "SW:"
   \   000001DA   0x2107             MOVS     R1,#+7
   \   000001DC   0x2044             MOVS     R0,#+68
   \   000001DE   0x.... 0x....      BL       OLED_DisplaytinyStr
    691          //         OLED_DisplaytinyStr(1, 9, "K3:");//菜单9内容显示
    692                      break;
   \   000001E2   0xE7FF             B        ??OLED_Menu_15
    693          
    694                default :
    695                    break;
    696                }
    697            }
   \                     ??OLED_Menu_12: (+1)
   \                     ??OLED_Menu_15: (+1)
   \   000001E4   0x1C76             ADDS     R6,R6,#+1
   \   000001E6   0xE70E             B        ??OLED_Menu_0
    698          }
   \                     ??OLED_Menu_1: (+1)
   \   000001E8   0xBD70             POP      {R4-R6,PC}       ;; return
    699          
    700          /**
    701            * 简介
    702            *     菜单闪烁
    703            * 备注
    704            *     当菜单被选中时 闪烁
    705            */

   \                                 In section .text, align 4, keep-with-next
    706          void OLED_MenuFlicker()
    707          {
   \                     OLED_MenuFlicker: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
    708            uint8 x, y;
    709          
    710              switch (menuSelect)
   \   00000002   0x481F             LDR      R0,??OLED_MenuFlicker_0
   \   00000004   0x7800             LDRB     R0,[R0, #+0]
   \   00000006   0x2800             CMP      R0,#+0
   \   00000008   0xD01E             BEQ      ??OLED_MenuFlicker_1
   \   0000000A   0x2802             CMP      R0,#+2
   \   0000000C   0xD040             BEQ      ??OLED_MenuFlicker_2
   \   0000000E   0xD33C             BCC      ??OLED_MenuFlicker_3
   \   00000010   0x2804             CMP      R0,#+4
   \   00000012   0xD100             BNE      .+4
   \   00000014   0xE084             B        ??OLED_MenuFlicker_4
   \   00000016   0xD35F             BCC      ??OLED_MenuFlicker_5
   \   00000018   0x2806             CMP      R0,#+6
   \   0000001A   0xD100             BNE      .+4
   \   0000001C   0xE0C8             B        ??OLED_MenuFlicker_6
   \   0000001E   0xD200             BCS      .+4
   \   00000020   0xE0A2             B        ??OLED_MenuFlicker_7
   \   00000022   0x2808             CMP      R0,#+8
   \   00000024   0xD100             BNE      .+4
   \   00000026   0xE10B             B        ??OLED_MenuFlicker_8
   \   00000028   0xD200             BCS      .+4
   \   0000002A   0xE0E5             B        ??OLED_MenuFlicker_9
   \   0000002C   0x280A             CMP      R0,#+10
   \   0000002E   0xD100             BNE      .+4
   \   00000030   0xE14E             B        ??OLED_MenuFlicker_10
   \   00000032   0xD200             BCS      .+4
   \   00000034   0xE128             B        ??OLED_MenuFlicker_11
   \   00000036   0x280C             CMP      R0,#+12
   \   00000038   0xD100             BNE      .+4
   \   0000003A   0xE191             B        ??OLED_MenuFlicker_12
   \   0000003C   0xD200             BCS      .+4
   \   0000003E   0xE16B             B        ??OLED_MenuFlicker_13
   \   00000040   0x280D             CMP      R0,#+13
   \   00000042   0xD100             BNE      .+4
   \   00000044   0xE1B5             B        ??OLED_MenuFlicker_14
   \   00000046   0xE1D8             B        ??OLED_MenuFlicker_15
    711              {
    712              case LOGO://--------------------------- 显示 logo 130ms
    713                  for (x=0; x<128; x++)
   \                     ??OLED_MenuFlicker_1: (+1)
   \   00000048   0x2000             MOVS     R0,#+0
   \   0000004A   0x0004             MOVS     R4,R0
   \                     ??OLED_MenuFlicker_16: (+1)
   \   0000004C   0xB2E4             UXTB     R4,R4
   \   0000004E   0x2C80             CMP      R4,#+128
   \   00000050   0xDA1A             BGE      ??OLED_MenuFlicker_17
    714                  {
    715                      for (y=0; y<8; y++)
   \   00000052   0x2000             MOVS     R0,#+0
   \   00000054   0x0005             MOVS     R5,R0
   \                     ??OLED_MenuFlicker_18: (+1)
   \   00000056   0xB2ED             UXTB     R5,R5
   \   00000058   0x2D08             CMP      R5,#+8
   \   0000005A   0xDA13             BGE      ??OLED_MenuFlicker_19
    716                      {
    717                          OLED_Set_Pos(x, y);
   \   0000005C   0x0029             MOVS     R1,R5
   \   0000005E   0xB2C9             UXTB     R1,R1
   \   00000060   0x0020             MOVS     R0,R4
   \   00000062   0xB2C0             UXTB     R0,R0
   \   00000064   0x.... 0x....      BL       OLED_Set_Pos
    718                          OLED_WrDat(logo[x][y]);
   \   00000068   0x48C7             LDR      R0,??OLED_MenuFlicker_20
   \   0000006A   0xB2E4             UXTB     R4,R4
   \   0000006C   0x2108             MOVS     R1,#+8
   \   0000006E   0x4361             MULS     R1,R4,R1
   \   00000070   0x1840             ADDS     R0,R0,R1
   \   00000072   0xB2ED             UXTB     R5,R5
   \   00000074   0x5D40             LDRB     R0,[R0, R5]
   \   00000076   0x.... 0x....      BL       OLED_WrDat
    719                      }
   \   0000007A   0x1C6D             ADDS     R5,R5,#+1
   \   0000007C   0xE7EB             B        ??OLED_MenuFlicker_18
   \   0000007E   0xBF00             Nop      
   \                     ??OLED_MenuFlicker_0:
   \   00000080   0x........         DC32     menuSelect
    720                  }
   \                     ??OLED_MenuFlicker_19: (+1)
   \   00000084   0x1C64             ADDS     R4,R4,#+1
   \   00000086   0xE7E1             B        ??OLED_MenuFlicker_16
    721                  break;
   \                     ??OLED_MenuFlicker_17: (+1)
   \   00000088   0xE1B7             B        ??OLED_MenuFlicker_21
    722              case MENU://--------------------------- 显示 菜单 38.5ms
    723                  OLED_Menu();
   \                     ??OLED_MenuFlicker_3: (+1)
   \   0000008A   0x.... 0x....      BL       OLED_Menu
    724                  break;
   \   0000008E   0xE1B4             B        ??OLED_MenuFlicker_21
    725              case MENU_1://--------------------------- 选择 菜单1 - 消掉菜单4 51us
    726                  for (x=0; x<4; x++)//20~23 选 1
   \                     ??OLED_MenuFlicker_2: (+1)
   \   00000090   0x2000             MOVS     R0,#+0
   \   00000092   0x0004             MOVS     R4,R0
   \                     ??OLED_MenuFlicker_22: (+1)
   \   00000094   0xB2E4             UXTB     R4,R4
   \   00000096   0x2C04             CMP      R4,#+4
   \   00000098   0xDA0D             BGE      ??OLED_MenuFlicker_23
    727                  {
    728                      OLED_Set_Pos(20+x, 1);//第一行20列的三角形
   \   0000009A   0x2101             MOVS     R1,#+1
   \   0000009C   0x0020             MOVS     R0,R4
   \   0000009E   0x3014             ADDS     R0,R0,#+20
   \   000000A0   0xB2C0             UXTB     R0,R0
   \   000000A2   0x.... 0x....      BL       OLED_Set_Pos
    729                      OLED_WrDat(menuNum[4][x]);
   \   000000A6   0x48B9             LDR      R0,??OLED_MenuFlicker_20+0x4
   \   000000A8   0xB2E4             UXTB     R4,R4
   \   000000AA   0x1900             ADDS     R0,R0,R4
   \   000000AC   0x7F00             LDRB     R0,[R0, #+28]
   \   000000AE   0x.... 0x....      BL       OLED_WrDat
    730                  }
   \   000000B2   0x1C64             ADDS     R4,R4,#+1
   \   000000B4   0xE7EE             B        ??OLED_MenuFlicker_22
    731                  for (x=0; x<4; x++)//84~87 消 4
   \                     ??OLED_MenuFlicker_23: (+1)
   \   000000B6   0x2000             MOVS     R0,#+0
   \   000000B8   0x0004             MOVS     R4,R0
   \                     ??OLED_MenuFlicker_24: (+1)
   \   000000BA   0xB2E4             UXTB     R4,R4
   \   000000BC   0x2C04             CMP      R4,#+4
   \   000000BE   0xDA0A             BGE      ??OLED_MenuFlicker_25
    732                  {
    733                      OLED_Set_Pos(124+x, 5);//消灭第五行99列三角形
   \   000000C0   0x2105             MOVS     R1,#+5
   \   000000C2   0x0020             MOVS     R0,R4
   \   000000C4   0x307C             ADDS     R0,R0,#+124
   \   000000C6   0xB2C0             UXTB     R0,R0
   \   000000C8   0x.... 0x....      BL       OLED_Set_Pos
    734                      OLED_WrDat(0x81);
   \   000000CC   0x2081             MOVS     R0,#+129
   \   000000CE   0x.... 0x....      BL       OLED_WrDat
    735                  }
   \   000000D2   0x1C64             ADDS     R4,R4,#+1
   \   000000D4   0xE7F1             B        ??OLED_MenuFlicker_24
    736                  break;
   \                     ??OLED_MenuFlicker_25: (+1)
   \   000000D6   0xE190             B        ??OLED_MenuFlicker_21
    737                  
    738              case MENU_2://--------------------------- 选择 菜单1 - 消掉菜单4 51us
    739                  for (x=0; x<4; x++)//20~23 选 1
   \                     ??OLED_MenuFlicker_5: (+1)
   \   000000D8   0x2000             MOVS     R0,#+0
   \   000000DA   0x0004             MOVS     R4,R0
   \                     ??OLED_MenuFlicker_26: (+1)
   \   000000DC   0xB2E4             UXTB     R4,R4
   \   000000DE   0x2C04             CMP      R4,#+4
   \   000000E0   0xDA0D             BGE      ??OLED_MenuFlicker_27
    740                  {
    741                      OLED_Set_Pos(40+x, 1);
   \   000000E2   0x2101             MOVS     R1,#+1
   \   000000E4   0x0020             MOVS     R0,R4
   \   000000E6   0x3028             ADDS     R0,R0,#+40
   \   000000E8   0xB2C0             UXTB     R0,R0
   \   000000EA   0x.... 0x....      BL       OLED_Set_Pos
    742                      OLED_WrDat(menuNum[4][x]);
   \   000000EE   0x48A7             LDR      R0,??OLED_MenuFlicker_20+0x4
   \   000000F0   0xB2E4             UXTB     R4,R4
   \   000000F2   0x1900             ADDS     R0,R0,R4
   \   000000F4   0x7F00             LDRB     R0,[R0, #+28]
   \   000000F6   0x.... 0x....      BL       OLED_WrDat
    743                  }
   \   000000FA   0x1C64             ADDS     R4,R4,#+1
   \   000000FC   0xE7EE             B        ??OLED_MenuFlicker_26
    744                  for (x=0; x<4; x++)//84~87 消 4
   \                     ??OLED_MenuFlicker_27: (+1)
   \   000000FE   0x2000             MOVS     R0,#+0
   \   00000100   0x0004             MOVS     R4,R0
   \                     ??OLED_MenuFlicker_28: (+1)
   \   00000102   0xB2E4             UXTB     R4,R4
   \   00000104   0x2C04             CMP      R4,#+4
   \   00000106   0xDA0A             BGE      ??OLED_MenuFlicker_29
    745                  {
    746                      OLED_Set_Pos(20+x, 1);
   \   00000108   0x2101             MOVS     R1,#+1
   \   0000010A   0x0020             MOVS     R0,R4
   \   0000010C   0x3014             ADDS     R0,R0,#+20
   \   0000010E   0xB2C0             UXTB     R0,R0
   \   00000110   0x.... 0x....      BL       OLED_Set_Pos
    747                      OLED_WrDat(0x81);
   \   00000114   0x2081             MOVS     R0,#+129
   \   00000116   0x.... 0x....      BL       OLED_WrDat
    748                  }
   \   0000011A   0x1C64             ADDS     R4,R4,#+1
   \   0000011C   0xE7F1             B        ??OLED_MenuFlicker_28
    749                  break;
   \                     ??OLED_MenuFlicker_29: (+1)
   \   0000011E   0xE16C             B        ??OLED_MenuFlicker_21
    750                  
    751              case MENU_3://--------------------------- 选择 菜单2
    752                  for (x=0; x<4; x++)//84~87 选 2
   \                     ??OLED_MenuFlicker_4: (+1)
   \   00000120   0x2000             MOVS     R0,#+0
   \   00000122   0x0004             MOVS     R4,R0
   \                     ??OLED_MenuFlicker_30: (+1)
   \   00000124   0xB2E4             UXTB     R4,R4
   \   00000126   0x2C04             CMP      R4,#+4
   \   00000128   0xDA0D             BGE      ??OLED_MenuFlicker_31
    753                  {
    754                      OLED_Set_Pos(60+x, 1);
   \   0000012A   0x2101             MOVS     R1,#+1
   \   0000012C   0x0020             MOVS     R0,R4
   \   0000012E   0x303C             ADDS     R0,R0,#+60
   \   00000130   0xB2C0             UXTB     R0,R0
   \   00000132   0x.... 0x....      BL       OLED_Set_Pos
    755                      OLED_WrDat(menuNum[4][x]);
   \   00000136   0x4895             LDR      R0,??OLED_MenuFlicker_20+0x4
   \   00000138   0xB2E4             UXTB     R4,R4
   \   0000013A   0x1900             ADDS     R0,R0,R4
   \   0000013C   0x7F00             LDRB     R0,[R0, #+28]
   \   0000013E   0x.... 0x....      BL       OLED_WrDat
    756                  }
   \   00000142   0x1C64             ADDS     R4,R4,#+1
   \   00000144   0xE7EE             B        ??OLED_MenuFlicker_30
    757                  for (x=0; x<4; x++)//20~23 消 1
   \                     ??OLED_MenuFlicker_31: (+1)
   \   00000146   0x2000             MOVS     R0,#+0
   \   00000148   0x0004             MOVS     R4,R0
   \                     ??OLED_MenuFlicker_32: (+1)
   \   0000014A   0xB2E4             UXTB     R4,R4
   \   0000014C   0x2C04             CMP      R4,#+4
   \   0000014E   0xDA0A             BGE      ??OLED_MenuFlicker_33
    758                  {
    759                      OLED_Set_Pos(40+x, 1);
   \   00000150   0x2101             MOVS     R1,#+1
   \   00000152   0x0020             MOVS     R0,R4
   \   00000154   0x3028             ADDS     R0,R0,#+40
   \   00000156   0xB2C0             UXTB     R0,R0
   \   00000158   0x.... 0x....      BL       OLED_Set_Pos
    760                      OLED_WrDat(0x81);
   \   0000015C   0x2081             MOVS     R0,#+129
   \   0000015E   0x.... 0x....      BL       OLED_WrDat
    761                  }
   \   00000162   0x1C64             ADDS     R4,R4,#+1
   \   00000164   0xE7F1             B        ??OLED_MenuFlicker_32
    762                  break;
   \                     ??OLED_MenuFlicker_33: (+1)
   \   00000166   0xE148             B        ??OLED_MenuFlicker_21
    763           
    764                  case MENU_4://--------------------------- 选择 菜单2
    765                  for (x=0; x<4; x++)//84~87 选 2
   \                     ??OLED_MenuFlicker_7: (+1)
   \   00000168   0x2000             MOVS     R0,#+0
   \   0000016A   0x0004             MOVS     R4,R0
   \                     ??OLED_MenuFlicker_34: (+1)
   \   0000016C   0xB2E4             UXTB     R4,R4
   \   0000016E   0x2C04             CMP      R4,#+4
   \   00000170   0xDA0D             BGE      ??OLED_MenuFlicker_35
    766                  {
    767                      OLED_Set_Pos(84+x, 1);
   \   00000172   0x2101             MOVS     R1,#+1
   \   00000174   0x0020             MOVS     R0,R4
   \   00000176   0x3054             ADDS     R0,R0,#+84
   \   00000178   0xB2C0             UXTB     R0,R0
   \   0000017A   0x.... 0x....      BL       OLED_Set_Pos
    768                      OLED_WrDat(menuNum[4][x]);
   \   0000017E   0x4883             LDR      R0,??OLED_MenuFlicker_20+0x4
   \   00000180   0xB2E4             UXTB     R4,R4
   \   00000182   0x1900             ADDS     R0,R0,R4
   \   00000184   0x7F00             LDRB     R0,[R0, #+28]
   \   00000186   0x.... 0x....      BL       OLED_WrDat
    769                  }
   \   0000018A   0x1C64             ADDS     R4,R4,#+1
   \   0000018C   0xE7EE             B        ??OLED_MenuFlicker_34
    770                  for (x=0; x<4; x++)//20~23 消 1
   \                     ??OLED_MenuFlicker_35: (+1)
   \   0000018E   0x2000             MOVS     R0,#+0
   \   00000190   0x0004             MOVS     R4,R0
   \                     ??OLED_MenuFlicker_36: (+1)
   \   00000192   0xB2E4             UXTB     R4,R4
   \   00000194   0x2C04             CMP      R4,#+4
   \   00000196   0xDA0A             BGE      ??OLED_MenuFlicker_37
    771                  {
    772                      OLED_Set_Pos(60+x, 1);
   \   00000198   0x2101             MOVS     R1,#+1
   \   0000019A   0x0020             MOVS     R0,R4
   \   0000019C   0x303C             ADDS     R0,R0,#+60
   \   0000019E   0xB2C0             UXTB     R0,R0
   \   000001A0   0x.... 0x....      BL       OLED_Set_Pos
    773                      OLED_WrDat(0x81);
   \   000001A4   0x2081             MOVS     R0,#+129
   \   000001A6   0x.... 0x....      BL       OLED_WrDat
    774                  }
   \   000001AA   0x1C64             ADDS     R4,R4,#+1
   \   000001AC   0xE7F1             B        ??OLED_MenuFlicker_36
    775                  break;
   \                     ??OLED_MenuFlicker_37: (+1)
   \   000001AE   0xE124             B        ??OLED_MenuFlicker_21
    776                  
    777                  
    778                  case MENU_5://--------------------------- 选择 菜单2
    779                  for (x=0; x<4; x++)//84~87 选 2
   \                     ??OLED_MenuFlicker_6: (+1)
   \   000001B0   0x2000             MOVS     R0,#+0
   \   000001B2   0x0004             MOVS     R4,R0
   \                     ??OLED_MenuFlicker_38: (+1)
   \   000001B4   0xB2E4             UXTB     R4,R4
   \   000001B6   0x2C04             CMP      R4,#+4
   \   000001B8   0xDA0D             BGE      ??OLED_MenuFlicker_39
    780                  {
    781                      OLED_Set_Pos(104+x, 1);
   \   000001BA   0x2101             MOVS     R1,#+1
   \   000001BC   0x0020             MOVS     R0,R4
   \   000001BE   0x3068             ADDS     R0,R0,#+104
   \   000001C0   0xB2C0             UXTB     R0,R0
   \   000001C2   0x.... 0x....      BL       OLED_Set_Pos
    782                      OLED_WrDat(menuNum[4][x]);
   \   000001C6   0x4871             LDR      R0,??OLED_MenuFlicker_20+0x4
   \   000001C8   0xB2E4             UXTB     R4,R4
   \   000001CA   0x1900             ADDS     R0,R0,R4
   \   000001CC   0x7F00             LDRB     R0,[R0, #+28]
   \   000001CE   0x.... 0x....      BL       OLED_WrDat
    783                  }
   \   000001D2   0x1C64             ADDS     R4,R4,#+1
   \   000001D4   0xE7EE             B        ??OLED_MenuFlicker_38
    784                  for (x=0; x<4; x++)//20~23 消 1
   \                     ??OLED_MenuFlicker_39: (+1)
   \   000001D6   0x2000             MOVS     R0,#+0
   \   000001D8   0x0004             MOVS     R4,R0
   \                     ??OLED_MenuFlicker_40: (+1)
   \   000001DA   0xB2E4             UXTB     R4,R4
   \   000001DC   0x2C04             CMP      R4,#+4
   \   000001DE   0xDA0A             BGE      ??OLED_MenuFlicker_41
    785                  {
    786                      OLED_Set_Pos(84+x, 1);
   \   000001E0   0x2101             MOVS     R1,#+1
   \   000001E2   0x0020             MOVS     R0,R4
   \   000001E4   0x3054             ADDS     R0,R0,#+84
   \   000001E6   0xB2C0             UXTB     R0,R0
   \   000001E8   0x.... 0x....      BL       OLED_Set_Pos
    787                      OLED_WrDat(0x81);
   \   000001EC   0x2081             MOVS     R0,#+129
   \   000001EE   0x.... 0x....      BL       OLED_WrDat
    788                  }
   \   000001F2   0x1C64             ADDS     R4,R4,#+1
   \   000001F4   0xE7F1             B        ??OLED_MenuFlicker_40
    789                  break;
   \                     ??OLED_MenuFlicker_41: (+1)
   \   000001F6   0xE100             B        ??OLED_MenuFlicker_21
    790                  
    791                  case MENU_6://--------------------------- 选择 菜单2
    792                  for (x=0; x<4; x++)//84~87 选 2
   \                     ??OLED_MenuFlicker_9: (+1)
   \   000001F8   0x2000             MOVS     R0,#+0
   \   000001FA   0x0004             MOVS     R4,R0
   \                     ??OLED_MenuFlicker_42: (+1)
   \   000001FC   0xB2E4             UXTB     R4,R4
   \   000001FE   0x2C04             CMP      R4,#+4
   \   00000200   0xDA0D             BGE      ??OLED_MenuFlicker_43
    793                  {
    794                      OLED_Set_Pos(124+x, 1);
   \   00000202   0x2101             MOVS     R1,#+1
   \   00000204   0x0020             MOVS     R0,R4
   \   00000206   0x307C             ADDS     R0,R0,#+124
   \   00000208   0xB2C0             UXTB     R0,R0
   \   0000020A   0x.... 0x....      BL       OLED_Set_Pos
    795                      OLED_WrDat(menuNum[4][x]);
   \   0000020E   0x485F             LDR      R0,??OLED_MenuFlicker_20+0x4
   \   00000210   0xB2E4             UXTB     R4,R4
   \   00000212   0x1900             ADDS     R0,R0,R4
   \   00000214   0x7F00             LDRB     R0,[R0, #+28]
   \   00000216   0x.... 0x....      BL       OLED_WrDat
    796                  }
   \   0000021A   0x1C64             ADDS     R4,R4,#+1
   \   0000021C   0xE7EE             B        ??OLED_MenuFlicker_42
    797                  for (x=0; x<4; x++)//20~23 消 1
   \                     ??OLED_MenuFlicker_43: (+1)
   \   0000021E   0x2000             MOVS     R0,#+0
   \   00000220   0x0004             MOVS     R4,R0
   \                     ??OLED_MenuFlicker_44: (+1)
   \   00000222   0xB2E4             UXTB     R4,R4
   \   00000224   0x2C04             CMP      R4,#+4
   \   00000226   0xDA0A             BGE      ??OLED_MenuFlicker_45
    798                  {
    799                      OLED_Set_Pos(104+x, 1);
   \   00000228   0x2101             MOVS     R1,#+1
   \   0000022A   0x0020             MOVS     R0,R4
   \   0000022C   0x3068             ADDS     R0,R0,#+104
   \   0000022E   0xB2C0             UXTB     R0,R0
   \   00000230   0x.... 0x....      BL       OLED_Set_Pos
    800                      OLED_WrDat(0x81);
   \   00000234   0x2081             MOVS     R0,#+129
   \   00000236   0x.... 0x....      BL       OLED_WrDat
    801                  }
   \   0000023A   0x1C64             ADDS     R4,R4,#+1
   \   0000023C   0xE7F1             B        ??OLED_MenuFlicker_44
    802                  break;
   \                     ??OLED_MenuFlicker_45: (+1)
   \   0000023E   0xE0DC             B        ??OLED_MenuFlicker_21
    803                  
    804                          
    805              case MENU_7://--------------------------- 选择 菜单3
    806                  for (x=0; x<4; x++)//20~23 选 3
   \                     ??OLED_MenuFlicker_8: (+1)
   \   00000240   0x2000             MOVS     R0,#+0
   \   00000242   0x0004             MOVS     R4,R0
   \                     ??OLED_MenuFlicker_46: (+1)
   \   00000244   0xB2E4             UXTB     R4,R4
   \   00000246   0x2C04             CMP      R4,#+4
   \   00000248   0xDA0D             BGE      ??OLED_MenuFlicker_47
    807                  {
    808                      OLED_Set_Pos(20+x, 5);
   \   0000024A   0x2105             MOVS     R1,#+5
   \   0000024C   0x0020             MOVS     R0,R4
   \   0000024E   0x3014             ADDS     R0,R0,#+20
   \   00000250   0xB2C0             UXTB     R0,R0
   \   00000252   0x.... 0x....      BL       OLED_Set_Pos
    809                      OLED_WrDat(menuNum[4][x]);
   \   00000256   0x484D             LDR      R0,??OLED_MenuFlicker_20+0x4
   \   00000258   0xB2E4             UXTB     R4,R4
   \   0000025A   0x1900             ADDS     R0,R0,R4
   \   0000025C   0x7F00             LDRB     R0,[R0, #+28]
   \   0000025E   0x.... 0x....      BL       OLED_WrDat
    810                  }
   \   00000262   0x1C64             ADDS     R4,R4,#+1
   \   00000264   0xE7EE             B        ??OLED_MenuFlicker_46
    811                  for (x=0; x<4; x++)//84~87 消 2
   \                     ??OLED_MenuFlicker_47: (+1)
   \   00000266   0x2000             MOVS     R0,#+0
   \   00000268   0x0004             MOVS     R4,R0
   \                     ??OLED_MenuFlicker_48: (+1)
   \   0000026A   0xB2E4             UXTB     R4,R4
   \   0000026C   0x2C04             CMP      R4,#+4
   \   0000026E   0xDA0A             BGE      ??OLED_MenuFlicker_49
    812                  {
    813                      OLED_Set_Pos(124+x, 1);
   \   00000270   0x2101             MOVS     R1,#+1
   \   00000272   0x0020             MOVS     R0,R4
   \   00000274   0x307C             ADDS     R0,R0,#+124
   \   00000276   0xB2C0             UXTB     R0,R0
   \   00000278   0x.... 0x....      BL       OLED_Set_Pos
    814                      OLED_WrDat(0x81);
   \   0000027C   0x2081             MOVS     R0,#+129
   \   0000027E   0x.... 0x....      BL       OLED_WrDat
    815                  }
   \   00000282   0x1C64             ADDS     R4,R4,#+1
   \   00000284   0xE7F1             B        ??OLED_MenuFlicker_48
    816                  break;
   \                     ??OLED_MenuFlicker_49: (+1)
   \   00000286   0xE0B8             B        ??OLED_MenuFlicker_21
    817                  
    818             case MENU_8://--------------------------- 选择 菜单3
    819                  for (x=0; x<4; x++)//20~23 选 3
   \                     ??OLED_MenuFlicker_11: (+1)
   \   00000288   0x2000             MOVS     R0,#+0
   \   0000028A   0x0004             MOVS     R4,R0
   \                     ??OLED_MenuFlicker_50: (+1)
   \   0000028C   0xB2E4             UXTB     R4,R4
   \   0000028E   0x2C04             CMP      R4,#+4
   \   00000290   0xDA0D             BGE      ??OLED_MenuFlicker_51
    820                  {
    821                      OLED_Set_Pos(40+x, 5);
   \   00000292   0x2105             MOVS     R1,#+5
   \   00000294   0x0020             MOVS     R0,R4
   \   00000296   0x3028             ADDS     R0,R0,#+40
   \   00000298   0xB2C0             UXTB     R0,R0
   \   0000029A   0x.... 0x....      BL       OLED_Set_Pos
    822                      OLED_WrDat(menuNum[4][x]);
   \   0000029E   0x483B             LDR      R0,??OLED_MenuFlicker_20+0x4
   \   000002A0   0xB2E4             UXTB     R4,R4
   \   000002A2   0x1900             ADDS     R0,R0,R4
   \   000002A4   0x7F00             LDRB     R0,[R0, #+28]
   \   000002A6   0x.... 0x....      BL       OLED_WrDat
    823                  }
   \   000002AA   0x1C64             ADDS     R4,R4,#+1
   \   000002AC   0xE7EE             B        ??OLED_MenuFlicker_50
    824                  for (x=0; x<4; x++)//84~87 消 2
   \                     ??OLED_MenuFlicker_51: (+1)
   \   000002AE   0x2000             MOVS     R0,#+0
   \   000002B0   0x0004             MOVS     R4,R0
   \                     ??OLED_MenuFlicker_52: (+1)
   \   000002B2   0xB2E4             UXTB     R4,R4
   \   000002B4   0x2C04             CMP      R4,#+4
   \   000002B6   0xDA0A             BGE      ??OLED_MenuFlicker_53
    825                  {
    826                      OLED_Set_Pos(20+x, 5);
   \   000002B8   0x2105             MOVS     R1,#+5
   \   000002BA   0x0020             MOVS     R0,R4
   \   000002BC   0x3014             ADDS     R0,R0,#+20
   \   000002BE   0xB2C0             UXTB     R0,R0
   \   000002C0   0x.... 0x....      BL       OLED_Set_Pos
    827                      OLED_WrDat(0x81);
   \   000002C4   0x2081             MOVS     R0,#+129
   \   000002C6   0x.... 0x....      BL       OLED_WrDat
    828                  }
   \   000002CA   0x1C64             ADDS     R4,R4,#+1
   \   000002CC   0xE7F1             B        ??OLED_MenuFlicker_52
    829                  break;
   \                     ??OLED_MenuFlicker_53: (+1)
   \   000002CE   0xE094             B        ??OLED_MenuFlicker_21
    830                  
    831                    case MENU_9://--------------------------- 选择 菜单3
    832                  for (x=0; x<4; x++)//20~23 选 3
   \                     ??OLED_MenuFlicker_10: (+1)
   \   000002D0   0x2000             MOVS     R0,#+0
   \   000002D2   0x0004             MOVS     R4,R0
   \                     ??OLED_MenuFlicker_54: (+1)
   \   000002D4   0xB2E4             UXTB     R4,R4
   \   000002D6   0x2C04             CMP      R4,#+4
   \   000002D8   0xDA0D             BGE      ??OLED_MenuFlicker_55
    833                  {
    834                      OLED_Set_Pos(60+x, 5);
   \   000002DA   0x2105             MOVS     R1,#+5
   \   000002DC   0x0020             MOVS     R0,R4
   \   000002DE   0x303C             ADDS     R0,R0,#+60
   \   000002E0   0xB2C0             UXTB     R0,R0
   \   000002E2   0x.... 0x....      BL       OLED_Set_Pos
    835                      OLED_WrDat(menuNum[4][x]);
   \   000002E6   0x4829             LDR      R0,??OLED_MenuFlicker_20+0x4
   \   000002E8   0xB2E4             UXTB     R4,R4
   \   000002EA   0x1900             ADDS     R0,R0,R4
   \   000002EC   0x7F00             LDRB     R0,[R0, #+28]
   \   000002EE   0x.... 0x....      BL       OLED_WrDat
    836                  }
   \   000002F2   0x1C64             ADDS     R4,R4,#+1
   \   000002F4   0xE7EE             B        ??OLED_MenuFlicker_54
    837                  for (x=0; x<4; x++)//84~87 消 2
   \                     ??OLED_MenuFlicker_55: (+1)
   \   000002F6   0x2000             MOVS     R0,#+0
   \   000002F8   0x0004             MOVS     R4,R0
   \                     ??OLED_MenuFlicker_56: (+1)
   \   000002FA   0xB2E4             UXTB     R4,R4
   \   000002FC   0x2C04             CMP      R4,#+4
   \   000002FE   0xDA0A             BGE      ??OLED_MenuFlicker_57
    838                  {
    839                      OLED_Set_Pos(40+x, 5);
   \   00000300   0x2105             MOVS     R1,#+5
   \   00000302   0x0020             MOVS     R0,R4
   \   00000304   0x3028             ADDS     R0,R0,#+40
   \   00000306   0xB2C0             UXTB     R0,R0
   \   00000308   0x.... 0x....      BL       OLED_Set_Pos
    840                      OLED_WrDat(0x81);
   \   0000030C   0x2081             MOVS     R0,#+129
   \   0000030E   0x.... 0x....      BL       OLED_WrDat
    841                  }
   \   00000312   0x1C64             ADDS     R4,R4,#+1
   \   00000314   0xE7F1             B        ??OLED_MenuFlicker_56
    842                  break;
   \                     ??OLED_MenuFlicker_57: (+1)
   \   00000316   0xE070             B        ??OLED_MenuFlicker_21
    843                  
    844                  
    845                  
    846              case MENU_10://--------------------------- 选择 菜单4第四表格
    847                          for (x=0; x<4; x++)//84~87 选4
   \                     ??OLED_MenuFlicker_13: (+1)
   \   00000318   0x2000             MOVS     R0,#+0
   \   0000031A   0x0004             MOVS     R4,R0
   \                     ??OLED_MenuFlicker_58: (+1)
   \   0000031C   0xB2E4             UXTB     R4,R4
   \   0000031E   0x2C04             CMP      R4,#+4
   \   00000320   0xDA0D             BGE      ??OLED_MenuFlicker_59
    848                  {
    849                      OLED_Set_Pos(84+x, 5);
   \   00000322   0x2105             MOVS     R1,#+5
   \   00000324   0x0020             MOVS     R0,R4
   \   00000326   0x3054             ADDS     R0,R0,#+84
   \   00000328   0xB2C0             UXTB     R0,R0
   \   0000032A   0x.... 0x....      BL       OLED_Set_Pos
    850                      OLED_WrDat(menuNum[4][x]);
   \   0000032E   0x4817             LDR      R0,??OLED_MenuFlicker_20+0x4
   \   00000330   0xB2E4             UXTB     R4,R4
   \   00000332   0x1900             ADDS     R0,R0,R4
   \   00000334   0x7F00             LDRB     R0,[R0, #+28]
   \   00000336   0x.... 0x....      BL       OLED_WrDat
    851                  }
   \   0000033A   0x1C64             ADDS     R4,R4,#+1
   \   0000033C   0xE7EE             B        ??OLED_MenuFlicker_58
    852                  for (x=0; x<4; x++)//84~87 消 3
   \                     ??OLED_MenuFlicker_59: (+1)
   \   0000033E   0x2000             MOVS     R0,#+0
   \   00000340   0x0004             MOVS     R4,R0
   \                     ??OLED_MenuFlicker_60: (+1)
   \   00000342   0xB2E4             UXTB     R4,R4
   \   00000344   0x2C04             CMP      R4,#+4
   \   00000346   0xDA0A             BGE      ??OLED_MenuFlicker_61
    853                  {
    854                      OLED_Set_Pos(60+x, 5);
   \   00000348   0x2105             MOVS     R1,#+5
   \   0000034A   0x0020             MOVS     R0,R4
   \   0000034C   0x303C             ADDS     R0,R0,#+60
   \   0000034E   0xB2C0             UXTB     R0,R0
   \   00000350   0x.... 0x....      BL       OLED_Set_Pos
    855                      OLED_WrDat(0x81);
   \   00000354   0x2081             MOVS     R0,#+129
   \   00000356   0x.... 0x....      BL       OLED_WrDat
    856                  }
   \   0000035A   0x1C64             ADDS     R4,R4,#+1
   \   0000035C   0xE7F1             B        ??OLED_MenuFlicker_60
    857                  break;
   \                     ??OLED_MenuFlicker_61: (+1)
   \   0000035E   0xE04C             B        ??OLED_MenuFlicker_21
    858                  
    859                   case MENU_11://--------------------------- 选择 菜单4第四表格
    860                          for (x=0; x<4; x++)//84~87 选4
   \                     ??OLED_MenuFlicker_12: (+1)
   \   00000360   0x2000             MOVS     R0,#+0
   \   00000362   0x0004             MOVS     R4,R0
   \                     ??OLED_MenuFlicker_62: (+1)
   \   00000364   0xB2E4             UXTB     R4,R4
   \   00000366   0x2C04             CMP      R4,#+4
   \   00000368   0xDA12             BGE      ??OLED_MenuFlicker_63
    861                  {
    862                      OLED_Set_Pos(104+x, 5);
   \   0000036A   0x2105             MOVS     R1,#+5
   \   0000036C   0x0020             MOVS     R0,R4
   \   0000036E   0x3068             ADDS     R0,R0,#+104
   \   00000370   0xB2C0             UXTB     R0,R0
   \   00000372   0x.... 0x....      BL       OLED_Set_Pos
    863                      OLED_WrDat(menuNum[4][x]);
   \   00000376   0x4805             LDR      R0,??OLED_MenuFlicker_20+0x4
   \   00000378   0xB2E4             UXTB     R4,R4
   \   0000037A   0x1900             ADDS     R0,R0,R4
   \   0000037C   0x7F00             LDRB     R0,[R0, #+28]
   \   0000037E   0x.... 0x....      BL       OLED_WrDat
    864                  }
   \   00000382   0x1C64             ADDS     R4,R4,#+1
   \   00000384   0xE7EE             B        ??OLED_MenuFlicker_62
   \   00000386   0xBF00             Nop      
   \                     ??OLED_MenuFlicker_20:
   \   00000388   0x........         DC32     logo
   \   0000038C   0x........         DC32     menuNum
    865                  for (x=0; x<4; x++)//84~87 消 3
   \                     ??OLED_MenuFlicker_63: (+1)
   \   00000390   0x2000             MOVS     R0,#+0
   \   00000392   0x0004             MOVS     R4,R0
   \                     ??OLED_MenuFlicker_64: (+1)
   \   00000394   0xB2E4             UXTB     R4,R4
   \   00000396   0x2C04             CMP      R4,#+4
   \   00000398   0xDA0A             BGE      ??OLED_MenuFlicker_65
    866                  {
    867                      OLED_Set_Pos(84+x, 5);
   \   0000039A   0x2105             MOVS     R1,#+5
   \   0000039C   0x0020             MOVS     R0,R4
   \   0000039E   0x3054             ADDS     R0,R0,#+84
   \   000003A0   0xB2C0             UXTB     R0,R0
   \   000003A2   0x.... 0x....      BL       OLED_Set_Pos
    868                      OLED_WrDat(0x81);
   \   000003A6   0x2081             MOVS     R0,#+129
   \   000003A8   0x.... 0x....      BL       OLED_WrDat
    869                  }
   \   000003AC   0x1C64             ADDS     R4,R4,#+1
   \   000003AE   0xE7F1             B        ??OLED_MenuFlicker_64
    870                  break;
   \                     ??OLED_MenuFlicker_65: (+1)
   \   000003B0   0xE023             B        ??OLED_MenuFlicker_21
    871                  
    872                   case MENU_12://--------------------------- 选择 菜单4第四表格
    873                          for (x=0; x<4; x++)//84~87 选4
   \                     ??OLED_MenuFlicker_14: (+1)
   \   000003B2   0x2000             MOVS     R0,#+0
   \   000003B4   0x0004             MOVS     R4,R0
   \                     ??OLED_MenuFlicker_66: (+1)
   \   000003B6   0xB2E4             UXTB     R4,R4
   \   000003B8   0x2C04             CMP      R4,#+4
   \   000003BA   0xDA0D             BGE      ??OLED_MenuFlicker_67
    874                  {
    875                      OLED_Set_Pos(124+x, 5);
   \   000003BC   0x2105             MOVS     R1,#+5
   \   000003BE   0x0020             MOVS     R0,R4
   \   000003C0   0x307C             ADDS     R0,R0,#+124
   \   000003C2   0xB2C0             UXTB     R0,R0
   \   000003C4   0x.... 0x....      BL       OLED_Set_Pos
    876                      OLED_WrDat(menuNum[4][x]);
   \   000003C8   0x....             LDR      R0,??DataTable10
   \   000003CA   0xB2E4             UXTB     R4,R4
   \   000003CC   0x1900             ADDS     R0,R0,R4
   \   000003CE   0x7F00             LDRB     R0,[R0, #+28]
   \   000003D0   0x.... 0x....      BL       OLED_WrDat
    877                  }
   \   000003D4   0x1C64             ADDS     R4,R4,#+1
   \   000003D6   0xE7EE             B        ??OLED_MenuFlicker_66
    878                  for (x=0; x<4; x++)//84~87 消 3
   \                     ??OLED_MenuFlicker_67: (+1)
   \   000003D8   0x2000             MOVS     R0,#+0
   \   000003DA   0x0004             MOVS     R4,R0
   \                     ??OLED_MenuFlicker_68: (+1)
   \   000003DC   0xB2E4             UXTB     R4,R4
   \   000003DE   0x2C04             CMP      R4,#+4
   \   000003E0   0xDA0A             BGE      ??OLED_MenuFlicker_69
    879                  {
    880                      OLED_Set_Pos(104+x, 5);
   \   000003E2   0x2105             MOVS     R1,#+5
   \   000003E4   0x0020             MOVS     R0,R4
   \   000003E6   0x3068             ADDS     R0,R0,#+104
   \   000003E8   0xB2C0             UXTB     R0,R0
   \   000003EA   0x.... 0x....      BL       OLED_Set_Pos
    881                      OLED_WrDat(0x81);
   \   000003EE   0x2081             MOVS     R0,#+129
   \   000003F0   0x.... 0x....      BL       OLED_WrDat
    882                  }
   \   000003F4   0x1C64             ADDS     R4,R4,#+1
   \   000003F6   0xE7F1             B        ??OLED_MenuFlicker_68
    883                  break;
   \                     ??OLED_MenuFlicker_69: (+1)
   \   000003F8   0xE7FF             B        ??OLED_MenuFlicker_21
    884                  
    885              
    886              default :
    887                  break;
    888              }
    889          }
   \                     ??OLED_MenuFlicker_15: (+1)
   \                     ??OLED_MenuFlicker_21: (+1)
   \   000003FA   0xBD31             POP      {R0,R4,R5,PC}    ;; return
    890          
    891          
    892          
    893          
    894          /**
    895            * 简介
    896            *     uint16 转 uint8
    897            * 参数
    898            *     hex     uint16数据
    899            *     Print   uint8数组地址
    900            */

   \                                 In section .text, align 2, keep-with-next
    901          void OLED_HEXACSII(uint16 hex, uint8* Print)
    902          {
   \                     OLED_HEXACSII: (+1)
   \   00000000   0xB5F0             PUSH     {R4-R7,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
    903          	uint8 hexcheck ;
    904          	uint8 TEMP ;
    905          	TEMP = 6 ;
   \   00000006   0x2006             MOVS     R0,#+6
   \   00000008   0x0007             MOVS     R7,R0
    906          	Print[TEMP ]='\0';
   \   0000000A   0x2000             MOVS     R0,#+0
   \   0000000C   0xB2FF             UXTB     R7,R7
   \   0000000E   0x55E8             STRB     R0,[R5, R7]
    907          	while(TEMP)
   \                     ??OLED_HEXACSII_0: (+1)
   \   00000010   0xB2FF             UXTB     R7,R7
   \   00000012   0x2F00             CMP      R7,#+0
   \   00000014   0xD011             BEQ      ??OLED_HEXACSII_1
    908          	{
    909          	  	TEMP -- ;
   \   00000016   0x1E7F             SUBS     R7,R7,#+1
    910          	  	hexcheck  =  hex%10 ;
   \   00000018   0xB2A4             UXTH     R4,R4
   \   0000001A   0x0020             MOVS     R0,R4
   \   0000001C   0x210A             MOVS     R1,#+10
   \   0000001E   0x.... 0x....      BL       __aeabi_idivmod
   \   00000022   0x000E             MOVS     R6,R1
    911          	  	hex   /=10 ;
   \   00000024   0xB2A4             UXTH     R4,R4
   \   00000026   0x0020             MOVS     R0,R4
   \   00000028   0x210A             MOVS     R1,#+10
   \   0000002A   0x.... 0x....      BL       __aeabi_idiv
   \   0000002E   0x0004             MOVS     R4,R0
    912          	  	Print[TEMP ]  = hexcheck + 0x30 ;
   \   00000030   0x0030             MOVS     R0,R6
   \   00000032   0x3030             ADDS     R0,R0,#+48
   \   00000034   0xB2FF             UXTB     R7,R7
   \   00000036   0x55E8             STRB     R0,[R5, R7]
   \   00000038   0xE7EA             B        ??OLED_HEXACSII_0
    913          	}
    914          
    915          }
   \                     ??OLED_HEXACSII_1: (+1)
   \   0000003A   0xBDF0             POP      {R4-R7,PC}       ;; return
    916          
    917          /**
    918            * 简介
    919            *     OLED显示无符号数(6*8字体)
    920            * 参数
    921            *     x			x轴坐标设置
    922            *     y           y轴坐标设置
    923            *     num         无符号数
    924            * 返回值
    925            *     下一个值应该放置的x坐标
    926            * 备注
    927            */

   \                                 In section .text, align 2, keep-with-next
    928          uint8 OLED_Uint16(uint8 x, uint8 y, uint16 num)
    929          {
   \                     OLED_Uint16: (+1)
   \   00000000   0xB5F2             PUSH     {R1,R4-R7,LR}
   \   00000002   0xB084             SUB      SP,SP,#+16
   \   00000004   0x0006             MOVS     R6,R0
   \   00000006   0x0017             MOVS     R7,R2
    930          	uint8 *ch1,ch[7], m[7];
    931              uint8 i = 0;
   \   00000008   0x2500             MOVS     R5,#+0
    932          
    933              if (num == 0)
   \   0000000A   0xB2BF             UXTH     R7,R7
   \   0000000C   0x2F00             CMP      R7,#+0
   \   0000000E   0xD106             BNE      ??OLED_Uint16_0
    934              {
    935                  m[0] = '0';
   \   00000010   0x2030             MOVS     R0,#+48
   \   00000012   0x4669             MOV      R1,SP
   \   00000014   0x7008             STRB     R0,[R1, #+0]
    936                  m[1] = '\0';
   \   00000016   0x2000             MOVS     R0,#+0
   \   00000018   0x4669             MOV      R1,SP
   \   0000001A   0x7048             STRB     R0,[R1, #+1]
   \   0000001C   0xE01C             B        ??OLED_Uint16_1
    937              }
    938              else
    939          	{
    940                  OLED_HEXACSII(num,ch);
   \                     ??OLED_Uint16_0: (+1)
   \   0000001E   0xA902             ADD      R1,SP,#+8
   \   00000020   0x0038             MOVS     R0,R7
   \   00000022   0xB280             UXTH     R0,R0
   \   00000024   0x.... 0x....      BL       OLED_HEXACSII
    941                  ch1 =&ch[1];
   \   00000028   0xA802             ADD      R0,SP,#+8
   \   0000002A   0x1C40             ADDS     R0,R0,#+1
   \   0000002C   0x0004             MOVS     R4,R0
    942                  while (*ch1 == '0')
   \                     ??OLED_Uint16_2: (+1)
   \   0000002E   0x7820             LDRB     R0,[R4, #+0]
   \   00000030   0x2830             CMP      R0,#+48
   \   00000032   0xD101             BNE      ??OLED_Uint16_3
    943                  {
    944                      ch1++;
   \   00000034   0x1C64             ADDS     R4,R4,#+1
   \   00000036   0xE7FA             B        ??OLED_Uint16_2
    945                  }
    946                  for (i=0; *ch1 != '\0'; i++)
   \                     ??OLED_Uint16_3: (+1)
   \   00000038   0x2000             MOVS     R0,#+0
   \   0000003A   0x0005             MOVS     R5,R0
   \                     ??OLED_Uint16_4: (+1)
   \   0000003C   0x7820             LDRB     R0,[R4, #+0]
   \   0000003E   0x2800             CMP      R0,#+0
   \   00000040   0xD006             BEQ      ??OLED_Uint16_5
    947                  {
    948                      m[i] = *ch1;
   \   00000042   0x7820             LDRB     R0,[R4, #+0]
   \   00000044   0x4669             MOV      R1,SP
   \   00000046   0xB2ED             UXTB     R5,R5
   \   00000048   0x5548             STRB     R0,[R1, R5]
    949                      ch1++;
   \   0000004A   0x1C64             ADDS     R4,R4,#+1
    950                  }
   \   0000004C   0x1C6D             ADDS     R5,R5,#+1
   \   0000004E   0xE7F5             B        ??OLED_Uint16_4
    951                  m[i] = '\0';
   \                     ??OLED_Uint16_5: (+1)
   \   00000050   0x2000             MOVS     R0,#+0
   \   00000052   0x4669             MOV      R1,SP
   \   00000054   0xB2ED             UXTB     R5,R5
   \   00000056   0x5548             STRB     R0,[R1, R5]
    952              }
    953          
    954              x = OLED_DisplaytinyStr(x, y, (char *)m);	//显示数字
   \                     ??OLED_Uint16_1: (+1)
   \   00000058   0x466A             MOV      R2,SP
   \   0000005A   0x4668             MOV      R0,SP
   \   0000005C   0x7C01             LDRB     R1,[R0, #+16]
   \   0000005E   0x0030             MOVS     R0,R6
   \   00000060   0xB2C0             UXTB     R0,R0
   \   00000062   0x.... 0x....      BL       OLED_DisplaytinyStr
   \   00000066   0x0006             MOVS     R6,R0
    955          
    956              return x;
   \   00000068   0x0030             MOVS     R0,R6
   \   0000006A   0xB2C0             UXTB     R0,R0
   \   0000006C   0xB005             ADD      SP,SP,#+20
   \   0000006E   0xBDF0             POP      {R4-R7,PC}       ;; return
    957          }
    958          
    959          /**
    960            * 简介
    961            *     OLED显示 有符号数 (6*8字体)
    962            * 参数
    963            *     x			x轴坐标设置
    964            *     y           y轴坐标设置
    965            *     num         有 符号数
    966            * 备注
    967            */

   \                                 In section .text, align 2, keep-with-next
    968          void OLED_Int16(uint8 x, uint8 y, int16 num)
    969          {
   \                     OLED_Int16: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000E             MOVS     R6,R1
   \   00000006   0x0015             MOVS     R5,R2
    970          	if (num < 0)
   \   00000008   0xB22D             SXTH     R5,R5
   \   0000000A   0x2D00             CMP      R5,#+0
   \   0000000C   0xD50A             BPL      ??OLED_Int16_0
    971              {
    972                  num = -num;
   \   0000000E   0x0028             MOVS     R0,R5
   \   00000010   0xB200             SXTH     R0,R0
   \   00000012   0x4245             RSBS     R5,R0,#+0
    973                  OLED_DisplaytinyStr(x, y, (char *)"-");
   \   00000014   0x....             ADR      R2,??DataTable11  ;; "-"
   \   00000016   0x0031             MOVS     R1,R6
   \   00000018   0xB2C9             UXTB     R1,R1
   \   0000001A   0x0020             MOVS     R0,R4
   \   0000001C   0xB2C0             UXTB     R0,R0
   \   0000001E   0x.... 0x....      BL       OLED_DisplaytinyStr
    974                  x += 6;
   \   00000022   0x1DA4             ADDS     R4,R4,#+6
    975              }
    976              OLED_Uint16(x, y, num);
   \                     ??OLED_Int16_0: (+1)
   \   00000024   0x002A             MOVS     R2,R5
   \   00000026   0xB292             UXTH     R2,R2
   \   00000028   0x0031             MOVS     R1,R6
   \   0000002A   0xB2C9             UXTB     R1,R1
   \   0000002C   0x0020             MOVS     R0,R4
   \   0000002E   0xB2C0             UXTB     R0,R0
   \   00000030   0x.... 0x....      BL       OLED_Uint16
    977          }
   \   00000034   0xBD70             POP      {R4-R6,PC}       ;; return
    978          
    979          
    980          /**
    981            * 简介
    982            *     OLED显示 float (6*8字体)
    983            * 参数
    984            *     x			x轴坐标设置
    985            *     y           y轴坐标设置
    986            *     len         显示尾数长度
    987            * 备注
    988            */

   \                                 In section .text, align 2, keep-with-next
    989          void OLED_DisplayFloat(uint8 x, uint8 y, float data, uint8 len)
    990          {
   \                     OLED_DisplayFloat: (+1)
   \   00000000   0xB5F6             PUSH     {R1,R2,R4-R7,LR}
   \   00000002   0xB083             SUB      SP,SP,#+12
   \   00000004   0x0006             MOVS     R6,R0
   \   00000006   0x001F             MOVS     R7,R3
    991              uint8 i = 0;
   \   00000008   0x2500             MOVS     R5,#+0
    992              uint32 integer;//存储整数
    993              float decimals;//存储小数
    994              uint8 decimalsInterger;//小数转换为整数
    995          
    996              if (data < 0)
   \   0000000A   0x9804             LDR      R0,[SP, #+16]
   \   0000000C   0x2100             MOVS     R1,#+0
   \   0000000E   0x.... 0x....      BL       __aeabi_cfcmple
   \   00000012   0xD20C             BCS      ??OLED_DisplayFloat_0
    997              {
    998                  data = -data;
   \   00000014   0x9804             LDR      R0,[SP, #+16]
   \   00000016   0x2180             MOVS     R1,#+128
   \   00000018   0x0609             LSLS     R1,R1,#+24       ;; #-2147483648
   \   0000001A   0x4048             EORS     R0,R0,R1
   \   0000001C   0x9004             STR      R0,[SP, #+16]
    999                  OLED_DisplaytinyStr(x, y, (char *)"-");
   \   0000001E   0x....             ADR      R2,??DataTable11  ;; "-"
   \   00000020   0x4668             MOV      R0,SP
   \   00000022   0x7B01             LDRB     R1,[R0, #+12]
   \   00000024   0x0030             MOVS     R0,R6
   \   00000026   0xB2C0             UXTB     R0,R0
   \   00000028   0x.... 0x....      BL       OLED_DisplaytinyStr
   1000                  x += 6;
   \   0000002C   0x1DB6             ADDS     R6,R6,#+6
   1001              }
   1002          
   1003              integer = (uint32)data;
   \                     ??OLED_DisplayFloat_0: (+1)
   \   0000002E   0x9804             LDR      R0,[SP, #+16]
   \   00000030   0x.... 0x....      BL       __aeabi_f2uiz
   \   00000034   0x9000             STR      R0,[SP, #+0]
   1004              decimals = data - (float)integer;
   \   00000036   0x9800             LDR      R0,[SP, #+0]
   \   00000038   0x.... 0x....      BL       __aeabi_ui2f
   \   0000003C   0x0001             MOVS     R1,R0
   \   0000003E   0x9804             LDR      R0,[SP, #+16]
   \   00000040   0x.... 0x....      BL       __aeabi_fsub
   \   00000044   0x0004             MOVS     R4,R0
   1005          
   1006              //发送整数
   1007              if (data > 9999)
   \   00000046   0x9804             LDR      R0,[SP, #+16]
   \   00000048   0x....             LDR      R1,??DataTable11_1  ;; 0x461c3c01
   \   0000004A   0x.... 0x....      BL       __aeabi_cfrcmple
   \   0000004E   0xD80C             BHI      ??OLED_DisplayFloat_1
   1008              {
   1009                  x = OLED_Uint16(x, y, integer/10000);
   \   00000050   0x9800             LDR      R0,[SP, #+0]
   \   00000052   0x....             LDR      R1,??DataTable11_2  ;; 0x2710
   \   00000054   0x.... 0x....      BL       __aeabi_uidiv
   \   00000058   0x0002             MOVS     R2,R0
   \   0000005A   0xB292             UXTH     R2,R2
   \   0000005C   0x4668             MOV      R0,SP
   \   0000005E   0x7B01             LDRB     R1,[R0, #+12]
   \   00000060   0x0030             MOVS     R0,R6
   \   00000062   0xB2C0             UXTB     R0,R0
   \   00000064   0x.... 0x....      BL       OLED_Uint16
   \   00000068   0x0006             MOVS     R6,R0
   1010              }
   1011              x = OLED_Uint16(x, y, integer%10000);
   \                     ??OLED_DisplayFloat_1: (+1)
   \   0000006A   0x9800             LDR      R0,[SP, #+0]
   \   0000006C   0x....             LDR      R1,??DataTable11_2  ;; 0x2710
   \   0000006E   0x.... 0x....      BL       __aeabi_uidivmod
   \   00000072   0x000A             MOVS     R2,R1
   \   00000074   0xB292             UXTH     R2,R2
   \   00000076   0x4668             MOV      R0,SP
   \   00000078   0x7B01             LDRB     R1,[R0, #+12]
   \   0000007A   0x0030             MOVS     R0,R6
   \   0000007C   0xB2C0             UXTB     R0,R0
   \   0000007E   0x.... 0x....      BL       OLED_Uint16
   \   00000082   0x0006             MOVS     R6,R0
   1012          
   1013              //发送小数点
   1014              OLED_DisplaytinyStr(x, y, (char *)".");
   \   00000084   0x....             ADR      R2,??DataTable11_3  ;; "."
   \   00000086   0x4668             MOV      R0,SP
   \   00000088   0x7B01             LDRB     R1,[R0, #+12]
   \   0000008A   0x0030             MOVS     R0,R6
   \   0000008C   0xB2C0             UXTB     R0,R0
   \   0000008E   0x.... 0x....      BL       OLED_DisplaytinyStr
   1015              x += 6;
   \   00000092   0x1DB6             ADDS     R6,R6,#+6
   1016          
   1017              //发送小数
   1018              while (len)
   \                     ??OLED_DisplayFloat_2: (+1)
   \   00000094   0xB2FF             UXTB     R7,R7
   \   00000096   0x2F00             CMP      R7,#+0
   \   00000098   0xD02E             BEQ      ??OLED_DisplayFloat_3
   1019              {
   1020                  len --;
   \   0000009A   0x1E7F             SUBS     R7,R7,#+1
   1021                  decimals *= 10;
   \   0000009C   0x....             LDR      R0,??DataTable11_4  ;; 0x41200000
   \   0000009E   0x0021             MOVS     R1,R4
   \   000000A0   0x.... 0x....      BL       __aeabi_fmul
   \   000000A4   0x0004             MOVS     R4,R0
   1022                  decimalsInterger = (uint8)decimals + 0x30 - 32;
   \   000000A6   0x0020             MOVS     R0,R4
   \   000000A8   0x.... 0x....      BL       __aeabi_f2iz
   \   000000AC   0x3010             ADDS     R0,R0,#+16
   \   000000AE   0x4669             MOV      R1,SP
   \   000000B0   0x7108             STRB     R0,[R1, #+4]
   1023          
   1024                  OLED_Set_Pos(x, y);
   \   000000B2   0x4668             MOV      R0,SP
   \   000000B4   0x7B01             LDRB     R1,[R0, #+12]
   \   000000B6   0x0030             MOVS     R0,R6
   \   000000B8   0xB2C0             UXTB     R0,R0
   \   000000BA   0x.... 0x....      BL       OLED_Set_Pos
   1025          		for (i=0; i<6; i++)
   \   000000BE   0x2000             MOVS     R0,#+0
   \   000000C0   0x0005             MOVS     R5,R0
   \                     ??OLED_DisplayFloat_4: (+1)
   \   000000C2   0xB2ED             UXTB     R5,R5
   \   000000C4   0x2D06             CMP      R5,#+6
   \   000000C6   0xDA0B             BGE      ??OLED_DisplayFloat_5
   1026          			OLED_WrDat(F6x8[decimalsInterger][i]);
   \   000000C8   0x....             LDR      R0,??DataTable11_5
   \   000000CA   0x4669             MOV      R1,SP
   \   000000CC   0x7909             LDRB     R1,[R1, #+4]
   \   000000CE   0x2206             MOVS     R2,#+6
   \   000000D0   0x4351             MULS     R1,R2,R1
   \   000000D2   0x1840             ADDS     R0,R0,R1
   \   000000D4   0xB2ED             UXTB     R5,R5
   \   000000D6   0x5D40             LDRB     R0,[R0, R5]
   \   000000D8   0x.... 0x....      BL       OLED_WrDat
   \   000000DC   0x1C6D             ADDS     R5,R5,#+1
   \   000000DE   0xE7F0             B        ??OLED_DisplayFloat_4
   1027          		x+=6;
   \                     ??OLED_DisplayFloat_5: (+1)
   \   000000E0   0x1DB6             ADDS     R6,R6,#+6
   1028                  decimals = decimals - (float)(decimalsInterger-0x30+32);
   \   000000E2   0x4668             MOV      R0,SP
   \   000000E4   0x7900             LDRB     R0,[R0, #+4]
   \   000000E6   0x3810             SUBS     R0,R0,#+16
   \   000000E8   0x.... 0x....      BL       __aeabi_i2f
   \   000000EC   0x0001             MOVS     R1,R0
   \   000000EE   0x0020             MOVS     R0,R4
   \   000000F0   0x.... 0x....      BL       __aeabi_fsub
   \   000000F4   0x0004             MOVS     R4,R0
   \   000000F6   0xE7CD             B        ??OLED_DisplayFloat_2
   1029              }
   1030          }
   \                     ??OLED_DisplayFloat_3: (+1)
   \   000000F8   0xB005             ADD      SP,SP,#+20
   \   000000FA   0xBDF0             POP      {R4-R7,PC}       ;; return
   1031          
   1032          /**
   1033            * 简介
   1034            *     OLED显示 键盘
   1035            * 备注
   1036            */

   \                                 In section .text, align 2, keep-with-next
   1037          void OLED_Display()
   1038          {
   \                     OLED_Display: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
   1039          	OLED_DisplaytinyStr(0, 0, "U  P_angle +100");
   \   00000002   0x....             LDR      R2,??DataTable11_6
   \   00000004   0x2100             MOVS     R1,#+0
   \   00000006   0x2000             MOVS     R0,#+0
   \   00000008   0x.... 0x....      BL       OLED_DisplaytinyStr
   1040          	OLED_DisplaytinyStr(0, 1, "D  P_angle -100");
   \   0000000C   0x....             LDR      R2,??DataTable11_7
   \   0000000E   0x2101             MOVS     R1,#+1
   \   00000010   0x2000             MOVS     R0,#+0
   \   00000012   0x.... 0x....      BL       OLED_DisplaytinyStr
   1041          	OLED_DisplaytinyStr(0, 2, "L  D_angle +1");
   \   00000016   0x....             LDR      R2,??DataTable11_8
   \   00000018   0x2102             MOVS     R1,#+2
   \   0000001A   0x2000             MOVS     R0,#+0
   \   0000001C   0x.... 0x....      BL       OLED_DisplaytinyStr
   1042          	OLED_DisplaytinyStr(0, 3, "R  D_angle -1");
   \   00000020   0x....             LDR      R2,??DataTable11_9
   \   00000022   0x2103             MOVS     R1,#+3
   \   00000024   0x2000             MOVS     R0,#+0
   \   00000026   0x.... 0x....      BL       OLED_DisplaytinyStr
   1043          	OLED_DisplaytinyStr(0, 4, "M  chice");
   \   0000002A   0x....             LDR      R2,??DataTable11_10
   \   0000002C   0x2104             MOVS     R1,#+4
   \   0000002E   0x2000             MOVS     R0,#+0
   \   00000030   0x.... 0x....      BL       OLED_DisplaytinyStr
   1044          }
   \   00000034   0xBD01             POP      {R0,PC}          ;; return
   1045          
   1046          

   \                                 In section .text, align 2, keep-with-next
   1047          void OLED_Display_tinyFormat(unsigned char x,unsigned char y,const char* format,...)
   1048          {
   \                     OLED_Display_tinyFormat: (+1)
   \   00000000   0xB408             PUSH     {R3}
   \   00000002   0xB5F0             PUSH     {R4-R7,LR}
   \   00000004   0xB090             SUB      SP,SP,#+64
   \   00000006   0x0006             MOVS     R6,R0
   \   00000008   0x000D             MOVS     R5,R1
   \   0000000A   0x0014             MOVS     R4,R2
   1049          	va_list ap;
   1050          	char string[64]={0};
   \   0000000C   0x4668             MOV      R0,SP
   \   0000000E   0x2140             MOVS     R1,#+64
   \   00000010   0x.... 0x....      BL       __aeabi_memclr4
   1051          	va_start(ap,format);
   \   00000014   0xA815             ADD      R0,SP,#+84
   \   00000016   0x0007             MOVS     R7,R0
   1052          	vsnprintf(string,64,format,ap);
   \   00000018   0x003B             MOVS     R3,R7
   \   0000001A   0x0022             MOVS     R2,R4
   \   0000001C   0x2140             MOVS     R1,#+64
   \   0000001E   0x4668             MOV      R0,SP
   \   00000020   0x.... 0x....      BL       vsnprintf
   1053          	va_end(ap);
   1054          	OLED_DisplaytinyStr(x,y,string);
   \   00000024   0x466A             MOV      R2,SP
   \   00000026   0x0029             MOVS     R1,R5
   \   00000028   0xB2C9             UXTB     R1,R1
   \   0000002A   0x0030             MOVS     R0,R6
   \   0000002C   0xB2C0             UXTB     R0,R0
   \   0000002E   0x.... 0x....      BL       OLED_DisplaytinyStr
   1055          }
   \   00000032   0xB010             ADD      SP,SP,#+64
   \   00000034   0x9804             LDR      R0,[SP, #+16]
   \   00000036   0xBCF0             POP      {R4-R7}
   \   00000038   0xB002             ADD      SP,SP,#+8
   \   0000003A   0x4700             BX       R0               ;; return
   1056          

   \                                 In section .text, align 2, keep-with-next
   1057          uint8 StrLen6X8(char *str)
   1058          {
   \                     StrLen6X8: (+1)
   \   00000000   0xB500             PUSH     {LR}
   \   00000002   0x0001             MOVS     R1,R0
   1059              uint8 i=0;
   \   00000004   0x2000             MOVS     R0,#+0
   1060              while(str[i]!='\0')
   \                     ??StrLen6X8_0: (+1)
   \   00000006   0xB2C0             UXTB     R0,R0
   \   00000008   0x5C0A             LDRB     R2,[R1, R0]
   \   0000000A   0x2A00             CMP      R2,#+0
   \   0000000C   0xD001             BEQ      ??StrLen6X8_1
   1061              {
   1062                i++;
   \   0000000E   0x1C40             ADDS     R0,R0,#+1
   \   00000010   0xE7F9             B        ??StrLen6X8_0
   1063              }
   1064              i++;
   \                     ??StrLen6X8_1: (+1)
   \   00000012   0x1C40             ADDS     R0,R0,#+1
   1065              return (i*6);
   \   00000014   0x2206             MOVS     R2,#+6
   \   00000016   0x4350             MULS     R0,R2,R0
   \   00000018   0xB2C0             UXTB     R0,R0
   \   0000001A   0xBD00             POP      {PC}             ;; return
   1066          }

   \                                 In section .text, align 2, keep-with-next
   1067          uint8 StrLen8X16(char *str)
   1068          {
   \                     StrLen8X16: (+1)
   \   00000000   0xB500             PUSH     {LR}
   \   00000002   0x0001             MOVS     R1,R0
   1069              uint8 i=0;
   \   00000004   0x2000             MOVS     R0,#+0
   1070              while(str[i]!='\0')
   \                     ??StrLen8X16_0: (+1)
   \   00000006   0xB2C0             UXTB     R0,R0
   \   00000008   0x5C0A             LDRB     R2,[R1, R0]
   \   0000000A   0x2A00             CMP      R2,#+0
   \   0000000C   0xD001             BEQ      ??StrLen8X16_1
   1071              {
   1072                i++;
   \   0000000E   0x1C40             ADDS     R0,R0,#+1
   \   00000010   0xE7F9             B        ??StrLen8X16_0
   1073              }
   1074              i++;
   \                     ??StrLen8X16_1: (+1)
   \   00000012   0x1C40             ADDS     R0,R0,#+1
   1075              return (i*8);
   \   00000014   0x2208             MOVS     R2,#+8
   \   00000016   0x4350             MULS     R0,R2,R0
   \   00000018   0xB2C0             UXTB     R0,R0
   \   0000001A   0xBD00             POP      {PC}             ;; return
   1076          }
   1077          
   1078          
   1079          

   \                                 In section .text, align 2, keep-with-next
   1080          void OLED_Draw_Point(unsigned char x,unsigned char y,unsigned char a)
   1081          {
   \                     OLED_Draw_Point: (+1)
   \   00000000   0xB5FC             PUSH     {R2-R7,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
   \   00000006   0x0016             MOVS     R6,R2
   1082             	unsigned char pos,bx,temp=0;
   \   00000008   0x2700             MOVS     R7,#+0
   1083          
   1084          	if(x>127||y>64)
   \   0000000A   0xB2E4             UXTB     R4,R4
   \   0000000C   0x2C80             CMP      R4,#+128
   \   0000000E   0xDA02             BGE      ??OLED_Draw_Point_0
   \   00000010   0xB2ED             UXTB     R5,R5
   \   00000012   0x2D41             CMP      R5,#+65
   \   00000014   0xDB00             BLT      ??OLED_Draw_Point_1
   1085          		return;//超出范围了.
   \                     ??OLED_Draw_Point_0: (+1)
   \   00000016   0xE03A             B        ??OLED_Draw_Point_2
   1086          	pos=y/8;
   \                     ??OLED_Draw_Point_1: (+1)
   \   00000018   0xB2ED             UXTB     R5,R5
   \   0000001A   0x0028             MOVS     R0,R5
   \   0000001C   0x2108             MOVS     R1,#+8
   \   0000001E   0x.... 0x....      BL       __aeabi_idiv
   \   00000022   0x4669             MOV      R1,SP
   \   00000024   0x7108             STRB     R0,[R1, #+4]
   1087          	bx=y%8;
   \   00000026   0x4668             MOV      R0,SP
   \   00000028   0x9000             STR      R0,[SP, #+0]
   \   0000002A   0xB2ED             UXTB     R5,R5
   \   0000002C   0x0028             MOVS     R0,R5
   \   0000002E   0x2108             MOVS     R1,#+8
   \   00000030   0x.... 0x....      BL       __aeabi_idivmod
   \   00000034   0x9800             LDR      R0,[SP, #+0]
   \   00000036   0x7141             STRB     R1,[R0, #+5]
   1088          	temp=1<<(bx);
   \   00000038   0x2001             MOVS     R0,#+1
   \   0000003A   0x4669             MOV      R1,SP
   \   0000003C   0x7949             LDRB     R1,[R1, #+5]
   \   0000003E   0x4088             LSLS     R0,R0,R1
   \   00000040   0x0007             MOVS     R7,R0
   1089          	if(a)
   \   00000042   0xB2F6             UXTB     R6,R6
   \   00000044   0x2E00             CMP      R6,#+0
   \   00000046   0xD011             BEQ      ??OLED_Draw_Point_3
   1090          		OLED_GRAM[pos][x]|=temp;
   \   00000048   0x....             LDR      R0,??DataTable11_11
   \   0000004A   0x4669             MOV      R1,SP
   \   0000004C   0x7909             LDRB     R1,[R1, #+4]
   \   0000004E   0x2208             MOVS     R2,#+8
   \   00000050   0x4351             MULS     R1,R2,R1
   \   00000052   0x1840             ADDS     R0,R0,R1
   \   00000054   0xB2E4             UXTB     R4,R4
   \   00000056   0x....             LDR      R1,??DataTable11_11
   \   00000058   0x466A             MOV      R2,SP
   \   0000005A   0x7912             LDRB     R2,[R2, #+4]
   \   0000005C   0x2308             MOVS     R3,#+8
   \   0000005E   0x435A             MULS     R2,R3,R2
   \   00000060   0x1889             ADDS     R1,R1,R2
   \   00000062   0xB2E4             UXTB     R4,R4
   \   00000064   0x5D09             LDRB     R1,[R1, R4]
   \   00000066   0x4339             ORRS     R1,R1,R7
   \   00000068   0x5501             STRB     R1,[R0, R4]
   \   0000006A   0xE010             B        ??OLED_Draw_Point_4
   1091          	else
   1092          		OLED_GRAM[pos][x]&=~temp;
   \                     ??OLED_Draw_Point_3: (+1)
   \   0000006C   0x....             LDR      R0,??DataTable11_11
   \   0000006E   0x4669             MOV      R1,SP
   \   00000070   0x7909             LDRB     R1,[R1, #+4]
   \   00000072   0x2208             MOVS     R2,#+8
   \   00000074   0x4351             MULS     R1,R2,R1
   \   00000076   0x1840             ADDS     R0,R0,R1
   \   00000078   0xB2E4             UXTB     R4,R4
   \   0000007A   0x....             LDR      R1,??DataTable11_11
   \   0000007C   0x466A             MOV      R2,SP
   \   0000007E   0x7912             LDRB     R2,[R2, #+4]
   \   00000080   0x2308             MOVS     R3,#+8
   \   00000082   0x435A             MULS     R2,R3,R2
   \   00000084   0x1889             ADDS     R1,R1,R2
   \   00000086   0xB2E4             UXTB     R4,R4
   \   00000088   0x5D09             LDRB     R1,[R1, R4]
   \   0000008A   0x43B9             BICS     R1,R1,R7
   \   0000008C   0x5501             STRB     R1,[R0, R4]
   1093          }
   \                     ??OLED_Draw_Point_4: (+1)
   \                     ??OLED_Draw_Point_2: (+1)
   \   0000008E   0xBDF3             POP      {R0,R1,R4-R7,PC}  ;; return

   \                                 In section .text, align 2, keep-with-next
   1094          void OLED_Clear_allGRAM(void)
   1095          {
   \                     OLED_Clear_allGRAM: (+1)
   \   00000000   0xB500             PUSH     {LR}
   1096             unsigned char i,j;
   1097             for(i=0;i<8;i++)
   \   00000002   0x2200             MOVS     R2,#+0
   \   00000004   0x0010             MOVS     R0,R2
   \                     ??OLED_Clear_allGRAM_0: (+1)
   \   00000006   0xB2C0             UXTB     R0,R0
   \   00000008   0x2808             CMP      R0,#+8
   \   0000000A   0xDA10             BGE      ??OLED_Clear_allGRAM_1
   1098                for(j=0;j<128;j++)
   \   0000000C   0x2200             MOVS     R2,#+0
   \   0000000E   0x0011             MOVS     R1,R2
   \                     ??OLED_Clear_allGRAM_2: (+1)
   \   00000010   0xB2C9             UXTB     R1,R1
   \   00000012   0x2980             CMP      R1,#+128
   \   00000014   0xDA09             BGE      ??OLED_Clear_allGRAM_3
   1099                   OLED_GRAM[i][j]=0;
   \   00000016   0x....             LDR      R2,??DataTable11_11
   \   00000018   0xB2C0             UXTB     R0,R0
   \   0000001A   0x2308             MOVS     R3,#+8
   \   0000001C   0x4343             MULS     R3,R0,R3
   \   0000001E   0x18D2             ADDS     R2,R2,R3
   \   00000020   0xB2C9             UXTB     R1,R1
   \   00000022   0x2300             MOVS     R3,#+0
   \   00000024   0x5453             STRB     R3,[R2, R1]
   \   00000026   0x1C49             ADDS     R1,R1,#+1
   \   00000028   0xE7F2             B        ??OLED_Clear_allGRAM_2
   \                     ??OLED_Clear_allGRAM_3: (+1)
   \   0000002A   0x1C40             ADDS     R0,R0,#+1
   \   0000002C   0xE7EB             B        ??OLED_Clear_allGRAM_0
   1100          }
   \                     ??OLED_Clear_allGRAM_1: (+1)
   \   0000002E   0xBD00             POP      {PC}             ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4:
   \   00000000   0x........         DC32     OLED_SPI

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_1:
   \   00000000   0x01312D00         DC32     0x1312d00

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5:
   \   00000000   0x........         DC32     F8X16

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_1:
   \   00000000   0x........         DC32     F6x8

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_2:
   \   00000000   0x........         DC32     menuNum

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_3:
   \   00000000   0x50 0x3A          DC8      0x50, 0x3A, 0x00, 0x00
   \              0x00 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_4:
   \   00000000   0x49 0x3A          DC8      0x49, 0x3A, 0x00, 0x00
   \              0x00 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_5:
   \   00000000   0x44 0x3A          DC8      0x44, 0x3A, 0x00, 0x00
   \              0x00 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_6:
   \   00000000   0x41 0x50          DC8      "AP:"
   \              0x3A 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_7:
   \   00000000   0x41 0x44          DC8      "AD:"
   \              0x3A 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_8:
   \   00000000   0x43 0x46          DC8      "CF:"
   \              0x3A 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_9:
   \   00000000   0x53 0x5A          DC8      "SZ:"
   \              0x3A 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_10:
   \   00000000   0x53 0x57          DC8      "SW:"
   \              0x3A 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10:
   \   00000000   0x........         DC32     menuNum

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11:
   \   00000000   0x2D 0x00          DC8      "-",0x0,0x0
   \              0x00 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_1:
   \   00000000   0x461C3C01         DC32     0x461c3c01

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_2:
   \   00000000   0x00002710         DC32     0x2710

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_3:
   \   00000000   0x2E 0x00          DC8      ".",0x0,0x0
   \              0x00 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_4:
   \   00000000   0x41200000         DC32     0x41200000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_5:
   \   00000000   0x........         DC32     F6x8

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_6:
   \   00000000   0x........         DC32     ?_10

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_7:
   \   00000000   0x........         DC32     ?_11

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_8:
   \   00000000   0x........         DC32     ?_12

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_9:
   \   00000000   0x........         DC32     ?_13

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_10:
   \   00000000   0x........         DC32     ?_14

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_11:
   \   00000000   0x........         DC32     OLED_GRAM

   \                                 In section .rodata, align 4
   \   00000000   0x50 0x3A          DC8 "P:"
   \              0x00         
   \   00000003   0x00               DC8 0

   \                                 In section .rodata, align 4
   \   00000000   0x49 0x3A          DC8 "I:"
   \              0x00         
   \   00000003   0x00               DC8 0

   \                                 In section .rodata, align 4
   \   00000000   0x44 0x3A          DC8 "D:"
   \              0x00         
   \   00000003   0x00               DC8 0

   \                                 In section .rodata, align 4
   \   00000000   0x41 0x50          DC8 "AP:"
   \              0x3A 0x00    

   \                                 In section .rodata, align 4
   \   00000000   0x41 0x44          DC8 "AD:"
   \              0x3A 0x00    

   \                                 In section .rodata, align 4
   \   00000000   0x43 0x46          DC8 "CF:"
   \              0x3A 0x00    

   \                                 In section .rodata, align 4
   \   00000000   0x53 0x5A          DC8 "SZ:"
   \              0x3A 0x00    

   \                                 In section .rodata, align 4
   \   00000000   0x53 0x57          DC8 "SW:"
   \              0x3A 0x00    

   \                                 In section .rodata, align 2
   \   00000000   0x2D 0x00          DC8 "-"

   \                                 In section .rodata, align 2
   \   00000000   0x2E 0x00          DC8 "."

   \                                 In section .rodata, align 4
   \                     ?_10:
   \   00000000   0x55 0x20          DC8 "U  P_angle +100"
   \              0x20 0x50    
   \              0x5F 0x61    
   \              0x6E 0x67    
   \              0x6C 0x65    
   \              0x20 0x2B    
   \              0x31 0x30    
   \              0x30 0x00    

   \                                 In section .rodata, align 4
   \                     ?_11:
   \   00000000   0x44 0x20          DC8 "D  P_angle -100"
   \              0x20 0x50    
   \              0x5F 0x61    
   \              0x6E 0x67    
   \              0x6C 0x65    
   \              0x20 0x2D    
   \              0x31 0x30    
   \              0x30 0x00    

   \                                 In section .rodata, align 4
   \                     ?_12:
   \   00000000   0x4C 0x20          DC8 "L  D_angle +1"
   \              0x20 0x44    
   \              0x5F 0x61    
   \              0x6E 0x67    
   \              0x6C 0x65    
   \              0x20 0x2B    
   \              0x31 0x00    
   \   0000000E   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_13:
   \   00000000   0x52 0x20          DC8 "R  D_angle -1"
   \              0x20 0x44    
   \              0x5F 0x61    
   \              0x6E 0x67    
   \              0x6C 0x65    
   \              0x20 0x2D    
   \              0x31 0x00    
   \   0000000E   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_14:
   \   00000000   0x4D 0x20          DC8 "M  chice"
   \              0x20 0x63    
   \              0x68 0x69    
   \              0x63 0x65    
   \              0x00         
   \   00000009   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \   00000000   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00         
   \   00000017   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00         
   \   0000002E   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   1101          
   1102          
   1103          /* ---------------------------------------- 存在bug的函数 不到万不得已 不要使用 */
   1104          
   1105          /**
   1106            * 简介
   1107            *     OLED printf显示
   1108            * 参数
   1109            *     x, y 坐标值
   1110            *     format --- "%d"类似这样的
   1111            *     ...    --- 变量，就像使用printf一样
   1112            * 备注
   1113            *     由于逐飞库最底层的修改，printf无法通过类似方法通过串口打印
   1114            *     而逐飞库的printf函数无法打印 %f 类型数据 --- han 1/26
   1115            */
   1116          //void OLED_Display_Format(unsigned char x,unsigned char y,const char* format,...)
   1117          //{
   1118          //	va_list ap;
   1119          //	char string[64]={0};
   1120          //	va_start(ap,format);
   1121          //	vsnprintf(string,64,format,ap);
   1122          //	va_end(ap);
   1123          //	OLED_DisplayStr(x,y,string);
   1124          //}
   1125          
   1126          
   1127          /**
   1128            * 简介
   1129            *     OLED显示 float
   1130            * 参数
   1131            *     date    float数据
   1132            *     len     显示长度  推荐 9
   1133            * 备注
   1134            *     当 uart.c 文件中的 UART_SendFloat() 中的 UART_FloatArray数组定义
   1135            *     位于 UART_SendFloat() 函数中时，此函数就会无效，未查明原因 --- han 1/28
   1136            */
   1137          //void OLED_DisplayFloat(uint8 x, uint8 y, float date, uint8 len)
   1138          //{
   1139          //////    uint8 i = 0;
   1140          ////    char OLED_FloatArray[FLOAT_ARRAY_NUM] = {0};
   1141          ////
   1142          //////    //不能在定义时候初始化，不知道原因，总之会死，只能定义完再初始化
   1143          //////    for (i=0; i<FLOAT_ARRAY_NUM; i++)
   1144          //////    {
   1145          //////        OLED_FloatArray[i] = 0;
   1146          //////    }
   1147          ////
   1148          ////    sprintf(OLED_FloatArray, "%f", date);
   1149          ////
   1150          ////    OLED_FloatArray[len] = '\0';
   1151          ////
   1152          ////    OLED_DisplayStr(x, y, OLED_FloatArray);
   1153          //
   1154          //
   1155          //    uint8 i=0;
   1156          //
   1157          //    for (i=0; i<FLOAT_ARRAY_NUM; i++)
   1158          //    {
   1159          //        UART_SendFloatArray[i] = 0;
   1160          //    }
   1161          //
   1162          //    sprintf(UART_SendFloatArray, "%f", date);
   1163          //
   1164          //    UART_SendFloatArray[len] = '\0';
   1165          //
   1166          //    OLED_DisplayStr(x, y, UART_SendFloatArray);
   1167          //}
   1168          
   1169          /**
   1170            * 简介
   1171            *     OLED显示 uint16
   1172            * 参数
   1173            *     date    数据
   1174            */
   1175          //void OLED_DisplayUint16(uint8 x, uint8 y, uint16 data)
   1176          //{
   1177          //    char hold[6] = {0};
   1178          //    uint16 h = data;
   1179          //
   1180          //    sprintf(hold, "%uhd", data);
   1181          //
   1182          //    if (h / 9999)
   1183          //    {
   1184          //        hold[5] = '\0';
   1185          //    }
   1186          //    else if (h / 999)
   1187          //    {
   1188          //        hold[4] = '\0';
   1189          //    }
   1190          //    else if (h / 99)
   1191          //    {
   1192          //        hold[3] = '\0';
   1193          //    }
   1194          //    else if (h / 9)
   1195          //    {
   1196          //        hold[2] = '\0';
   1197          //    }
   1198          //    else
   1199          //    {
   1200          //        hold[1] = '\0';
   1201          //    }
   1202          //
   1203          //    OLED_DisplayStr(x, y, hold);
   1204          //}
   1205          
   1206          
   1207          /* --------------------------- 存在bug的函数 不到万不得已 不要使用 -------- END */
   1208          
   1209          

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      16   OLED_Clear
        16   -> OLED_WrCmd
        16   -> OLED_WrDat
       4   OLED_Clear_allGRAM
       8   OLED_Display
         8   -> OLED_DisplaytinyStr
      40   OLED_DisplayFloat
        40   -> OLED_DisplaytinyStr
        40   -> OLED_Set_Pos
        40   -> OLED_Uint16
        40   -> OLED_WrDat
        40   -> __aeabi_f2iz
        40   -> __aeabi_f2uiz
        40   -> __aeabi_fmul
        40   -> __aeabi_fsub
        40   -> __aeabi_i2f
        40   -> __aeabi_ui2f
        40 __aeabi_cfcmple
        40 __aeabi_cfrcmple
        40 __aeabi_uidiv
        40 __aeabi_uidivmod
      32   OLED_DisplayStr
        32   -> OLED_Set_Pos
        32   -> OLED_WrDat
      88   OLED_Display_tinyFormat
        88   -> OLED_DisplaytinyStr
        88   -> __aeabi_memclr4
        88   -> vsnprintf
      32   OLED_DisplaytinyStr
        32   -> OLED_Set_Pos
        32   -> OLED_WrDat
      28   OLED_Draw_Point
        28 __aeabi_idiv
        28 __aeabi_idivmod
      20   OLED_HEXACSII
        20 __aeabi_idiv
        20 __aeabi_idivmod
       8   OLED_Init
         8   -> GpioInit
         8   -> GpioSet
         8   -> OLED_Clear
         8   -> OLED_Set_Pos
         8   -> OLED_WrCmd
         8   -> SystickDelayMs
         8   -> spi_init
      16   OLED_Int16
        16   -> OLED_DisplaytinyStr
        16   -> OLED_Uint16
      16   OLED_Menu
        16   -> OLED_DisplaytinyStr
        16   -> OLED_Set_Pos
        16   -> OLED_WrDat
      16   OLED_MenuFlicker
        16   -> OLED_Menu
        16   -> OLED_Set_Pos
        16   -> OLED_WrDat
      24   OLED_PutPixel
        24   -> OLED_Set_Pos
        24   -> OLED_WrDat
        24 __aeabi_idivmod
      16   OLED_Set_Pos
        16   -> OLED_WrCmd
      40   OLED_Uint16
        40   -> OLED_DisplaytinyStr
        40   -> OLED_HEXACSII
       8   OLED_WrCmd
         8   -> GpioSet
       8   OLED_WrDat
         8   -> GpioSet
       4   StrLen6X8
       4   StrLen8X16


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable10
       4  ??DataTable11
       4  ??DataTable11_1
       4  ??DataTable11_10
       4  ??DataTable11_11
       4  ??DataTable11_2
       4  ??DataTable11_3
       4  ??DataTable11_4
       4  ??DataTable11_5
       4  ??DataTable11_6
       4  ??DataTable11_7
       4  ??DataTable11_8
       4  ??DataTable11_9
       4  ??DataTable4
       4  ??DataTable4_1
       4  ??DataTable5
       4  ??DataTable5_1
       4  ??DataTable5_10
       4  ??DataTable5_2
       4  ??DataTable5_3
       4  ??DataTable5_4
       4  ??DataTable5_5
       4  ??DataTable5_6
       4  ??DataTable5_7
       4  ??DataTable5_8
       4  ??DataTable5_9
       4  ?_0
       4  ?_1
      16  ?_10
      16  ?_11
      16  ?_12
      16  ?_13
      12  ?_14
      64  ?_15
       4  ?_2
       4  ?_3
       4  ?_4
       4  ?_5
       4  ?_6
       4  ?_7
       2  ?_8
       2  ?_9
     552  F6x8
    1520  F8X16
      60  OLED_Clear
      48  OLED_Clear_allGRAM
      54  OLED_Display
     252  OLED_DisplayFloat
     138  OLED_DisplayStr
      60  OLED_Display_tinyFormat
      86  OLED_DisplaytinyStr
     144  OLED_Draw_Point
    1024  OLED_GRAM
      60  OLED_HEXACSII
     238  OLED_Init
      54  OLED_Int16
     490  OLED_Menu
    1020  OLED_MenuFlicker
      60  OLED_PutPixel
       8  OLED_SPI
      42  OLED_Set_Pos
     112  OLED_Uint16
      38  OLED_WrCmd
      38  OLED_WrDat
      28  StrLen6X8
      28  StrLen8X16
      36  menuNum

 
 1 024 bytes in section .bss
     8 bytes in section .data
 2 284 bytes in section .rodata
 3 154 bytes in section .text
 
 3 154 bytes of CODE  memory
 2 284 bytes of CONST memory
 1 032 bytes of DATA  memory

Errors: none
Warnings: none
