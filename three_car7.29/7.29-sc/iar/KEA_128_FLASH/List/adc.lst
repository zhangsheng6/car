###############################################################################
#
# IAR ANSI C/C++ Compiler V7.40.2.8542/W32 for ARM        29/Jul/2018  00:37:55
# Copyright 1999-2015 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  H:\智能车程序2018\三轮比赛\7.29-sc\device\C\adc.c
#    Command line =  
#        H:\智能车程序2018\三轮比赛\7.29-sc\device\C\adc.c -D IAR -D
#        TWR_K60N512 -D _DLIB_FILE_DESCRIPTOR -lCN
#        H:\智能车程序2018\三轮比赛\7.29-sc\iar\KEA_128_FLASH\List\ -lB
#        H:\智能车程序2018\三轮比赛\7.29-sc\iar\KEA_128_FLASH\List\ -o
#        H:\智能车程序2018\三轮比赛\7.29-sc\iar\KEA_128_FLASH\Obj\ --no_cse
#        --no_unroll --no_inline --no_code_motion --no_tbaa --no_clustering
#        --no_scheduling --debug --endian=little --cpu=Cortex-M0+ -e --fpu=None
#        --dlib_config F:\IAR安装包\arm\INC\c\DLib_Config_Normal.h -I
#        H:\智能车程序2018\三轮比赛\7.29-sc\iar\..\device\H\ -I
#        H:\智能车程序2018\三轮比赛\7.29-sc\iar\..\user\H\ -I
#        H:\智能车程序2018\三轮比赛\7.29-sc\iar\..\system\ -I
#        H:\智能车程序2018\三轮比赛\7.29-sc\iar\..\lib\H\ -I
#        H:\智能车程序2018\三轮比赛\7.29-sc\iar\..\system\coreSupport\ -On
#    List file    =  
#        H:\智能车程序2018\三轮比赛\7.29-sc\iar\KEA_128_FLASH\List\adc.lst
#    Object file  =  
#        H:\智能车程序2018\三轮比赛\7.29-sc\iar\KEA_128_FLASH\Obj\adc.o
#
###############################################################################

H:\智能车程序2018\三轮比赛\7.29-sc\device\C\adc.c
      1          /**
      2            ******************************************************************************
      3            * COPYRIGHT NOTICE
      4            * Copyright (c) 2018,华北科技学院
      5            * All rights reserved.
      6            *
      7            * 文件名称：     adc.c
      8            * 文件标识：
      9            * 摘    要：
     10            *
     11            * 当前版本：     1.0
     12            * 负    责：     韩志伟
     13            * 时    间：     2018年1月23日 10:55:52
     14            ******************************************************************************
     15            */
     16          
     17          #include "adc.h"
     18          
     19          

   \                                 In section .bss, align 2
     20          uint16 adcHold = 0;
   \                     adcHold:
   \   00000000                      DS8 2
     21          
     22          /**
     23            * 简介
     24            *     对adc引脚进行编码
     25            */

   \                                 In section .text, align 2, keep-with-next
     26          uint8 Change(PTX_n adcn_ch)
     27          {
   \                     Change: (+1)
   \   00000000   0xB500             PUSH     {LR}
   \   00000002   0x0001             MOVS     R1,R0
     28              uint8 shift = 0;
   \   00000004   0x2000             MOVS     R0,#+0
     29              switch (adcn_ch)
   \   00000006   0xB2C9             UXTB     R1,R1
   \   00000008   0x000A             MOVS     R2,R1
   \   0000000A   0x2A00             CMP      R2,#+0
   \   0000000C   0xD01E             BEQ      ??Change_0
   \   0000000E   0x2A01             CMP      R2,#+1
   \   00000010   0xD01F             BEQ      ??Change_1
   \   00000012   0x2A06             CMP      R2,#+6
   \   00000014   0xD020             BEQ      ??Change_2
   \   00000016   0x2A07             CMP      R2,#+7
   \   00000018   0xD021             BEQ      ??Change_3
   \   0000001A   0x2A08             CMP      R2,#+8
   \   0000001C   0xD022             BEQ      ??Change_4
   \   0000001E   0x2A09             CMP      R2,#+9
   \   00000020   0xD023             BEQ      ??Change_5
   \   00000022   0x2A0A             CMP      R2,#+10
   \   00000024   0xD024             BEQ      ??Change_6
   \   00000026   0x2A0B             CMP      R2,#+11
   \   00000028   0xD025             BEQ      ??Change_7
   \   0000002A   0x2A10             CMP      R2,#+16
   \   0000002C   0xD026             BEQ      ??Change_8
   \   0000002E   0x2A11             CMP      R2,#+17
   \   00000030   0xD027             BEQ      ??Change_9
   \   00000032   0x2A12             CMP      R2,#+18
   \   00000034   0xD028             BEQ      ??Change_10
   \   00000036   0x2A13             CMP      R2,#+19
   \   00000038   0xD029             BEQ      ??Change_11
   \   0000003A   0x2A2C             CMP      R2,#+44
   \   0000003C   0xD02A             BEQ      ??Change_12
   \   0000003E   0x2A2D             CMP      R2,#+45
   \   00000040   0xD02B             BEQ      ??Change_13
   \   00000042   0x2A2E             CMP      R2,#+46
   \   00000044   0xD02C             BEQ      ??Change_14
   \   00000046   0x2A2F             CMP      R2,#+47
   \   00000048   0xD02D             BEQ      ??Change_15
   \   0000004A   0xE02F             B        ??Change_16
     30              {
     31                case A0:
     32                  shift = 0;
   \                     ??Change_0: (+1)
   \   0000004C   0x2200             MOVS     R2,#+0
   \   0000004E   0x0010             MOVS     R0,R2
     33                  break;
   \   00000050   0xE02E             B        ??Change_17
     34                case A1:
     35                  shift = 1;
   \                     ??Change_1: (+1)
   \   00000052   0x2201             MOVS     R2,#+1
   \   00000054   0x0010             MOVS     R0,R2
     36                  break;
   \   00000056   0xE02B             B        ??Change_17
     37                case A6:
     38                  shift = 2;
   \                     ??Change_2: (+1)
   \   00000058   0x2202             MOVS     R2,#+2
   \   0000005A   0x0010             MOVS     R0,R2
     39                  break;
   \   0000005C   0xE028             B        ??Change_17
     40                case A7:
     41                  shift = 3;
   \                     ??Change_3: (+1)
   \   0000005E   0x2203             MOVS     R2,#+3
   \   00000060   0x0010             MOVS     R0,R2
     42                  break;
   \   00000062   0xE025             B        ??Change_17
     43          
     44                case B0:
     45                  shift = 4;
   \                     ??Change_4: (+1)
   \   00000064   0x2204             MOVS     R2,#+4
   \   00000066   0x0010             MOVS     R0,R2
     46                  break;
   \   00000068   0xE022             B        ??Change_17
     47                case B1:
     48                  shift = 5;
   \                     ??Change_5: (+1)
   \   0000006A   0x2205             MOVS     R2,#+5
   \   0000006C   0x0010             MOVS     R0,R2
     49                  break;
   \   0000006E   0xE01F             B        ??Change_17
     50                case B2:
     51                  shift = 6;
   \                     ??Change_6: (+1)
   \   00000070   0x2206             MOVS     R2,#+6
   \   00000072   0x0010             MOVS     R0,R2
     52                  break;
   \   00000074   0xE01C             B        ??Change_17
     53                case B3:
     54                  shift = 7;
   \                     ??Change_7: (+1)
   \   00000076   0x2207             MOVS     R2,#+7
   \   00000078   0x0010             MOVS     R0,R2
     55                  break;
   \   0000007A   0xE019             B        ??Change_17
     56          
     57                case C0:
     58                  shift = 8;
   \                     ??Change_8: (+1)
   \   0000007C   0x2208             MOVS     R2,#+8
   \   0000007E   0x0010             MOVS     R0,R2
     59                  break;
   \   00000080   0xE016             B        ??Change_17
     60                case C1:
     61                  shift = 9;
   \                     ??Change_9: (+1)
   \   00000082   0x2209             MOVS     R2,#+9
   \   00000084   0x0010             MOVS     R0,R2
     62                  break;
   \   00000086   0xE013             B        ??Change_17
     63                case C2:
     64                  shift = 10;
   \                     ??Change_10: (+1)
   \   00000088   0x220A             MOVS     R2,#+10
   \   0000008A   0x0010             MOVS     R0,R2
     65                  break;
   \   0000008C   0xE010             B        ??Change_17
     66                case C3:
     67                  shift = 11;
   \                     ??Change_11: (+1)
   \   0000008E   0x220B             MOVS     R2,#+11
   \   00000090   0x0010             MOVS     R0,R2
     68                  break;
   \   00000092   0xE00D             B        ??Change_17
     69          
     70                case F4:
     71                  shift = 12;
   \                     ??Change_12: (+1)
   \   00000094   0x220C             MOVS     R2,#+12
   \   00000096   0x0010             MOVS     R0,R2
     72                  break;
   \   00000098   0xE00A             B        ??Change_17
     73                case F5:
     74                  shift = 13;
   \                     ??Change_13: (+1)
   \   0000009A   0x220D             MOVS     R2,#+13
   \   0000009C   0x0010             MOVS     R0,R2
     75                  break;
   \   0000009E   0xE007             B        ??Change_17
     76                case F6:
     77                  shift = 14;
   \                     ??Change_14: (+1)
   \   000000A0   0x220E             MOVS     R2,#+14
   \   000000A2   0x0010             MOVS     R0,R2
     78                  break;
   \   000000A4   0xE004             B        ??Change_17
     79                case F7:
     80                  shift = 15;
   \                     ??Change_15: (+1)
   \   000000A6   0x220F             MOVS     R2,#+15
   \   000000A8   0x0010             MOVS     R0,R2
     81                  break;
   \   000000AA   0xE001             B        ??Change_17
     82          
     83                default:
     84                  shift = 0;
   \                     ??Change_16: (+1)
   \   000000AC   0x2200             MOVS     R2,#+0
   \   000000AE   0x0010             MOVS     R0,R2
     85                  break;
     86              }
     87          
     88              return shift;
   \                     ??Change_17: (+1)
   \   000000B0   0xB2C0             UXTB     R0,R0
   \   000000B2   0xBD00             POP      {PC}             ;; return
     89          }
     90          
     91          /**
     92            * 简介
     93            *     ADC 初始化
     94            */

   \                                 In section .text, align 2, keep-with-next
     95          void ADC_Init()
     96          {
     97          
     98              SIM->SCGC |= SIM_SCGC_ADC_MASK;       //开启ADC时钟
   \                     ADC_Init: (+1)
   \   00000000   0x....             LDR      R0,??DataTable4  ;; 0x40048014
   \   00000002   0x6800             LDR      R0,[R0, #+0]
   \   00000004   0x2180             MOVS     R1,#+128
   \   00000006   0x0589             LSLS     R1,R1,#+22       ;; #+536870912
   \   00000008   0x4301             ORRS     R1,R1,R0
   \   0000000A   0x....             LDR      R0,??DataTable4  ;; 0x40048014
   \   0000000C   0x6001             STR      R1,[R0, #+0]
     99          
    100              ADC->APCTL1 &= 0; //所有引脚 禁用ADC功能
   \   0000000E   0x....             LDR      R0,??DataTable4_1  ;; 0x4003b018
   \   00000010   0x6800             LDR      R0,[R0, #+0]
   \   00000012   0x2000             MOVS     R0,#+0
   \   00000014   0x....             LDR      R1,??DataTable4_1  ;; 0x4003b018
   \   00000016   0x6008             STR      R0,[R1, #+0]
    101          
    102              ADC->SC3 = ( 0
    103                           | ADC_SC3_ADIV(1)           //分频系数，=输入时钟
    104                         //| ADC_SC3_MODE(bit)         //分辨率
    105                           | ADC_SC3_ADICLK(0)         //使用总线时钟最为ADC得时钟源
    106                           | ADC_SC3_ADLSMP(1)         //长采样
    107                           | ADC_SC3_ADLPC(0)     //高速模式
    108                          );
   \   00000018   0x2030             MOVS     R0,#+48
   \   0000001A   0x....             LDR      R1,??DataTable4_2  ;; 0x4003b008
   \   0000001C   0x6008             STR      R0,[R1, #+0]
    109              ADC->SC2 = ( 0
    110                           | ADC_SC2_REFSEL(0)       //基准电压选择
    111                           | ADC_SC2_ADTRG(0)        //软件触发
    112                           | ADC_SC2_ACFE(0)         //比较功能禁用
    113                          );
   \   0000001E   0x2000             MOVS     R0,#+0
   \   00000020   0x....             LDR      R1,??DataTable4_3  ;; 0x4003b004
   \   00000022   0x6008             STR      R0,[R1, #+0]
    114          }
   \   00000024   0x4770             BX       LR               ;; return
    115          
    116          /**
    117            * 简介
    118            *     ADC 引脚使能
    119            * 参数
    120            *     adcn_ch
    121            *       通道号(variable.h中编辑)
    122            */

   \                                 In section .text, align 2, keep-with-next
    123          void ADC_Able(PTX_n adcn_ch)
    124          {
   \                     ADC_Able: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0004             MOVS     R4,R0
    125              uint8 shift = 0;
   \   00000004   0x2500             MOVS     R5,#+0
    126          
    127              shift = Change(adcn_ch);
   \   00000006   0x0020             MOVS     R0,R4
   \   00000008   0xB2C0             UXTB     R0,R0
   \   0000000A   0x.... 0x....      BL       Change
   \   0000000E   0x0005             MOVS     R5,R0
    128          
    129              ADC->APCTL1 |= 1<<shift;              //使能ADC引脚
   \   00000010   0x....             LDR      R0,??DataTable4_1  ;; 0x4003b018
   \   00000012   0x6800             LDR      R0,[R0, #+0]
   \   00000014   0x2101             MOVS     R1,#+1
   \   00000016   0x40A9             LSLS     R1,R1,R5
   \   00000018   0x4301             ORRS     R1,R1,R0
   \   0000001A   0x....             LDR      R0,??DataTable4_1  ;; 0x4003b018
   \   0000001C   0x6001             STR      R1,[R0, #+0]
    130          }
   \   0000001E   0xBD31             POP      {R0,R4,R5,PC}    ;; return
    131          
    132          /**
    133            * 简介
    134            *     关掉 ADC
    135            * 参数
    136            *     adcn_ch
    137            *       通道号(variable.h中编辑)
    138            */

   \                                 In section .text, align 2, keep-with-next
    139          void ADC_Disable(PTX_n adcn_ch)
    140          {
   \                     ADC_Disable: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0x0004             MOVS     R4,R0
    141              uint8  shift = 0;
   \   00000004   0x2500             MOVS     R5,#+0
    142              uint16 mon = 0;
   \   00000006   0x2600             MOVS     R6,#+0
    143          
    144              shift = Change(adcn_ch);
   \   00000008   0x0020             MOVS     R0,R4
   \   0000000A   0xB2C0             UXTB     R0,R0
   \   0000000C   0x.... 0x....      BL       Change
   \   00000010   0x0005             MOVS     R5,R0
    145              mon = (uint16)(1 << shift);
   \   00000012   0x2001             MOVS     R0,#+1
   \   00000014   0x40A8             LSLS     R0,R0,R5
   \   00000016   0x0006             MOVS     R6,R0
    146          
    147              ADC->APCTL1 &= ~mon;              //禁止ADC引脚
   \   00000018   0x....             LDR      R0,??DataTable4_1  ;; 0x4003b018
   \   0000001A   0x6800             LDR      R0,[R0, #+0]
   \   0000001C   0xB2B6             UXTH     R6,R6
   \   0000001E   0x43B0             BICS     R0,R0,R6
   \   00000020   0x....             LDR      R1,??DataTable4_1  ;; 0x4003b018
   \   00000022   0x6008             STR      R0,[R1, #+0]
    148          }
   \   00000024   0xBD70             POP      {R4-R6,PC}       ;; return
    149          
    150          
    151          /**
    152            * 简介
    153            *     采集一次ADC数据
    154            * 参数
    155            *     adcn_ch
    156            *       通道号
    157            *     bit
    158            *       adc8bit
    159            *       adc10bit
    160            *       adc12bit
    161            * 返回值
    162            *     无符号结果值(范围:0-4095)
    163            * 备注
    164            *     进入之后会开启对应引脚的 ADC功能 但 出去时候 没有关闭
    165            *     没有使能连续转换功能，所以对 ADC_SC1 执行一次写操作将启动一次转换
    166            *
    167            */

   \                                 In section .text, align 2, keep-with-next
    168          uint16 ADC_Once(PTX_n adcn_ch, adcBit bit)
    169          {
   \                     ADC_Once: (+1)
   \   00000000   0xB5F8             PUSH     {R3-R7,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000F             MOVS     R7,R1
    170              uint16 result;
    171              uint8  shift = 0;
   \   00000006   0x2600             MOVS     R6,#+0
    172          
    173              shift = Change(adcn_ch);
   \   00000008   0x0020             MOVS     R0,R4
   \   0000000A   0xB2C0             UXTB     R0,R0
   \   0000000C   0x.... 0x....      BL       Change
   \   00000010   0x0006             MOVS     R6,R0
    174          
    175              ADC_Able(adcn_ch);
   \   00000012   0x0020             MOVS     R0,R4
   \   00000014   0xB2C0             UXTB     R0,R0
   \   00000016   0x.... 0x....      BL       ADC_Able
    176          
    177              ADC->SC3 |=  ADC_SC3_MODE(bit);  //分辨率
   \   0000001A   0x....             LDR      R0,??DataTable4_2  ;; 0x4003b008
   \   0000001C   0x6800             LDR      R0,[R0, #+0]
   \   0000001E   0xB2FF             UXTB     R7,R7
   \   00000020   0x00B9             LSLS     R1,R7,#+2
   \   00000022   0x220C             MOVS     R2,#+12
   \   00000024   0x400A             ANDS     R2,R2,R1
   \   00000026   0x4302             ORRS     R2,R2,R0
   \   00000028   0x....             LDR      R0,??DataTable4_2  ;; 0x4003b008
   \   0000002A   0x6002             STR      R2,[R0, #+0]
    178              ADC->SC1  = ADC_SC1_ADCH(shift);       //启动转换
   \   0000002C   0xB2F6             UXTB     R6,R6
   \   0000002E   0x06F0             LSLS     R0,R6,#+27       ;; ZeroExtS R0,R6,#+27,#+27
   \   00000030   0x0EC0             LSRS     R0,R0,#+27
   \   00000032   0x....             LDR      R1,??DataTable4_4  ;; 0x4003b000
   \   00000034   0x6008             STR      R0,[R1, #+0]
    179          
    180              //对 ADC_SC1 执行一次写操作将启动转换
    181              while(!(ADC->SC1 & ADC_SC1_COCO_MASK)); //等待转换完成
   \                     ??ADC_Once_0: (+1)
   \   00000036   0x....             LDR      R0,??DataTable4_4  ;; 0x4003b000
   \   00000038   0x6800             LDR      R0,[R0, #+0]
   \   0000003A   0x0600             LSLS     R0,R0,#+24
   \   0000003C   0xD5FB             BPL      ??ADC_Once_0
    182              result = ADC->R;
   \   0000003E   0x....             LDR      R0,??DataTable4_5  ;; 0x4003b010
   \   00000040   0x6800             LDR      R0,[R0, #+0]
   \   00000042   0x0005             MOVS     R5,R0
    183          
    184              return (result & ADC_R_ADR_MASK);       //返回结果
   \   00000044   0x0528             LSLS     R0,R5,#+20       ;; ZeroExtS R0,R5,#+20,#+20
   \   00000046   0x0D00             LSRS     R0,R0,#+20
   \   00000048   0xBDF2             POP      {R1,R4-R7,PC}    ;; return
    185          }
    186          
    187          /**
    188            * 简介
    189            *     ADC 停止采集
    190            * 参数
    191          
    192            * 备注
    193            */

   \                                 In section .text, align 2, keep-with-next
    194          void ADC_Stop(void)
    195          {
    196              ADC->SC1 = ADC_SC1_ADCH(0xFF);
   \                     ADC_Stop: (+1)
   \   00000000   0x201F             MOVS     R0,#+31
   \   00000002   0x....             LDR      R1,??DataTable4_4  ;; 0x4003b000
   \   00000004   0x6008             STR      R0,[R1, #+0]
    197          }
   \   00000006   0x4770             BX       LR               ;; return
    198          
    199          
    200          /**
    201            * 简介
    202            *     中值滤波后的结果(范围:0-4095)
    203            * 参数
    204            *     MoudelNumber：模块号
    205            *     Channel：通道号
    206            *     accuracy：精度
    207            *     N:均值滤波次数
    208            * 返回值
    209            *     无符号结果值(范围:0-4095)
    210            */

   \                                 In section .text, align 2, keep-with-next
    211          uint16 hw_ad_mid(PTX_n adcn_ch, adcBit bit)
    212          {
   \                     hw_ad_mid: (+1)
   \   00000000   0xB5F2             PUSH     {R1,R4-R7,LR}
   \   00000002   0xB082             SUB      SP,SP,#+8
   \   00000004   0x0004             MOVS     R4,R0
    213              uint16 i, j, k, tmp;
    214          
    215              //取3次A/D转换结果
    216              i = ADC_Once(adcn_ch, bit);
   \   00000006   0x4668             MOV      R0,SP
   \   00000008   0x7A01             LDRB     R1,[R0, #+8]
   \   0000000A   0x0020             MOVS     R0,R4
   \   0000000C   0xB2C0             UXTB     R0,R0
   \   0000000E   0x.... 0x....      BL       ADC_Once
   \   00000012   0x0006             MOVS     R6,R0
    217              j = ADC_Once(adcn_ch, bit);
   \   00000014   0x4668             MOV      R0,SP
   \   00000016   0x7A01             LDRB     R1,[R0, #+8]
   \   00000018   0x0020             MOVS     R0,R4
   \   0000001A   0xB2C0             UXTB     R0,R0
   \   0000001C   0x.... 0x....      BL       ADC_Once
   \   00000020   0x0005             MOVS     R5,R0
    218              k = ADC_Once(adcn_ch, bit);
   \   00000022   0x4668             MOV      R0,SP
   \   00000024   0x7A01             LDRB     R1,[R0, #+8]
   \   00000026   0x0020             MOVS     R0,R4
   \   00000028   0xB2C0             UXTB     R0,R0
   \   0000002A   0x.... 0x....      BL       ADC_Once
   \   0000002E   0x4669             MOV      R1,SP
   \   00000030   0x8008             STRH     R0,[R1, #+0]
    219          
    220              //取中值 冒泡排序 中间为中值
    221              if (i > j)
   \   00000032   0xB2AD             UXTH     R5,R5
   \   00000034   0xB2B6             UXTH     R6,R6
   \   00000036   0x42B5             CMP      R5,R6
   \   00000038   0xD202             BCS      ??hw_ad_mid_0
    222              {
    223                  tmp = i; i = j; j = tmp;
   \   0000003A   0x0037             MOVS     R7,R6
   \   0000003C   0x002E             MOVS     R6,R5
   \   0000003E   0x003D             MOVS     R5,R7
    224              }
    225              if (j > k)
   \                     ??hw_ad_mid_0: (+1)
   \   00000040   0x4668             MOV      R0,SP
   \   00000042   0x8800             LDRH     R0,[R0, #+0]
   \   00000044   0xB2AD             UXTH     R5,R5
   \   00000046   0x42A8             CMP      R0,R5
   \   00000048   0xD205             BCS      ??hw_ad_mid_1
    226              {
    227                  tmp = j; j = k; k = tmp;
   \   0000004A   0x002F             MOVS     R7,R5
   \   0000004C   0x4668             MOV      R0,SP
   \   0000004E   0x8800             LDRH     R0,[R0, #+0]
   \   00000050   0x0005             MOVS     R5,R0
   \   00000052   0x4668             MOV      R0,SP
   \   00000054   0x8007             STRH     R7,[R0, #+0]
    228              }
    229              if (i > j)
   \                     ??hw_ad_mid_1: (+1)
   \   00000056   0xB2AD             UXTH     R5,R5
   \   00000058   0xB2B6             UXTH     R6,R6
   \   0000005A   0x42B5             CMP      R5,R6
   \   0000005C   0xD202             BCS      ??hw_ad_mid_2
    230              {
    231                  tmp = i; i = j; j = tmp;
   \   0000005E   0x0037             MOVS     R7,R6
   \   00000060   0x002E             MOVS     R6,R5
   \   00000062   0x003D             MOVS     R5,R7
    232              }
    233          
    234              return      j;
   \                     ??hw_ad_mid_2: (+1)
   \   00000064   0x0028             MOVS     R0,R5
   \   00000066   0xB280             UXTH     R0,R0
   \   00000068   0xBDFE             POP      {R1-R7,PC}       ;; return
    235          }
    236          
    237          /**
    238            * 简介
    239            *     均值滤波后的结果(范围:0-4095)
    240            * 参数
    241            *     MoudelNumber：模块号
    242            *     Channel：通道号
    243            *     accuracy：精度
    244            *     N:均值滤波次数
    245            * 返回值
    246            *     无符号结果值(范围:0-4095)
    247            */

   \                                 In section .text, align 2, keep-with-next
    248          uint16 hw_ad_ave(PTX_n adcn_ch, adcBit bit, uint8 N)
    249          {
   \                     hw_ad_ave: (+1)
   \   00000000   0xB5F1             PUSH     {R0,R4-R7,LR}
   \   00000002   0x000F             MOVS     R7,R1
   \   00000004   0x0016             MOVS     R6,R2
    250              uint32 tmp = 0;
   \   00000006   0x2500             MOVS     R5,#+0
    251              uint8  i;
    252          
    253              for (i=0; i<N; i++)
   \   00000008   0x2000             MOVS     R0,#+0
   \   0000000A   0x0004             MOVS     R4,R0
   \                     ??hw_ad_ave_0: (+1)
   \   0000000C   0xB2E4             UXTB     R4,R4
   \   0000000E   0xB2F6             UXTB     R6,R6
   \   00000010   0x42B4             CMP      R4,R6
   \   00000012   0xD209             BCS      ??hw_ad_ave_1
    254                  tmp += hw_ad_mid(adcn_ch, bit);
   \   00000014   0x0039             MOVS     R1,R7
   \   00000016   0xB2C9             UXTB     R1,R1
   \   00000018   0x4668             MOV      R0,SP
   \   0000001A   0x7800             LDRB     R0,[R0, #+0]
   \   0000001C   0x.... 0x....      BL       hw_ad_mid
   \   00000020   0x1828             ADDS     R0,R5,R0
   \   00000022   0x0005             MOVS     R5,R0
   \   00000024   0x1C64             ADDS     R4,R4,#+1
   \   00000026   0xE7F1             B        ??hw_ad_ave_0
    255              tmp = tmp / N;
   \                     ??hw_ad_ave_1: (+1)
   \   00000028   0x0028             MOVS     R0,R5
   \   0000002A   0xB2F6             UXTB     R6,R6
   \   0000002C   0x0031             MOVS     R1,R6
   \   0000002E   0x.... 0x....      BL       __aeabi_uidiv
   \   00000032   0x0005             MOVS     R5,R0
    256          
    257              return (uint16)tmp;
   \   00000034   0x0028             MOVS     R0,R5
   \   00000036   0xB280             UXTH     R0,R0
   \   00000038   0xBDF2             POP      {R1,R4-R7,PC}    ;; return
    258          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4:
   \   00000000   0x40048014         DC32     0x40048014

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_1:
   \   00000000   0x4003B018         DC32     0x4003b018

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_2:
   \   00000000   0x4003B008         DC32     0x4003b008

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_3:
   \   00000000   0x4003B004         DC32     0x4003b004

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_4:
   \   00000000   0x4003B000         DC32     0x4003b000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_5:
   \   00000000   0x4003B010         DC32     0x4003b010
    259          
    260          
    261          

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      16   ADC_Able
        16   -> Change
      16   ADC_Disable
        16   -> Change
       0   ADC_Init
      24   ADC_Once
        24   -> ADC_Able
        24   -> Change
       0   ADC_Stop
       4   Change
      24   hw_ad_ave
        24   -> hw_ad_mid
        24 __aeabi_uidiv
      32   hw_ad_mid
        32   -> ADC_Once


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable4
       4  ??DataTable4_1
       4  ??DataTable4_2
       4  ??DataTable4_3
       4  ??DataTable4_4
       4  ??DataTable4_5
      32  ADC_Able
      38  ADC_Disable
      38  ADC_Init
      74  ADC_Once
       8  ADC_Stop
     180  Change
       2  adcHold
      58  hw_ad_ave
     106  hw_ad_mid

 
   2 bytes in section .bss
 558 bytes in section .text
 
 558 bytes of CODE memory
   2 bytes of DATA memory

Errors: none
Warnings: none
