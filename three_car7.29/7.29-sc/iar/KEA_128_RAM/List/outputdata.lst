###############################################################################
#
# IAR ANSI C/C++ Compiler V7.30.3.8024/W32 for ARM        17/Jul/2018  09:40:43
# Copyright 1999-2014 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        H:\智能车程序2018\电磁三轮――ZS\7.17\device\C\outputdata.c
#    Command line =  
#        H:\智能车程序2018\电磁三轮――ZS\7.17\device\C\outputdata.c -D IAR -D
#        TWR_K60N512 -D _DLIB_FILE_DESCRIPTOR -lCN
#        H:\智能车程序2018\电磁三轮――ZS\7.17\iar\KEA_128_RAM\List\ -lB
#        H:\智能车程序2018\电磁三轮――ZS\7.17\iar\KEA_128_RAM\List\ -o
#        H:\智能车程序2018\电磁三轮――ZS\7.17\iar\KEA_128_RAM\Obj\ --no_cse
#        --no_unroll --no_inline --no_code_motion --no_tbaa --no_clustering
#        --no_scheduling --debug --endian=little --cpu=Cortex-M0+ -e --fpu=None
#        --dlib_config H:\IAR7.3\arm\INC\c\DLib_Config_Normal.h -I
#        H:\智能车程序2018\电磁三轮――ZS\7.17\iar\..\device\H\ -I
#        H:\智能车程序2018\电磁三轮――ZS\7.17\iar\..\user\H\ -I
#        H:\智能车程序2018\电磁三轮――ZS\7.17\iar\..\system\ -I
#        H:\智能车程序2018\电磁三轮――ZS\7.17\iar\..\lib\H\ -I
#        H:\智能车程序2018\电磁三轮――ZS\7.17\iar\..\system\coreSupport\ -Ol
#    List file    =  
#        H:\智能车程序2018\电磁三轮――ZS\7.17\iar\KEA_128_RAM\List\outputdata.lst
#    Object file  =  
#        H:\智能车程序2018\电磁三轮――ZS\7.17\iar\KEA_128_RAM\Obj\outputdata.o
#
###############################################################################

H:\智能车程序2018\电磁三轮――ZS\7.17\device\C\outputdata.c
      1          /**
      2            ******************************************************************************
      3            * COPYRIGHT NOTICE
      4            * Copyright (c) 2018,华北科技学院
      5            * All rights reserved.
      6            *
      7            * 文件名称：    outputdata.c
      8            * 文件标识：
      9            * 摘    要：    VisualScope_V090206破解版 虚拟示波器 通信协议
     10            *
     11            * 当前版本：     1.0
     12            * 负    责：     韩志伟
     13            * 时    间：     2018年2月28日 17:05:44
     14            ******************************************************************************
     15            */
     16          #include "outputdata.h"
     17          #include "uart.h"
     18          

   \                                 In section .text, align 2, keep-with-next
     19          unsigned short CRC_CHECK(unsigned char *Buf, unsigned char CRC_CNT)
     20          {
   \                     CRC_CHECK: (+1)
   \   00000000   0xB530             PUSH     {R4,R5,LR}
   \   00000002   0x0002             MOVS     R2,R0
     21              unsigned short CRC_Temp;
     22              unsigned char i,j;
     23              CRC_Temp = 0xffff;
   \   00000004   0x....             LDR      R0,??DataTable0  ;; 0xffff
     24          
     25              for (i=0;i<CRC_CNT; i++){
   \   00000006   0x2300             MOVS     R3,#+0
   \   00000008   0xE000             B        ??CRC_CHECK_0
   \                     ??CRC_CHECK_1: (+1)
   \   0000000A   0x1C5B             ADDS     R3,R3,#+1
   \                     ??CRC_CHECK_0: (+1)
   \   0000000C   0xB2DB             UXTB     R3,R3
   \   0000000E   0xB2C9             UXTB     R1,R1
   \   00000010   0x428B             CMP      R3,R1
   \   00000012   0xD212             BCS      ??CRC_CHECK_2
     26                  CRC_Temp ^= Buf[i];
   \   00000014   0xB2DB             UXTB     R3,R3
   \   00000016   0x5CD4             LDRB     R4,[R2, R3]
   \   00000018   0x4060             EORS     R0,R0,R4
     27                  for (j=0;j<8;j++) {
   \   0000001A   0x2400             MOVS     R4,#+0
   \   0000001C   0xE002             B        ??CRC_CHECK_3
     28                      if (CRC_Temp & 0x01)
     29                          CRC_Temp = (CRC_Temp >>1 ) ^ 0xa001;
     30                      else
     31                          CRC_Temp = CRC_Temp >> 1;
   \                     ??CRC_CHECK_4: (+1)
   \   0000001E   0xB280             UXTH     R0,R0
   \   00000020   0x0840             LSRS     R0,R0,#+1
   \                     ??CRC_CHECK_5: (+1)
   \   00000022   0x1C64             ADDS     R4,R4,#+1
   \                     ??CRC_CHECK_3: (+1)
   \   00000024   0xB2E4             UXTB     R4,R4
   \   00000026   0x2C08             CMP      R4,#+8
   \   00000028   0xDAEF             BGE      ??CRC_CHECK_1
   \   0000002A   0x07C5             LSLS     R5,R0,#+31
   \   0000002C   0xD5F7             BPL      ??CRC_CHECK_4
   \   0000002E   0x0005             MOVS     R5,R0
   \   00000030   0xB2AD             UXTH     R5,R5
   \   00000032   0x086D             LSRS     R5,R5,#+1
   \   00000034   0x....             LDR      R0,??DataTable0_1  ;; 0xa001
   \   00000036   0x4068             EORS     R0,R0,R5
   \   00000038   0xE7F3             B        ??CRC_CHECK_5
     32                  }
     33              }
     34              return(CRC_Temp);
   \                     ??CRC_CHECK_2: (+1)
   \   0000003A   0xB280             UXTH     R0,R0
   \   0000003C   0xBD30             POP      {R4,R5,PC}       ;; return
     35          }
     36          
     37          
     38          /**
     39            * 简介
     40            *     发送函数
     41            * 注意
     42            *     x, y, z, w -> 通道 1 2 3 4
     43            */

   \                                 In section .text, align 2, keep-with-next
     44          void OutPut_Data(float x, float y, float z, float w)
     45          {
   \                     OutPut_Data: (+1)
   \   00000000   0xB5F1             PUSH     {R0,R4-R7,LR}
   \   00000002   0xB08C             SUB      SP,SP,#+48
   \   00000004   0x000E             MOVS     R6,R1
   \   00000006   0x0014             MOVS     R4,R2
   \   00000008   0x001D             MOVS     R5,R3
     46            int temp[4] = {0};
   \   0000000A   0xA803             ADD      R0,SP,#+12
   \   0000000C   0x2110             MOVS     R1,#+16
   \   0000000E   0x.... 0x....      BL       __aeabi_memclr4
     47            unsigned int temp1[4] = {0};
   \   00000012   0xA807             ADD      R0,SP,#+28
   \   00000014   0x2110             MOVS     R1,#+16
   \   00000016   0x.... 0x....      BL       __aeabi_memclr4
     48            unsigned char databuf[10] = {0};
   \   0000001A   0x4668             MOV      R0,SP
   \   0000001C   0x210C             MOVS     R1,#+12
   \   0000001E   0x.... 0x....      BL       __aeabi_memclr4
     49            unsigned char i;
     50            unsigned short CRC16 = 0;
   \   00000022   0x2700             MOVS     R7,#+0
     51          
     52            temp[0] = (int)x;
   \   00000024   0x980C             LDR      R0,[SP, #+48]
   \   00000026   0x.... 0x....      BL       __aeabi_f2iz
   \   0000002A   0x9003             STR      R0,[SP, #+12]
     53            temp[1] = (int)y;
   \   0000002C   0x0030             MOVS     R0,R6
   \   0000002E   0x.... 0x....      BL       __aeabi_f2iz
   \   00000032   0x9004             STR      R0,[SP, #+16]
     54            temp[2] = (int)z;
   \   00000034   0x0020             MOVS     R0,R4
   \   00000036   0x.... 0x....      BL       __aeabi_f2iz
   \   0000003A   0x9005             STR      R0,[SP, #+20]
     55            temp[3] = (int)w;
   \   0000003C   0x0028             MOVS     R0,R5
   \   0000003E   0x.... 0x....      BL       __aeabi_f2iz
   \   00000042   0x9006             STR      R0,[SP, #+24]
     56          
     57            for(i=0;i<4;i++)
   \   00000044   0x2400             MOVS     R4,#+0
   \   00000046   0xE00A             B        ??OutPut_Data_0
     58             {
     59              temp1[i] = (unsigned int)temp[i];
   \                     ??OutPut_Data_1: (+1)
   \   00000048   0xA803             ADD      R0,SP,#+12
   \   0000004A   0xB2E4             UXTB     R4,R4
   \   0000004C   0x2104             MOVS     R1,#+4
   \   0000004E   0x4361             MULS     R1,R4,R1
   \   00000050   0x5840             LDR      R0,[R0, R1]
   \   00000052   0xA907             ADD      R1,SP,#+28
   \   00000054   0xB2E4             UXTB     R4,R4
   \   00000056   0x2204             MOVS     R2,#+4
   \   00000058   0x4362             MULS     R2,R4,R2
   \   0000005A   0x5088             STR      R0,[R1, R2]
     60             }
   \   0000005C   0x1C64             ADDS     R4,R4,#+1
   \                     ??OutPut_Data_0: (+1)
   \   0000005E   0xB2E4             UXTB     R4,R4
   \   00000060   0x2C04             CMP      R4,#+4
   \   00000062   0xDBF1             BLT      ??OutPut_Data_1
     61          
     62            for(i=0;i<4;i++)
   \   00000064   0x2400             MOVS     R4,#+0
   \   00000066   0xE01A             B        ??OutPut_Data_2
     63            {
     64              databuf[i*2]   = (unsigned char)(temp1[i]%256);
   \                     ??OutPut_Data_3: (+1)
   \   00000068   0xA807             ADD      R0,SP,#+28
   \   0000006A   0xB2E4             UXTB     R4,R4
   \   0000006C   0x2104             MOVS     R1,#+4
   \   0000006E   0x4361             MULS     R1,R4,R1
   \   00000070   0x5840             LDR      R0,[R0, R1]
   \   00000072   0x2180             MOVS     R1,#+128
   \   00000074   0x0049             LSLS     R1,R1,#+1        ;; #+256
   \   00000076   0x.... 0x....      BL       __aeabi_uidivmod
   \   0000007A   0x4668             MOV      R0,SP
   \   0000007C   0xB2E4             UXTB     R4,R4
   \   0000007E   0x2202             MOVS     R2,#+2
   \   00000080   0x4362             MULS     R2,R4,R2
   \   00000082   0x5481             STRB     R1,[R0, R2]
     65              databuf[i*2+1] = (unsigned char)(temp1[i]/256);
   \   00000084   0xA807             ADD      R0,SP,#+28
   \   00000086   0xB2E4             UXTB     R4,R4
   \   00000088   0x2104             MOVS     R1,#+4
   \   0000008A   0x4361             MULS     R1,R4,R1
   \   0000008C   0x5840             LDR      R0,[R0, R1]
   \   0000008E   0x0A00             LSRS     R0,R0,#+8
   \   00000090   0x4669             MOV      R1,SP
   \   00000092   0xB2E4             UXTB     R4,R4
   \   00000094   0x2202             MOVS     R2,#+2
   \   00000096   0x4362             MULS     R2,R4,R2
   \   00000098   0x1889             ADDS     R1,R1,R2
   \   0000009A   0x7048             STRB     R0,[R1, #+1]
     66            }
   \   0000009C   0x1C64             ADDS     R4,R4,#+1
   \                     ??OutPut_Data_2: (+1)
   \   0000009E   0xB2E4             UXTB     R4,R4
   \   000000A0   0x2C04             CMP      R4,#+4
   \   000000A2   0xDBE1             BLT      ??OutPut_Data_3
     67          
     68            CRC16 = CRC_CHECK(databuf,8);
   \   000000A4   0x2108             MOVS     R1,#+8
   \   000000A6   0x4668             MOV      R0,SP
   \   000000A8   0x.... 0x....      BL       CRC_CHECK
   \   000000AC   0x0007             MOVS     R7,R0
     69            databuf[8] = CRC16%256;
   \   000000AE   0xB2BF             UXTH     R7,R7
   \   000000B0   0x0038             MOVS     R0,R7
   \   000000B2   0x2180             MOVS     R1,#+128
   \   000000B4   0x0049             LSLS     R1,R1,#+1        ;; #+256
   \   000000B6   0x.... 0x....      BL       __aeabi_idivmod
   \   000000BA   0x4668             MOV      R0,SP
   \   000000BC   0x7201             STRB     R1,[R0, #+8]
     70            databuf[9] = CRC16/256;
   \   000000BE   0xB2BF             UXTH     R7,R7
   \   000000C0   0x0038             MOVS     R0,R7
   \   000000C2   0x2180             MOVS     R1,#+128
   \   000000C4   0x0049             LSLS     R1,R1,#+1        ;; #+256
   \   000000C6   0x.... 0x....      BL       __aeabi_idiv
   \   000000CA   0x4669             MOV      R1,SP
   \   000000CC   0x7248             STRB     R0,[R1, #+9]
     71          
     72            for(i=0;i<10;i++)
   \   000000CE   0x2400             MOVS     R4,#+0
   \   000000D0   0xE005             B        ??OutPut_Data_4
     73              UART_Send_Byte((char)databuf[i]);
   \                     ??OutPut_Data_5: (+1)
   \   000000D2   0x4668             MOV      R0,SP
   \   000000D4   0xB2E4             UXTB     R4,R4
   \   000000D6   0x5D00             LDRB     R0,[R0, R4]
   \   000000D8   0x.... 0x....      BL       UART_Send_Byte
   \   000000DC   0x1C64             ADDS     R4,R4,#+1
   \                     ??OutPut_Data_4: (+1)
   \   000000DE   0xB2E4             UXTB     R4,R4
   \   000000E0   0x2C0A             CMP      R4,#+10
   \   000000E2   0xDBF6             BLT      ??OutPut_Data_5
     74          }
   \   000000E4   0xB00D             ADD      SP,SP,#+52
   \   000000E6   0xBDF0             POP      {R4-R7,PC}       ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable0:
   \   00000000   0x0000FFFF         DC32     0xffff

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable0_1:
   \   00000000   0x0000A001         DC32     0xa001

   \                                 In section .rodata, align 4
   \   00000000   0x00000000         DC32 0, 0, 0, 0
   \              0x00000000   
   \              0x00000000   
   \              0x00000000   

   \                                 In section .rodata, align 4
   \   00000000   0x00000000         DC32 0, 0, 0, 0
   \              0x00000000   
   \              0x00000000   
   \              0x00000000   

   \                                 In section .rodata, align 4
   \   00000000   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      12   CRC_CHECK
      72   OutPut_Data
        72   -> CRC_CHECK
        72   -> UART_Send_Byte
        72   -> __aeabi_f2iz
        72   -> __aeabi_memclr4
        72 __aeabi_idiv
        72 __aeabi_idivmod
        72 __aeabi_uidivmod


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable0
       4  ??DataTable0_1
      16  ?_0
      16  ?_1
      12  ?_2
      62  CRC_CHECK
     232  OutPut_Data

 
  44 bytes in section .rodata
 302 bytes in section .text
 
 302 bytes of CODE  memory
  44 bytes of CONST memory

Errors: none
Warnings: none
