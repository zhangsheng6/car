###############################################################################
#
# IAR ANSI C/C++ Compiler V7.30.3.8024/W32 for ARM        17/Jul/2018  09:40:41
# Copyright 1999-2014 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  H:\智能车程序2018\电磁三轮――ZS\7.17\device\C\lcd.c
#    Command line =  
#        H:\智能车程序2018\电磁三轮――ZS\7.17\device\C\lcd.c -D IAR -D
#        TWR_K60N512 -D _DLIB_FILE_DESCRIPTOR -lCN
#        H:\智能车程序2018\电磁三轮――ZS\7.17\iar\KEA_128_RAM\List\ -lB
#        H:\智能车程序2018\电磁三轮――ZS\7.17\iar\KEA_128_RAM\List\ -o
#        H:\智能车程序2018\电磁三轮――ZS\7.17\iar\KEA_128_RAM\Obj\ --no_cse
#        --no_unroll --no_inline --no_code_motion --no_tbaa --no_clustering
#        --no_scheduling --debug --endian=little --cpu=Cortex-M0+ -e --fpu=None
#        --dlib_config H:\IAR7.3\arm\INC\c\DLib_Config_Normal.h -I
#        H:\智能车程序2018\电磁三轮――ZS\7.17\iar\..\device\H\ -I
#        H:\智能车程序2018\电磁三轮――ZS\7.17\iar\..\user\H\ -I
#        H:\智能车程序2018\电磁三轮――ZS\7.17\iar\..\system\ -I
#        H:\智能车程序2018\电磁三轮――ZS\7.17\iar\..\lib\H\ -I
#        H:\智能车程序2018\电磁三轮――ZS\7.17\iar\..\system\coreSupport\ -Ol
#    List file    =  
#        H:\智能车程序2018\电磁三轮――ZS\7.17\iar\KEA_128_RAM\List\lcd.lst
#    Object file  =  
#        H:\智能车程序2018\电磁三轮――ZS\7.17\iar\KEA_128_RAM\Obj\lcd.o
#
###############################################################################

H:\智能车程序2018\电磁三轮――ZS\7.17\device\C\lcd.c
      1          /**
      2            ******************************************************************************
      3            * COPYRIGHT NOTICE
      4            * Copyright (c) 2018,华北科技学院
      5            * All rights reserved.
      6            *
      7            * 文件名称：    lcd.c
      8            * 文件标识：
      9            * 摘    要：    LCD显示
     10            *
     11            * 当前版本：     1.0
     12            * 负    责：     韩志伟
     13            * 时    间：     2018年5月4日 20:54:40
     14            ******************************************************************************
     15            */
     16          
     17          #include "lcd.h"
     18          #include "oled.h"
     19          

   \                                 In section .bss, align 2
     20          uint16 LCD_pen = BLACK;//笔颜色
   \                     LCD_pen:
   \   00000000                      DS8 2

   \                                 In section .data, align 2
     21          uint16 LCD_backGround = GREEN;//背景颜色
   \                     LCD_backGround:
   \   00000000   0x07E0             DC16 2016
     22          
     23          /**
     24            * 简介
     25            *    写16位数据用
     26            * 参数
     27            */

   \                                 In section .text, align 2, keep-with-next
     28          void  LCD_WriteData_16Bit(uint16 dat)	//向液晶屏写一个16位数据
     29          {
   \                     LCD_WriteData_16Bit: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
     30          	OLED_WrDat((uint8)(dat>>8));
   \   00000004   0x0020             MOVS     R0,R4
   \   00000006   0xB280             UXTH     R0,R0
   \   00000008   0x0A00             LSRS     R0,R0,#+8
   \   0000000A   0xB2C0             UXTB     R0,R0
   \   0000000C   0x.... 0x....      BL       OLED_WrDat
     31          	OLED_WrDat((uint8)dat);
   \   00000010   0x0020             MOVS     R0,R4
   \   00000012   0xB2C0             UXTB     R0,R0
   \   00000014   0x.... 0x....      BL       OLED_WrDat
     32          }
   \   00000018   0xBD10             POP      {R4,PC}          ;; return
     33          
     34          
     35          /**
     36            * 简介
     37            *    液晶坐标设置
     38            * 参数
     39            *      x_start     	坐标x方向的起点
     40            *      y_start     	坐标y方向的起点
     41            *      x_end       	坐标x方向的终点
     42            *      y_end       	坐标y方向的终点
     43            * 注意
     44            *     xy被我翻转了 --- han.4.5
     45            */

   \                                 In section .text, align 2, keep-with-next
     46          void Lcd_SetRegion(uint8 x_start,uint8 y_start,uint8 x_end,uint8 y_end)
     47          {
   \                     Lcd_SetRegion: (+1)
   \   00000000   0xB5F8             PUSH     {R3-R7,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000F             MOVS     R7,R1
   \   00000006   0x0015             MOVS     R5,R2
   \   00000008   0x001E             MOVS     R6,R3
     48              OLED_WrCmd(0x2a);//y轴
   \   0000000A   0x202A             MOVS     R0,#+42
   \   0000000C   0x.... 0x....      BL       OLED_WrCmd
     49          	OLED_WrDat(0x00);
   \   00000010   0x2000             MOVS     R0,#+0
   \   00000012   0x.... 0x....      BL       OLED_WrDat
     50          	OLED_WrDat(y_start+1);
   \   00000016   0x1C7F             ADDS     R7,R7,#+1
   \   00000018   0x0038             MOVS     R0,R7
   \   0000001A   0xB2C0             UXTB     R0,R0
   \   0000001C   0x.... 0x....      BL       OLED_WrDat
     51          	OLED_WrDat(0x00);
   \   00000020   0x2000             MOVS     R0,#+0
   \   00000022   0x.... 0x....      BL       OLED_WrDat
     52          	OLED_WrDat(y_end+1);
   \   00000026   0x1C76             ADDS     R6,R6,#+1
   \   00000028   0x0030             MOVS     R0,R6
   \   0000002A   0xB2C0             UXTB     R0,R0
   \   0000002C   0x.... 0x....      BL       OLED_WrDat
     53          
     54          	OLED_WrCmd(0x2b);//x轴
   \   00000030   0x202B             MOVS     R0,#+43
   \   00000032   0x.... 0x....      BL       OLED_WrCmd
     55          	OLED_WrDat(0x00);
   \   00000036   0x2000             MOVS     R0,#+0
   \   00000038   0x.... 0x....      BL       OLED_WrDat
     56          	OLED_WrDat(x_start+2);
   \   0000003C   0x1CA4             ADDS     R4,R4,#+2
   \   0000003E   0x0020             MOVS     R0,R4
   \   00000040   0xB2C0             UXTB     R0,R0
   \   00000042   0x.... 0x....      BL       OLED_WrDat
     57          	OLED_WrDat(0x00);
   \   00000046   0x2000             MOVS     R0,#+0
   \   00000048   0x.... 0x....      BL       OLED_WrDat
     58          	OLED_WrDat(x_end+2);
   \   0000004C   0x1CAD             ADDS     R5,R5,#+2
   \   0000004E   0x0028             MOVS     R0,R5
   \   00000050   0xB2C0             UXTB     R0,R0
   \   00000052   0x.... 0x....      BL       OLED_WrDat
     59          
     60          	OLED_WrCmd(0x2c);
   \   00000056   0x202C             MOVS     R0,#+44
   \   00000058   0x.... 0x....      BL       OLED_WrCmd
     61          }
   \   0000005C   0xBDF1             POP      {R0,R4-R7,PC}    ;; return
     62          
     63          /**
     64            * 简介
     65            *    液晶清屏函数
     66            * 参数
     67            *      color     		颜色设置
     68            */

   \                                 In section .text, align 2, keep-with-next
     69          void dsp_single_colour(int color)
     70          {
   \                     dsp_single_colour: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0x0004             MOVS     R4,R0
     71           	uint8 i,j;
     72          	Lcd_SetRegion(0,0,TFT_X_MAX-1,TFT_Y_MAX-1);
   \   00000004   0x239F             MOVS     R3,#+159
   \   00000006   0x227F             MOVS     R2,#+127
   \   00000008   0x2100             MOVS     R1,#+0
   \   0000000A   0x2000             MOVS     R0,#+0
   \   0000000C   0x.... 0x....      BL       Lcd_SetRegion
     73           	for (i=0;i<TFT_X_MAX;i++)
   \   00000010   0x2500             MOVS     R5,#+0
   \   00000012   0xE008             B        ??dsp_single_colour_0
     74              	for (j=0;j<TFT_Y_MAX;j++)
     75                  	LCD_WriteData_16Bit(color);
   \                     ??dsp_single_colour_1: (+1)
   \   00000014   0x0020             MOVS     R0,R4
   \   00000016   0xB280             UXTH     R0,R0
   \   00000018   0x.... 0x....      BL       LCD_WriteData_16Bit
   \   0000001C   0x1C76             ADDS     R6,R6,#+1
   \                     ??dsp_single_colour_2: (+1)
   \   0000001E   0xB2F6             UXTB     R6,R6
   \   00000020   0x2EA0             CMP      R6,#+160
   \   00000022   0xDBF7             BLT      ??dsp_single_colour_1
   \   00000024   0x1C6D             ADDS     R5,R5,#+1
   \                     ??dsp_single_colour_0: (+1)
   \   00000026   0xB2ED             UXTB     R5,R5
   \   00000028   0x2D80             CMP      R5,#+128
   \   0000002A   0xDA01             BGE      ??dsp_single_colour_3
   \   0000002C   0x2600             MOVS     R6,#+0
   \   0000002E   0xE7F6             B        ??dsp_single_colour_2
     76          }
   \                     ??dsp_single_colour_3: (+1)
   \   00000030   0xBD70             POP      {R4-R6,PC}       ;; return
     77          
     78          
     79          /**
     80            * 简介
     81            *     LCD初始化
     82            * 注意
     83            */

   \                                 In section .text, align 2, keep-with-next
     84          void LCD_Init(void)
     85          {
   \                     LCD_Init: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
     86              spi_init(SPI_PORT, USE_PCS, MASTER, 20*1000*1000);
   \   00000002   0x....             LDR      R3,??DataTable1  ;; 0x1312d00
   \   00000004   0x2200             MOVS     R2,#+0
   \   00000006   0x2101             MOVS     R1,#+1
   \   00000008   0x2001             MOVS     R0,#+1
   \   0000000A   0x.... 0x....      BL       spi_init
     87          //    DDRCS;
     88              DDRDC;
   \   0000000E   0x2201             MOVS     R2,#+1
   \   00000010   0x2101             MOVS     R1,#+1
   \   00000012   0x2046             MOVS     R0,#+70
   \   00000014   0x.... 0x....      BL       GpioInit
     89          //    DDRSDIN;
     90          //    DDROSCLK;
     91              DDRRES;
   \   00000018   0x2201             MOVS     R2,#+1
   \   0000001A   0x2101             MOVS     R1,#+1
   \   0000001C   0x2045             MOVS     R0,#+69
   \   0000001E   0x.... 0x....      BL       GpioInit
     92          
     93              CL_RES;
   \   00000022   0x2100             MOVS     R1,#+0
   \   00000024   0x2045             MOVS     R0,#+69
   \   00000026   0x.... 0x....      BL       GpioSet
     94              SystickDelayMs(5);
   \   0000002A   0x2005             MOVS     R0,#+5
   \   0000002C   0x.... 0x....      BL       SystickDelayMs
     95              RES;
   \   00000030   0x2101             MOVS     R1,#+1
   \   00000032   0x2045             MOVS     R0,#+69
   \   00000034   0x.... 0x....      BL       GpioSet
     96              SystickDelayMs(1);
   \   00000038   0x2001             MOVS     R0,#+1
   \   0000003A   0x.... 0x....      BL       SystickDelayMs
     97          
     98              //LCD Init For 1.44Inch LCD Panel with ST7735R.
     99          	OLED_WrCmd(0x11);//Sleep exit
   \   0000003E   0x2011             MOVS     R0,#+17
   \   00000040   0x.... 0x....      BL       OLED_WrCmd
    100              SystickDelayMs(5);
   \   00000044   0x2005             MOVS     R0,#+5
   \   00000046   0x.... 0x....      BL       SystickDelayMs
    101          
    102          	//ST7735R Frame Rate
    103          	OLED_WrCmd(0xB1);
   \   0000004A   0x20B1             MOVS     R0,#+177
   \   0000004C   0x.... 0x....      BL       OLED_WrCmd
    104          	OLED_WrDat(0x01);
   \   00000050   0x2001             MOVS     R0,#+1
   \   00000052   0x.... 0x....      BL       OLED_WrDat
    105          	OLED_WrDat(0x2C);
   \   00000056   0x202C             MOVS     R0,#+44
   \   00000058   0x.... 0x....      BL       OLED_WrDat
    106          	OLED_WrDat(0x2D);
   \   0000005C   0x202D             MOVS     R0,#+45
   \   0000005E   0x.... 0x....      BL       OLED_WrDat
    107          
    108          	OLED_WrCmd(0xB2);
   \   00000062   0x20B2             MOVS     R0,#+178
   \   00000064   0x.... 0x....      BL       OLED_WrCmd
    109          	OLED_WrDat(0x01);
   \   00000068   0x2001             MOVS     R0,#+1
   \   0000006A   0x.... 0x....      BL       OLED_WrDat
    110          	OLED_WrDat(0x2C);
   \   0000006E   0x202C             MOVS     R0,#+44
   \   00000070   0x.... 0x....      BL       OLED_WrDat
    111          	OLED_WrDat(0x2D);
   \   00000074   0x202D             MOVS     R0,#+45
   \   00000076   0x.... 0x....      BL       OLED_WrDat
    112          
    113          	OLED_WrCmd(0xB3);
   \   0000007A   0x20B3             MOVS     R0,#+179
   \   0000007C   0x.... 0x....      BL       OLED_WrCmd
    114          	OLED_WrDat(0x01);
   \   00000080   0x2001             MOVS     R0,#+1
   \   00000082   0x.... 0x....      BL       OLED_WrDat
    115          	OLED_WrDat(0x2C);
   \   00000086   0x202C             MOVS     R0,#+44
   \   00000088   0x.... 0x....      BL       OLED_WrDat
    116          	OLED_WrDat(0x2D);
   \   0000008C   0x202D             MOVS     R0,#+45
   \   0000008E   0x.... 0x....      BL       OLED_WrDat
    117          	OLED_WrDat(0x01);
   \   00000092   0x2001             MOVS     R0,#+1
   \   00000094   0x.... 0x....      BL       OLED_WrDat
    118          	OLED_WrDat(0x2C);
   \   00000098   0x202C             MOVS     R0,#+44
   \   0000009A   0x.... 0x....      BL       OLED_WrDat
    119          	OLED_WrDat(0x2D);
   \   0000009E   0x202D             MOVS     R0,#+45
   \   000000A0   0x.... 0x....      BL       OLED_WrDat
    120          
    121          	OLED_WrCmd(0xB4); //Column inversion
   \   000000A4   0x20B4             MOVS     R0,#+180
   \   000000A6   0x.... 0x....      BL       OLED_WrCmd
    122          	OLED_WrDat(0x07);
   \   000000AA   0x2007             MOVS     R0,#+7
   \   000000AC   0x.... 0x....      BL       OLED_WrDat
    123          
    124          	//ST7735R Power Sequence
    125          	OLED_WrCmd(0xC0);
   \   000000B0   0x20C0             MOVS     R0,#+192
   \   000000B2   0x.... 0x....      BL       OLED_WrCmd
    126          	OLED_WrDat(0xA2);
   \   000000B6   0x20A2             MOVS     R0,#+162
   \   000000B8   0x.... 0x....      BL       OLED_WrDat
    127          	OLED_WrDat(0x02);
   \   000000BC   0x2002             MOVS     R0,#+2
   \   000000BE   0x.... 0x....      BL       OLED_WrDat
    128          	OLED_WrDat(0x84);
   \   000000C2   0x2084             MOVS     R0,#+132
   \   000000C4   0x.... 0x....      BL       OLED_WrDat
    129          	OLED_WrCmd(0xC1);
   \   000000C8   0x20C1             MOVS     R0,#+193
   \   000000CA   0x.... 0x....      BL       OLED_WrCmd
    130          	OLED_WrDat(0xC5);
   \   000000CE   0x20C5             MOVS     R0,#+197
   \   000000D0   0x.... 0x....      BL       OLED_WrDat
    131          
    132          	OLED_WrCmd(0xC2);
   \   000000D4   0x20C2             MOVS     R0,#+194
   \   000000D6   0x.... 0x....      BL       OLED_WrCmd
    133          	OLED_WrDat(0x0A);
   \   000000DA   0x200A             MOVS     R0,#+10
   \   000000DC   0x.... 0x....      BL       OLED_WrDat
    134          	OLED_WrDat(0x00);
   \   000000E0   0x2000             MOVS     R0,#+0
   \   000000E2   0x.... 0x....      BL       OLED_WrDat
    135          
    136          	OLED_WrCmd(0xC3);
   \   000000E6   0x20C3             MOVS     R0,#+195
   \   000000E8   0x.... 0x....      BL       OLED_WrCmd
    137          	OLED_WrDat(0x8A);
   \   000000EC   0x208A             MOVS     R0,#+138
   \   000000EE   0x.... 0x....      BL       OLED_WrDat
    138          	OLED_WrDat(0x2A);
   \   000000F2   0x202A             MOVS     R0,#+42
   \   000000F4   0x.... 0x....      BL       OLED_WrDat
    139          	OLED_WrCmd(0xC4);
   \   000000F8   0x20C4             MOVS     R0,#+196
   \   000000FA   0x.... 0x....      BL       OLED_WrCmd
    140          	OLED_WrDat(0x8A);
   \   000000FE   0x208A             MOVS     R0,#+138
   \   00000100   0x.... 0x....      BL       OLED_WrDat
    141          	OLED_WrDat(0xEE);
   \   00000104   0x20EE             MOVS     R0,#+238
   \   00000106   0x.... 0x....      BL       OLED_WrDat
    142          
    143          	OLED_WrCmd(0xC5); //VCOM
   \   0000010A   0x20C5             MOVS     R0,#+197
   \   0000010C   0x.... 0x....      BL       OLED_WrCmd
    144          	OLED_WrDat(0x0E);
   \   00000110   0x200E             MOVS     R0,#+14
   \   00000112   0x.... 0x....      BL       OLED_WrDat
    145          
    146          	OLED_WrCmd(0x36); //MX, MY, RGB mode
   \   00000116   0x2036             MOVS     R0,#+54
   \   00000118   0x.... 0x....      BL       OLED_WrCmd
    147          	OLED_WrDat(0xe0); //0xc0 --- L->R U->D
   \   0000011C   0x20E0             MOVS     R0,#+224
   \   0000011E   0x.... 0x....      BL       OLED_WrDat
    148          
    149          	//ST7735R Gamma Sequence
    150          	OLED_WrCmd(0xe0);
   \   00000122   0x20E0             MOVS     R0,#+224
   \   00000124   0x.... 0x....      BL       OLED_WrCmd
    151          	OLED_WrDat(0x0f);
   \   00000128   0x200F             MOVS     R0,#+15
   \   0000012A   0x.... 0x....      BL       OLED_WrDat
    152          	OLED_WrDat(0x1a);
   \   0000012E   0x201A             MOVS     R0,#+26
   \   00000130   0x.... 0x....      BL       OLED_WrDat
    153          	OLED_WrDat(0x0f);
   \   00000134   0x200F             MOVS     R0,#+15
   \   00000136   0x.... 0x....      BL       OLED_WrDat
    154          	OLED_WrDat(0x18);
   \   0000013A   0x2018             MOVS     R0,#+24
   \   0000013C   0x.... 0x....      BL       OLED_WrDat
    155          	OLED_WrDat(0x2f);
   \   00000140   0x202F             MOVS     R0,#+47
   \   00000142   0x.... 0x....      BL       OLED_WrDat
    156          	OLED_WrDat(0x28);
   \   00000146   0x2028             MOVS     R0,#+40
   \   00000148   0x.... 0x....      BL       OLED_WrDat
    157          	OLED_WrDat(0x20);
   \   0000014C   0x2020             MOVS     R0,#+32
   \   0000014E   0x.... 0x....      BL       OLED_WrDat
    158          	OLED_WrDat(0x22);
   \   00000152   0x2022             MOVS     R0,#+34
   \   00000154   0x.... 0x....      BL       OLED_WrDat
    159          	OLED_WrDat(0x1f);
   \   00000158   0x201F             MOVS     R0,#+31
   \   0000015A   0x.... 0x....      BL       OLED_WrDat
    160          	OLED_WrDat(0x1b);
   \   0000015E   0x201B             MOVS     R0,#+27
   \   00000160   0x.... 0x....      BL       OLED_WrDat
    161          	OLED_WrDat(0x23);
   \   00000164   0x2023             MOVS     R0,#+35
   \   00000166   0x.... 0x....      BL       OLED_WrDat
    162          	OLED_WrDat(0x37);
   \   0000016A   0x2037             MOVS     R0,#+55
   \   0000016C   0x.... 0x....      BL       OLED_WrDat
    163          	OLED_WrDat(0x00);
   \   00000170   0x2000             MOVS     R0,#+0
   \   00000172   0x.... 0x....      BL       OLED_WrDat
    164          	OLED_WrDat(0x07);
   \   00000176   0x2007             MOVS     R0,#+7
   \   00000178   0x.... 0x....      BL       OLED_WrDat
    165          	OLED_WrDat(0x02);
   \   0000017C   0x2002             MOVS     R0,#+2
   \   0000017E   0x.... 0x....      BL       OLED_WrDat
    166          	OLED_WrDat(0x10);
   \   00000182   0x2010             MOVS     R0,#+16
   \   00000184   0x.... 0x....      BL       OLED_WrDat
    167          
    168          	OLED_WrCmd(0xe1);
   \   00000188   0x20E1             MOVS     R0,#+225
   \   0000018A   0x.... 0x....      BL       OLED_WrCmd
    169          	OLED_WrDat(0x0f);
   \   0000018E   0x200F             MOVS     R0,#+15
   \   00000190   0x.... 0x....      BL       OLED_WrDat
    170          	OLED_WrDat(0x1b);
   \   00000194   0x201B             MOVS     R0,#+27
   \   00000196   0x.... 0x....      BL       OLED_WrDat
    171          	OLED_WrDat(0x0f);
   \   0000019A   0x200F             MOVS     R0,#+15
   \   0000019C   0x.... 0x....      BL       OLED_WrDat
    172          	OLED_WrDat(0x17);
   \   000001A0   0x2017             MOVS     R0,#+23
   \   000001A2   0x.... 0x....      BL       OLED_WrDat
    173          	OLED_WrDat(0x33);
   \   000001A6   0x2033             MOVS     R0,#+51
   \   000001A8   0x.... 0x....      BL       OLED_WrDat
    174          	OLED_WrDat(0x2c);
   \   000001AC   0x202C             MOVS     R0,#+44
   \   000001AE   0x.... 0x....      BL       OLED_WrDat
    175          	OLED_WrDat(0x29);
   \   000001B2   0x2029             MOVS     R0,#+41
   \   000001B4   0x.... 0x....      BL       OLED_WrDat
    176          	OLED_WrDat(0x2e);
   \   000001B8   0x202E             MOVS     R0,#+46
   \   000001BA   0x.... 0x....      BL       OLED_WrDat
    177          	OLED_WrDat(0x30);
   \   000001BE   0x2030             MOVS     R0,#+48
   \   000001C0   0x.... 0x....      BL       OLED_WrDat
    178          	OLED_WrDat(0x30);
   \   000001C4   0x2030             MOVS     R0,#+48
   \   000001C6   0x.... 0x....      BL       OLED_WrDat
    179          	OLED_WrDat(0x39);
   \   000001CA   0x2039             MOVS     R0,#+57
   \   000001CC   0x.... 0x....      BL       OLED_WrDat
    180          	OLED_WrDat(0x3f);
   \   000001D0   0x203F             MOVS     R0,#+63
   \   000001D2   0x.... 0x....      BL       OLED_WrDat
    181          	OLED_WrDat(0x00);
   \   000001D6   0x2000             MOVS     R0,#+0
   \   000001D8   0x.... 0x....      BL       OLED_WrDat
    182          	OLED_WrDat(0x07);
   \   000001DC   0x2007             MOVS     R0,#+7
   \   000001DE   0x.... 0x....      BL       OLED_WrDat
    183          	OLED_WrDat(0x03);
   \   000001E2   0x2003             MOVS     R0,#+3
   \   000001E4   0x.... 0x....      BL       OLED_WrDat
    184          	OLED_WrDat(0x10);
   \   000001E8   0x2010             MOVS     R0,#+16
   \   000001EA   0x.... 0x....      BL       OLED_WrDat
    185          
    186          	OLED_WrCmd(0x2a);
   \   000001EE   0x202A             MOVS     R0,#+42
   \   000001F0   0x.... 0x....      BL       OLED_WrCmd
    187          	OLED_WrDat(0x00);
   \   000001F4   0x2000             MOVS     R0,#+0
   \   000001F6   0x.... 0x....      BL       OLED_WrDat
    188          	OLED_WrDat(0x00+2);
   \   000001FA   0x2002             MOVS     R0,#+2
   \   000001FC   0x.... 0x....      BL       OLED_WrDat
    189          	OLED_WrDat(0x00);
   \   00000200   0x2000             MOVS     R0,#+0
   \   00000202   0x.... 0x....      BL       OLED_WrDat
    190          	OLED_WrDat(0x80+2);
   \   00000206   0x2082             MOVS     R0,#+130
   \   00000208   0x.... 0x....      BL       OLED_WrDat
    191          
    192          	OLED_WrCmd(0x2b);
   \   0000020C   0x202B             MOVS     R0,#+43
   \   0000020E   0x.... 0x....      BL       OLED_WrCmd
    193          	OLED_WrDat(0x00);
   \   00000212   0x2000             MOVS     R0,#+0
   \   00000214   0x.... 0x....      BL       OLED_WrDat
    194          	OLED_WrDat(0x00+3);
   \   00000218   0x2003             MOVS     R0,#+3
   \   0000021A   0x.... 0x....      BL       OLED_WrDat
    195          	OLED_WrDat(0x00);
   \   0000021E   0x2000             MOVS     R0,#+0
   \   00000220   0x.... 0x....      BL       OLED_WrDat
    196          	OLED_WrDat(0x80+3);
   \   00000224   0x2083             MOVS     R0,#+131
   \   00000226   0x.... 0x....      BL       OLED_WrDat
    197          
    198          	OLED_WrCmd(0xF0); //Enable test command
   \   0000022A   0x20F0             MOVS     R0,#+240
   \   0000022C   0x.... 0x....      BL       OLED_WrCmd
    199          	OLED_WrDat(0x01);
   \   00000230   0x2001             MOVS     R0,#+1
   \   00000232   0x.... 0x....      BL       OLED_WrDat
    200          	OLED_WrCmd(0xF6); //Disable ram power save mode
   \   00000236   0x20F6             MOVS     R0,#+246
   \   00000238   0x.... 0x....      BL       OLED_WrCmd
    201          	OLED_WrDat(0x00);
   \   0000023C   0x2000             MOVS     R0,#+0
   \   0000023E   0x.... 0x....      BL       OLED_WrDat
    202          
    203          	OLED_WrCmd(0x3A); //65k mode
   \   00000242   0x203A             MOVS     R0,#+58
   \   00000244   0x.... 0x....      BL       OLED_WrCmd
    204          	OLED_WrDat(0x05);
   \   00000248   0x2005             MOVS     R0,#+5
   \   0000024A   0x.... 0x....      BL       OLED_WrDat
    205          
    206          	OLED_WrCmd(0x29);//Display on
   \   0000024E   0x2029             MOVS     R0,#+41
   \   00000250   0x.... 0x....      BL       OLED_WrCmd
    207          
    208              dsp_single_colour(LCD_backGround);
   \   00000254   0x....             LDR      R0,??DataTable3
   \   00000256   0x8800             LDRH     R0,[R0, #+0]
   \   00000258   0x.... 0x....      BL       dsp_single_colour
    209          }
   \   0000025C   0xBD01             POP      {R0,PC}          ;; return
    210          
    211          /**
    212            * 简介
    213            *    显示0608字符
    214            * 参数
    215            *     x 0~127，若最高位置1，则不进行定位
    216            */

   \                                 In section .text, align 2, keep-with-next
    217          void LCD_showChar0608(uint16 x,uint16 y,uint8 dat)
    218          {
   \                     LCD_showChar0608: (+1)
   \   00000000   0xB5F8             PUSH     {R3-R7,LR}
   \   00000002   0x0017             MOVS     R7,R2
    219          	uint8 i,j;
    220          	uint8 temp;
    221          
    222              if (!(x&0x80))    Lcd_SetRegion(x,y,x+5,y+7);
   \   00000004   0x0602             LSLS     R2,R0,#+24
   \   00000006   0xD409             BMI      ??LCD_showChar0608_0
   \   00000008   0x000B             MOVS     R3,R1
   \   0000000A   0x1DDB             ADDS     R3,R3,#+7
   \   0000000C   0xB2DB             UXTB     R3,R3
   \   0000000E   0x0002             MOVS     R2,R0
   \   00000010   0x1D52             ADDS     R2,R2,#+5
   \   00000012   0xB2D2             UXTB     R2,R2
   \   00000014   0xB2C9             UXTB     R1,R1
   \   00000016   0xB2C0             UXTB     R0,R0
   \   00000018   0x.... 0x....      BL       Lcd_SetRegion
    223          	for(i=0; i<6; i++)
   \                     ??LCD_showChar0608_0: (+1)
   \   0000001C   0x2400             MOVS     R4,#+0
   \   0000001E   0xE000             B        ??LCD_showChar0608_1
   \                     ??LCD_showChar0608_2: (+1)
   \   00000020   0x1C64             ADDS     R4,R4,#+1
   \                     ??LCD_showChar0608_1: (+1)
   \   00000022   0xB2E4             UXTB     R4,R4
   \   00000024   0x2C06             CMP      R4,#+6
   \   00000026   0xDA1B             BGE      ??LCD_showChar0608_3
    224          	{
    225          		temp = F6x8[dat-32][i];
   \   00000028   0x....             LDR      R0,??DataTable3_1
   \   0000002A   0xB2FF             UXTB     R7,R7
   \   0000002C   0x2106             MOVS     R1,#+6
   \   0000002E   0x4379             MULS     R1,R7,R1
   \   00000030   0x1840             ADDS     R0,R0,R1
   \   00000032   0xB2E4             UXTB     R4,R4
   \   00000034   0x1900             ADDS     R0,R0,R4
   \   00000036   0x38C0             SUBS     R0,R0,#+192
   \   00000038   0x7805             LDRB     R5,[R0, #+0]
    226          		for(j=0; j<8; j++)
   \   0000003A   0x2600             MOVS     R6,#+0
   \   0000003C   0xE006             B        ??LCD_showChar0608_4
    227          		{
    228          			if(temp&0x01)	LCD_WriteData_16Bit(LCD_pen);
    229          			else			LCD_WriteData_16Bit(LCD_backGround);
   \                     ??LCD_showChar0608_5: (+1)
   \   0000003E   0x....             LDR      R0,??DataTable3
   \   00000040   0x8800             LDRH     R0,[R0, #+0]
   \   00000042   0x.... 0x....      BL       LCD_WriteData_16Bit
    230          			temp>>=1;
   \                     ??LCD_showChar0608_6: (+1)
   \   00000046   0xB2ED             UXTB     R5,R5
   \   00000048   0x086D             LSRS     R5,R5,#+1
   \   0000004A   0x1C76             ADDS     R6,R6,#+1
   \                     ??LCD_showChar0608_4: (+1)
   \   0000004C   0xB2F6             UXTB     R6,R6
   \   0000004E   0x2E08             CMP      R6,#+8
   \   00000050   0xDAE6             BGE      ??LCD_showChar0608_2
   \   00000052   0x07E8             LSLS     R0,R5,#+31
   \   00000054   0xD5F3             BPL      ??LCD_showChar0608_5
   \   00000056   0x....             LDR      R0,??DataTable3_2
   \   00000058   0x8800             LDRH     R0,[R0, #+0]
   \   0000005A   0x.... 0x....      BL       LCD_WriteData_16Bit
   \   0000005E   0xE7F2             B        ??LCD_showChar0608_6
    231          		}
    232          	}
    233          }
   \                     ??LCD_showChar0608_3: (+1)
   \   00000060   0xBDF1             POP      {R0,R4-R7,PC}    ;; return
    234          
    235          /**
    236            * 简介
    237            *    显示0608字符串
    238            * 参数
    239            */

   \                                 In section .text, align 2, keep-with-next
    240          void LCD_showStr0608(uint16 x,uint16 y, uint8 *dat)
    241          {
   \                     LCD_showStr0608: (+1)
   \   00000000   0xB5F8             PUSH     {R3-R7,LR}
   \   00000002   0x0007             MOVS     R7,R0
   \   00000004   0x000E             MOVS     R6,R1
   \   00000006   0x0015             MOVS     R5,R2
    242          	uint8 k;
    243          
    244              for (k=0; dat[k] != '\0'; k++);
   \   00000008   0x2400             MOVS     R4,#+0
   \   0000000A   0xE000             B        ??LCD_showStr0608_0
   \                     ??LCD_showStr0608_1: (+1)
   \   0000000C   0x1C64             ADDS     R4,R4,#+1
   \                     ??LCD_showStr0608_0: (+1)
   \   0000000E   0xB2E4             UXTB     R4,R4
   \   00000010   0x5D28             LDRB     R0,[R5, R4]
   \   00000012   0x2800             CMP      R0,#+0
   \   00000014   0xD1FA             BNE      ??LCD_showStr0608_1
    245              Lcd_SetRegion(x,y,x+6*k-1,y+7);
   \   00000016   0x0033             MOVS     R3,R6
   \   00000018   0x1DDB             ADDS     R3,R3,#+7
   \   0000001A   0xB2DB             UXTB     R3,R3
   \   0000001C   0x0038             MOVS     R0,R7
   \   0000001E   0x2106             MOVS     R1,#+6
   \   00000020   0x434C             MULS     R4,R1,R4
   \   00000022   0x1900             ADDS     R0,R0,R4
   \   00000024   0x1E42             SUBS     R2,R0,#+1
   \   00000026   0xB2D2             UXTB     R2,R2
   \   00000028   0x0031             MOVS     R1,R6
   \   0000002A   0xB2C9             UXTB     R1,R1
   \   0000002C   0x0038             MOVS     R0,R7
   \   0000002E   0xB2C0             UXTB     R0,R0
   \   00000030   0x.... 0x....      BL       Lcd_SetRegion
    246              k = 0;
   \   00000034   0x2400             MOVS     R4,#+0
   \   00000036   0xE009             B        ??LCD_showStr0608_2
    247          	while(dat[k] != '\0')
    248          	{
    249                  LCD_showChar0608(x|0x80, y, dat[k]);
   \                     ??LCD_showStr0608_3: (+1)
   \   00000038   0xB2E4             UXTB     R4,R4
   \   0000003A   0x5D2A             LDRB     R2,[R5, R4]
   \   0000003C   0x0031             MOVS     R1,R6
   \   0000003E   0xB289             UXTH     R1,R1
   \   00000040   0x2080             MOVS     R0,#+128
   \   00000042   0x4338             ORRS     R0,R0,R7
   \   00000044   0xB280             UXTH     R0,R0
   \   00000046   0x.... 0x....      BL       LCD_showChar0608
    250                  k++;
   \   0000004A   0x1C64             ADDS     R4,R4,#+1
    251          	}
   \                     ??LCD_showStr0608_2: (+1)
   \   0000004C   0xB2E4             UXTB     R4,R4
   \   0000004E   0x5D28             LDRB     R0,[R5, R4]
   \   00000050   0x2800             CMP      R0,#+0
   \   00000052   0xD1F1             BNE      ??LCD_showStr0608_3
    252          }
   \   00000054   0xBDF1             POP      {R0,R4-R7,PC}    ;; return
    253          
    254          /**
    255            * 简介
    256            *     LCD显示无符号数(6*8字体)
    257            * 参数
    258            *     x			x轴坐标设置
    259            *     y           y轴坐标设置
    260            *     num         无符号数
    261            * 返回值
    262            *     下一个值应该放置的x坐标
    263            * 备注
    264            */

   \                                 In section .text, align 2, keep-with-next
    265          void LCD_Uint16(uint8 x, uint8 y, uint16 num)
    266          {
   \                     LCD_Uint16: (+1)
   \   00000000   0xB530             PUSH     {R4,R5,LR}
   \   00000002   0xB085             SUB      SP,SP,#+20
   \   00000004   0x0005             MOVS     R5,R0
   \   00000006   0x000C             MOVS     R4,R1
   \   00000008   0x0010             MOVS     R0,R2
    267          	uint8 *ch1,ch[7], m[7];
    268              uint8 i = 0;
   \   0000000A   0x2100             MOVS     R1,#+0
    269          
    270              if (num == 0)
   \   0000000C   0xB280             UXTH     R0,R0
   \   0000000E   0x2800             CMP      R0,#+0
   \   00000010   0xD106             BNE      ??LCD_Uint16_0
    271              {
    272                  m[0] = '0';
   \   00000012   0x2030             MOVS     R0,#+48
   \   00000014   0x4669             MOV      R1,SP
   \   00000016   0x7008             STRB     R0,[R1, #+0]
    273                  m[1] = '\0';
   \   00000018   0x2000             MOVS     R0,#+0
   \   0000001A   0x4669             MOV      R1,SP
   \   0000001C   0x7048             STRB     R0,[R1, #+1]
   \   0000001E   0xE019             B        ??LCD_Uint16_1
    274              }
    275              else
    276          	{
    277                  OLED_HEXACSII(num,ch);
   \                     ??LCD_Uint16_0: (+1)
   \   00000020   0xA902             ADD      R1,SP,#+8
   \   00000022   0xB280             UXTH     R0,R0
   \   00000024   0x.... 0x....      BL       OLED_HEXACSII
    278                  ch1 =&ch[1];
   \   00000028   0xA802             ADD      R0,SP,#+8
   \   0000002A   0x1C40             ADDS     R0,R0,#+1
   \   0000002C   0xE000             B        ??LCD_Uint16_2
    279                  while (*ch1 == '0')
    280                  {
    281                      ch1++;
   \                     ??LCD_Uint16_3: (+1)
   \   0000002E   0x1C40             ADDS     R0,R0,#+1
    282                  }
   \                     ??LCD_Uint16_2: (+1)
   \   00000030   0x7801             LDRB     R1,[R0, #+0]
   \   00000032   0x2930             CMP      R1,#+48
   \   00000034   0xD0FB             BEQ      ??LCD_Uint16_3
    283                  for (i=0; *ch1 != '\0'; i++)
   \   00000036   0x2100             MOVS     R1,#+0
   \   00000038   0xE005             B        ??LCD_Uint16_4
    284                  {
    285                      m[i] = *ch1;
   \                     ??LCD_Uint16_5: (+1)
   \   0000003A   0x7802             LDRB     R2,[R0, #+0]
   \   0000003C   0x466B             MOV      R3,SP
   \   0000003E   0xB2C9             UXTB     R1,R1
   \   00000040   0x545A             STRB     R2,[R3, R1]
    286                      ch1++;
   \   00000042   0x1C40             ADDS     R0,R0,#+1
    287                  }
   \   00000044   0x1C49             ADDS     R1,R1,#+1
   \                     ??LCD_Uint16_4: (+1)
   \   00000046   0x7802             LDRB     R2,[R0, #+0]
   \   00000048   0x2A00             CMP      R2,#+0
   \   0000004A   0xD1F6             BNE      ??LCD_Uint16_5
    288                  m[i] = '\0';
   \   0000004C   0x2000             MOVS     R0,#+0
   \   0000004E   0x466A             MOV      R2,SP
   \   00000050   0xB2C9             UXTB     R1,R1
   \   00000052   0x5450             STRB     R0,[R2, R1]
    289              }
    290          
    291              LCD_showStr0608(x, y, m);	//显示数字
   \                     ??LCD_Uint16_1: (+1)
   \   00000054   0x466A             MOV      R2,SP
   \   00000056   0xB2E4             UXTB     R4,R4
   \   00000058   0x0021             MOVS     R1,R4
   \   0000005A   0xB289             UXTH     R1,R1
   \   0000005C   0xB2ED             UXTB     R5,R5
   \   0000005E   0x0028             MOVS     R0,R5
   \   00000060   0xB280             UXTH     R0,R0
   \   00000062   0x.... 0x....      BL       LCD_showStr0608
    292          }
   \   00000066   0xB005             ADD      SP,SP,#+20
   \   00000068   0xBD30             POP      {R4,R5,PC}       ;; return
    293          
    294          /**
    295            * 简介
    296            *     LCD显示 有符号数 (6*8字体)
    297            * 参数
    298            *     x			x轴坐标设置
    299            *     y           y轴坐标设置
    300            *     num         有 符号数
    301            * 备注
    302            */

   \                                 In section .text, align 2, keep-with-next
    303          void LCD_Int16(uint8 x, uint8 y, int16 num)
    304          {
   \                     LCD_Int16: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000E             MOVS     R6,R1
   \   00000006   0x0015             MOVS     R5,R2
    305          	if (num < 0)
   \   00000008   0xB22D             SXTH     R5,R5
   \   0000000A   0x2D00             CMP      R5,#+0
   \   0000000C   0xD50C             BPL      ??LCD_Int16_0
    306              {
    307                  num = -num;
   \   0000000E   0x0028             MOVS     R0,R5
   \   00000010   0xB200             SXTH     R0,R0
   \   00000012   0x4245             RSBS     R5,R0,#+0
    308                  LCD_showChar0608(x, y, '-');
   \   00000014   0x222D             MOVS     R2,#+45
   \   00000016   0xB2F6             UXTB     R6,R6
   \   00000018   0x0031             MOVS     R1,R6
   \   0000001A   0xB289             UXTH     R1,R1
   \   0000001C   0xB2E4             UXTB     R4,R4
   \   0000001E   0x0020             MOVS     R0,R4
   \   00000020   0xB280             UXTH     R0,R0
   \   00000022   0x.... 0x....      BL       LCD_showChar0608
    309                  x += 6;
   \   00000026   0x1DA4             ADDS     R4,R4,#+6
    310              }
    311              LCD_Uint16(x, y, num);
   \                     ??LCD_Int16_0: (+1)
   \   00000028   0x002A             MOVS     R2,R5
   \   0000002A   0xB292             UXTH     R2,R2
   \   0000002C   0x0031             MOVS     R1,R6
   \   0000002E   0xB2C9             UXTB     R1,R1
   \   00000030   0x0020             MOVS     R0,R4
   \   00000032   0xB2C0             UXTB     R0,R0
   \   00000034   0x.... 0x....      BL       LCD_Uint16
    312          }
   \   00000038   0xBD70             POP      {R4-R6,PC}       ;; return
    313          
    314          
    315          /**
    316            * 简介
    317            *     LCD显示 float (6*8字体)
    318            * 参数
    319            *     x			x轴坐标设置
    320            *     y           y轴坐标设置
    321            *     len         显示尾数长度
    322            * 备注
    323            */

   \                                 In section .text, align 2, keep-with-next
    324          void LCD_DisplayFloat(uint8 x, uint8 y, float data, uint8 len)
    325          {
   \                     LCD_DisplayFloat: (+1)
   \   00000000   0xB5F3             PUSH     {R0,R1,R4-R7,LR}
   \   00000002   0xB089             SUB      SP,SP,#+36
   \   00000004   0x0017             MOVS     R7,R2
   \   00000006   0x001E             MOVS     R6,R3
    326              uint8 numChar[12], k=0;
   \   00000008   0x2400             MOVS     R4,#+0
    327          	uint8 *ch1,chH[7] = {0},chL[7] = {0};
   \   0000000A   0xA806             ADD      R0,SP,#+24
   \   0000000C   0x2100             MOVS     R1,#+0
   \   0000000E   0x2200             MOVS     R2,#+0
   \   00000010   0xC006             STM      R0!,{R1,R2}
   \   00000012   0x3808             SUBS     R0,R0,#+8
   \   00000014   0xA804             ADD      R0,SP,#+16
   \   00000016   0x2100             MOVS     R1,#+0
   \   00000018   0x2200             MOVS     R2,#+0
   \   0000001A   0xC006             STM      R0!,{R1,R2}
   \   0000001C   0x3808             SUBS     R0,R0,#+8
    328              uint32 integer;//存储整数
    329              float decimals;//存储小数
    330              uint8 decimalsInterger;//小数转换为整数
    331          
    332              if (data < 0)
   \   0000001E   0x0038             MOVS     R0,R7
   \   00000020   0x2100             MOVS     R1,#+0
   \   00000022   0x.... 0x....      BL       __aeabi_cfcmple
   \   00000026   0xD207             BCS      ??LCD_DisplayFloat_0
    333              {
    334                  data = -data;
   \   00000028   0x2080             MOVS     R0,#+128
   \   0000002A   0x0600             LSLS     R0,R0,#+24       ;; #-2147483648
   \   0000002C   0x4047             EORS     R7,R7,R0
    335                  numChar[k++] = '-';
   \   0000002E   0x202D             MOVS     R0,#+45
   \   00000030   0xA901             ADD      R1,SP,#+4
   \   00000032   0xB2E4             UXTB     R4,R4
   \   00000034   0x5508             STRB     R0,[R1, R4]
   \   00000036   0x1C64             ADDS     R4,R4,#+1
    336              }
    337          
    338              integer = (uint32)data;
   \                     ??LCD_DisplayFloat_0: (+1)
   \   00000038   0x0038             MOVS     R0,R7
   \   0000003A   0x.... 0x....      BL       __aeabi_f2uiz
   \   0000003E   0x9000             STR      R0,[SP, #+0]
    339              decimals = data - (float)integer;
   \   00000040   0x9800             LDR      R0,[SP, #+0]
   \   00000042   0x.... 0x....      BL       __aeabi_ui2f
   \   00000046   0x0001             MOVS     R1,R0
   \   00000048   0x0038             MOVS     R0,R7
   \   0000004A   0x.... 0x....      BL       __aeabi_fsub
   \   0000004E   0x0005             MOVS     R5,R0
    340              if (data > 9999)
   \   00000050   0x0038             MOVS     R0,R7
   \   00000052   0x....             LDR      R1,??DataTable3_3  ;; 0x461c3c01
   \   00000054   0x.... 0x....      BL       __aeabi_cfrcmple
   \   00000058   0xD819             BHI      ??LCD_DisplayFloat_1
    341              {
    342                  OLED_HEXACSII(integer/10000,chH);
   \   0000005A   0xA906             ADD      R1,SP,#+24
   \   0000005C   0x000F             MOVS     R7,R1
   \   0000005E   0x9800             LDR      R0,[SP, #+0]
   \   00000060   0x....             LDR      R1,??DataTable3_4  ;; 0x2710
   \   00000062   0x.... 0x....      BL       __aeabi_uidiv
   \   00000066   0x0039             MOVS     R1,R7
   \   00000068   0xB280             UXTH     R0,R0
   \   0000006A   0x.... 0x....      BL       OLED_HEXACSII
    343                  ch1 = &chH[0];
   \   0000006E   0xA806             ADD      R0,SP,#+24
   \   00000070   0xE000             B        ??LCD_DisplayFloat_2
    344                  while (*ch1 == '0')     ch1++;
   \                     ??LCD_DisplayFloat_3: (+1)
   \   00000072   0x1C40             ADDS     R0,R0,#+1
   \                     ??LCD_DisplayFloat_2: (+1)
   \   00000074   0x7801             LDRB     R1,[R0, #+0]
   \   00000076   0x2930             CMP      R1,#+48
   \   00000078   0xD0FB             BEQ      ??LCD_DisplayFloat_3
    345                  while (*ch1 != '\0')    numChar[k++] = *(ch1++);
   \                     ??LCD_DisplayFloat_4: (+1)
   \   0000007A   0x7801             LDRB     R1,[R0, #+0]
   \   0000007C   0x2900             CMP      R1,#+0
   \   0000007E   0xD006             BEQ      ??LCD_DisplayFloat_1
   \   00000080   0x7801             LDRB     R1,[R0, #+0]
   \   00000082   0xAA01             ADD      R2,SP,#+4
   \   00000084   0xB2E4             UXTB     R4,R4
   \   00000086   0x5511             STRB     R1,[R2, R4]
   \   00000088   0x1C40             ADDS     R0,R0,#+1
   \   0000008A   0x1C64             ADDS     R4,R4,#+1
   \   0000008C   0xE7F5             B        ??LCD_DisplayFloat_4
    346              }
    347              OLED_HEXACSII(integer%10000, chL);
   \                     ??LCD_DisplayFloat_1: (+1)
   \   0000008E   0xA904             ADD      R1,SP,#+16
   \   00000090   0x000F             MOVS     R7,R1
   \   00000092   0x9800             LDR      R0,[SP, #+0]
   \   00000094   0x....             LDR      R1,??DataTable3_4  ;; 0x2710
   \   00000096   0x.... 0x....      BL       __aeabi_uidivmod
   \   0000009A   0x0008             MOVS     R0,R1
   \   0000009C   0x0039             MOVS     R1,R7
   \   0000009E   0xB280             UXTH     R0,R0
   \   000000A0   0x.... 0x....      BL       OLED_HEXACSII
    348              ch1 = &chL[0];
   \   000000A4   0xA804             ADD      R0,SP,#+16
   \   000000A6   0xE000             B        ??LCD_DisplayFloat_5
    349              while (*ch1 == '0')         ch1++;
   \                     ??LCD_DisplayFloat_6: (+1)
   \   000000A8   0x1C40             ADDS     R0,R0,#+1
   \                     ??LCD_DisplayFloat_5: (+1)
   \   000000AA   0x7801             LDRB     R1,[R0, #+0]
   \   000000AC   0x2930             CMP      R1,#+48
   \   000000AE   0xD0FB             BEQ      ??LCD_DisplayFloat_6
    350              while (*ch1 != '\0')        numChar[k++] = *(ch1++);
   \                     ??LCD_DisplayFloat_7: (+1)
   \   000000B0   0x7801             LDRB     R1,[R0, #+0]
   \   000000B2   0x2900             CMP      R1,#+0
   \   000000B4   0xD006             BEQ      ??LCD_DisplayFloat_8
   \   000000B6   0x7801             LDRB     R1,[R0, #+0]
   \   000000B8   0xAA01             ADD      R2,SP,#+4
   \   000000BA   0xB2E4             UXTB     R4,R4
   \   000000BC   0x5511             STRB     R1,[R2, R4]
   \   000000BE   0x1C40             ADDS     R0,R0,#+1
   \   000000C0   0x1C64             ADDS     R4,R4,#+1
   \   000000C2   0xE7F5             B        ??LCD_DisplayFloat_7
    351          
    352              //存储小数点
    353              numChar[k++] = '.';
   \                     ??LCD_DisplayFloat_8: (+1)
   \   000000C4   0x202E             MOVS     R0,#+46
   \   000000C6   0xA901             ADD      R1,SP,#+4
   \   000000C8   0xB2E4             UXTB     R4,R4
   \   000000CA   0x5508             STRB     R0,[R1, R4]
   \   000000CC   0x1C64             ADDS     R4,R4,#+1
   \   000000CE   0xE016             B        ??LCD_DisplayFloat_9
    354          
    355              //发送小数
    356              while (len)
    357              {
    358                  len --;
   \                     ??LCD_DisplayFloat_10: (+1)
   \   000000D0   0x1E76             SUBS     R6,R6,#+1
    359                  decimals *= 10;
   \   000000D2   0x....             LDR      R0,??DataTable3_5  ;; 0x41200000
   \   000000D4   0x0029             MOVS     R1,R5
   \   000000D6   0x.... 0x....      BL       __aeabi_fmul
   \   000000DA   0x0005             MOVS     R5,R0
    360                  decimalsInterger = (uint8)decimals + 0x30;
   \   000000DC   0x0028             MOVS     R0,R5
   \   000000DE   0x.... 0x....      BL       __aeabi_f2iz
   \   000000E2   0x3030             ADDS     R0,R0,#+48
    361                  numChar[k++] = decimalsInterger;
   \   000000E4   0xA901             ADD      R1,SP,#+4
   \   000000E6   0xB2E4             UXTB     R4,R4
   \   000000E8   0x5508             STRB     R0,[R1, R4]
   \   000000EA   0x1C64             ADDS     R4,R4,#+1
    362                  decimals -= (float)(decimalsInterger-0x30);
   \   000000EC   0xB2C0             UXTB     R0,R0
   \   000000EE   0x3830             SUBS     R0,R0,#+48
   \   000000F0   0x.... 0x....      BL       __aeabi_i2f
   \   000000F4   0x0001             MOVS     R1,R0
   \   000000F6   0x0028             MOVS     R0,R5
   \   000000F8   0x.... 0x....      BL       __aeabi_fsub
   \   000000FC   0x0005             MOVS     R5,R0
    363              }
   \                     ??LCD_DisplayFloat_9: (+1)
   \   000000FE   0xB2F6             UXTB     R6,R6
   \   00000100   0x2E00             CMP      R6,#+0
   \   00000102   0xD1E5             BNE      ??LCD_DisplayFloat_10
    364              numChar[k++] = '\0';
   \   00000104   0x2000             MOVS     R0,#+0
   \   00000106   0xA901             ADD      R1,SP,#+4
   \   00000108   0xB2E4             UXTB     R4,R4
   \   0000010A   0x5508             STRB     R0,[R1, R4]
   \   0000010C   0x1C64             ADDS     R4,R4,#+1
    365          
    366              LCD_showStr0608(x, y, numChar);
   \   0000010E   0xAA01             ADD      R2,SP,#+4
   \   00000110   0xA80A             ADD      R0,SP,#+40
   \   00000112   0x7801             LDRB     R1,[R0, #+0]
   \   00000114   0xB289             UXTH     R1,R1
   \   00000116   0xA809             ADD      R0,SP,#+36
   \   00000118   0x7800             LDRB     R0,[R0, #+0]
   \   0000011A   0xB280             UXTH     R0,R0
   \   0000011C   0x.... 0x....      BL       LCD_showStr0608
    367          }
   \   00000120   0xB00B             ADD      SP,SP,#+44
   \   00000122   0xBDF0             POP      {R4-R7,PC}       ;; return
    368          
    369          /**
    370            * 简介
    371            *    显示logo
    372            * 参数
    373            */

   \                                 In section .text, align 2, keep-with-next
    374          void LCD_showLogo()
    375          {
   \                     LCD_showLogo: (+1)
   \   00000000   0xB5F8             PUSH     {R3-R7,LR}
    376            	uint8 x,y,k,temp;
    377              uint8 *p_logo = &logo[0][0];
   \   00000002   0x....             LDR      R7,??DataTable3_6
    378              Lcd_SetRegion(0,48,127,48+64-1);
   \   00000004   0x236F             MOVS     R3,#+111
   \   00000006   0x227F             MOVS     R2,#+127
   \   00000008   0x2130             MOVS     R1,#+48
   \   0000000A   0x2000             MOVS     R0,#+0
   \   0000000C   0x.... 0x....      BL       Lcd_SetRegion
    379          
    380          	for(x=0; x<128; x++)
   \   00000010   0x2000             MOVS     R0,#+0
   \   00000012   0x4669             MOV      R1,SP
   \   00000014   0x7008             STRB     R0,[R1, #+0]
   \   00000016   0xE004             B        ??LCD_showLogo_0
   \                     ??LCD_showLogo_1: (+1)
   \   00000018   0x4668             MOV      R0,SP
   \   0000001A   0x4669             MOV      R1,SP
   \   0000001C   0x7809             LDRB     R1,[R1, #+0]
   \   0000001E   0x1C49             ADDS     R1,R1,#+1
   \   00000020   0x7001             STRB     R1,[R0, #+0]
   \                     ??LCD_showLogo_0: (+1)
   \   00000022   0x4668             MOV      R0,SP
   \   00000024   0x7800             LDRB     R0,[R0, #+0]
   \   00000026   0x2880             CMP      R0,#+128
   \   00000028   0xDA1A             BGE      ??LCD_showLogo_2
    381          	{
    382          	   	for(y=0; y<8; y++)
   \   0000002A   0x2400             MOVS     R4,#+0
   \   0000002C   0xE000             B        ??LCD_showLogo_3
   \                     ??LCD_showLogo_4: (+1)
   \   0000002E   0x1C64             ADDS     R4,R4,#+1
   \                     ??LCD_showLogo_3: (+1)
   \   00000030   0xB2E4             UXTB     R4,R4
   \   00000032   0x2C08             CMP      R4,#+8
   \   00000034   0xDAF0             BGE      ??LCD_showLogo_1
    383          		{
    384                      temp = *(p_logo++);//减32因为是取模是从空格开始取得 空格在ascii中序号是32
   \   00000036   0x783D             LDRB     R5,[R7, #+0]
   \   00000038   0x1C7F             ADDS     R7,R7,#+1
    385                      for(k=0; k<8; k++)
   \   0000003A   0x2600             MOVS     R6,#+0
   \   0000003C   0xE006             B        ??LCD_showLogo_5
    386                      {
    387                          if(temp&0x01)	LCD_WriteData_16Bit(LCD_pen);
    388                          else			LCD_WriteData_16Bit(LCD_backGround);
   \                     ??LCD_showLogo_6: (+1)
   \   0000003E   0x....             LDR      R0,??DataTable3
   \   00000040   0x8800             LDRH     R0,[R0, #+0]
   \   00000042   0x.... 0x....      BL       LCD_WriteData_16Bit
    389                          temp>>=1;
   \                     ??LCD_showLogo_7: (+1)
   \   00000046   0xB2ED             UXTB     R5,R5
   \   00000048   0x086D             LSRS     R5,R5,#+1
   \   0000004A   0x1C76             ADDS     R6,R6,#+1
   \                     ??LCD_showLogo_5: (+1)
   \   0000004C   0xB2F6             UXTB     R6,R6
   \   0000004E   0x2E08             CMP      R6,#+8
   \   00000050   0xDAED             BGE      ??LCD_showLogo_4
   \   00000052   0x07E8             LSLS     R0,R5,#+31
   \   00000054   0xD5F3             BPL      ??LCD_showLogo_6
   \   00000056   0x....             LDR      R0,??DataTable3_2
   \   00000058   0x8800             LDRH     R0,[R0, #+0]
   \   0000005A   0x.... 0x....      BL       LCD_WriteData_16Bit
   \   0000005E   0xE7F2             B        ??LCD_showLogo_7
    390                      }
    391          		}
    392          	}
    393          }
   \                     ??LCD_showLogo_2: (+1)
   \   00000060   0xBDF1             POP      {R0,R4-R7,PC}    ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1:
   \   00000000   0x01312D00         DC32     0x1312d00

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3:
   \   00000000   0x........         DC32     LCD_backGround

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_1:
   \   00000000   0x........         DC32     F6x8

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_2:
   \   00000000   0x........         DC32     LCD_pen

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_3:
   \   00000000   0x461C3C01         DC32     0x461c3c01

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_4:
   \   00000000   0x00002710         DC32     0x2710

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_5:
   \   00000000   0x41200000         DC32     0x41200000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_6:
   \   00000000   0x........         DC32     logo

   \                                 In section .rodata, align 4
   \   00000000   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    

   \                                 In section .rodata, align 4
   \   00000000   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
    394          
    395          

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      64   LCD_DisplayFloat
        64   -> LCD_showStr0608
        64   -> OLED_HEXACSII
        64   -> __aeabi_f2iz
        64   -> __aeabi_f2uiz
        64   -> __aeabi_fmul
        64   -> __aeabi_fsub
        64   -> __aeabi_i2f
        64   -> __aeabi_ui2f
        64 __aeabi_cfcmple
        64 __aeabi_cfrcmple
        64 __aeabi_uidiv
        64 __aeabi_uidivmod
       8   LCD_Init
         8   -> GpioInit
         8   -> GpioSet
         8   -> OLED_WrCmd
         8   -> OLED_WrDat
         8   -> SystickDelayMs
         8   -> dsp_single_colour
         8   -> spi_init
      16   LCD_Int16
        16   -> LCD_Uint16
        16   -> LCD_showChar0608
      32   LCD_Uint16
        32   -> LCD_showStr0608
        32   -> OLED_HEXACSII
       8   LCD_WriteData_16Bit
         8   -> OLED_WrDat
      24   LCD_showChar0608
        24   -> LCD_WriteData_16Bit
        24   -> Lcd_SetRegion
      24   LCD_showLogo
        24   -> LCD_WriteData_16Bit
        24   -> Lcd_SetRegion
      24   LCD_showStr0608
        24   -> LCD_showChar0608
        24   -> Lcd_SetRegion
      24   Lcd_SetRegion
        24   -> OLED_WrCmd
        24   -> OLED_WrDat
      16   dsp_single_colour
        16   -> LCD_WriteData_16Bit
        16   -> Lcd_SetRegion


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable1
       4  ??DataTable3
       4  ??DataTable3_1
       4  ??DataTable3_2
       4  ??DataTable3_3
       4  ??DataTable3_4
       4  ??DataTable3_5
       4  ??DataTable3_6
       8  ?_0
       8  ?_1
     292  LCD_DisplayFloat
     606  LCD_Init
      58  LCD_Int16
     106  LCD_Uint16
      26  LCD_WriteData_16Bit
       2  LCD_backGround
       2  LCD_pen
      98  LCD_showChar0608
      98  LCD_showLogo
      86  LCD_showStr0608
      94  Lcd_SetRegion
      50  dsp_single_colour

 
     2 bytes in section .bss
     2 bytes in section .data
    16 bytes in section .rodata
 1 546 bytes in section .text
 
 1 546 bytes of CODE  memory
    16 bytes of CONST memory
     4 bytes of DATA  memory

Errors: none
Warnings: none
