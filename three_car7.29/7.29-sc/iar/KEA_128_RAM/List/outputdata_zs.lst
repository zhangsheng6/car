###############################################################################
#
# IAR ANSI C/C++ Compiler V7.30.3.8024/W32 for ARM        17/Jul/2018  09:40:44
# Copyright 1999-2014 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        H:\智能车程序2018\电磁三轮――ZS\7.17\device\C\outputdata_zs.c
#    Command line =  
#        H:\智能车程序2018\电磁三轮――ZS\7.17\device\C\outputdata_zs.c -D IAR
#        -D TWR_K60N512 -D _DLIB_FILE_DESCRIPTOR -lCN
#        H:\智能车程序2018\电磁三轮――ZS\7.17\iar\KEA_128_RAM\List\ -lB
#        H:\智能车程序2018\电磁三轮――ZS\7.17\iar\KEA_128_RAM\List\ -o
#        H:\智能车程序2018\电磁三轮――ZS\7.17\iar\KEA_128_RAM\Obj\ --no_cse
#        --no_unroll --no_inline --no_code_motion --no_tbaa --no_clustering
#        --no_scheduling --debug --endian=little --cpu=Cortex-M0+ -e --fpu=None
#        --dlib_config H:\IAR7.3\arm\INC\c\DLib_Config_Normal.h -I
#        H:\智能车程序2018\电磁三轮――ZS\7.17\iar\..\device\H\ -I
#        H:\智能车程序2018\电磁三轮――ZS\7.17\iar\..\user\H\ -I
#        H:\智能车程序2018\电磁三轮――ZS\7.17\iar\..\system\ -I
#        H:\智能车程序2018\电磁三轮――ZS\7.17\iar\..\lib\H\ -I
#        H:\智能车程序2018\电磁三轮――ZS\7.17\iar\..\system\coreSupport\ -Ol
#    List file    =  
#        H:\智能车程序2018\电磁三轮――ZS\7.17\iar\KEA_128_RAM\List\outputdata_zs.lst
#    Object file  =  
#        H:\智能车程序2018\电磁三轮――ZS\7.17\iar\KEA_128_RAM\Obj\outputdata_zs.o
#
###############################################################################

H:\智能车程序2018\电磁三轮――ZS\7.17\device\C\outputdata_zs.c
      1          #include "uart.h"
      2          #include "outputdata_zs.h"
      3          

   \                                 In section .text, align 4, keep-with-next
      4          void uart_sendware_float(float x,float y,float z,float w)
      5          {
   \                     uart_sendware_float: (+1)
   \   00000000   0xB500             PUSH     {LR}
   \   00000002   0xB085             SUB      SP,SP,#+20
      6          #define CMD_WARE 3
      7            
      8            float var[4];
      9            
     10            var[0] = x;
   \   00000004   0x9001             STR      R0,[SP, #+4]
     11            var[1] = y;
   \   00000006   0x9102             STR      R1,[SP, #+8]
     12            var[2] = z;
   \   00000008   0x9203             STR      R2,[SP, #+12]
     13            var[3] = w;
   \   0000000A   0x9304             STR      R3,[SP, #+16]
     14            
     15             uint8 cmdf[2] = {CMD_WARE, ~CMD_WARE};    //串口调试 使用的前命令
   \   0000000C   0xA800             ADD      R0,SP,#+0
   \   0000000E   0x1C80             ADDS     R0,R0,#+2
   \   00000010   0x490A             LDR      R1,??uart_sendware_float_0
   \   00000012   0x880A             LDRH     R2,[R1, #0]
   \   00000014   0x8002             STRH     R2,[R0, #0]
     16             uint8 cmdr[2] = {~CMD_WARE, CMD_WARE};    //串口调试 使用的后命令
   \   00000016   0x4668             MOV      R0,SP
   \   00000018   0x4909             LDR      R1,??uart_sendware_float_0+0x4
   \   0000001A   0x880A             LDRH     R2,[R1, #0]
   \   0000001C   0x8002             STRH     R2,[R0, #0]
     17          
     18             UART_SendArray( cmdf,sizeof(cmdf));    //先发送前命令
   \   0000001E   0x2102             MOVS     R1,#+2
   \   00000020   0xA800             ADD      R0,SP,#+0
   \   00000022   0x1C80             ADDS     R0,R0,#+2
   \   00000024   0x.... 0x....      BL       UART_SendArray
     19             UART_SendArray( (uint8_t *)var,sizeof(var));    //发送数据
   \   00000028   0x2110             MOVS     R1,#+16
   \   0000002A   0xA801             ADD      R0,SP,#+4
   \   0000002C   0x.... 0x....      BL       UART_SendArray
     20             UART_SendArray( cmdr,sizeof(cmdr));    //发送后命令
   \   00000030   0x2102             MOVS     R1,#+2
   \   00000032   0x4668             MOV      R0,SP
   \   00000034   0x.... 0x....      BL       UART_SendArray
     21          
     22          }
   \   00000038   0xB005             ADD      SP,SP,#+20
   \   0000003A   0xBD00             POP      {PC}             ;; return
   \                     ??uart_sendware_float_0:
   \   0000003C   0x........         DC32     ?_0
   \   00000040   0x........         DC32     ?_1

   \                                 In section .rodata, align 2
   \                     ?_0:
   \   00000000   0x03 0xFC          DC8 3, 252

   \                                 In section .rodata, align 2
   \                     ?_1:
   \   00000000   0xFC 0x03          DC8 252, 3
     23          
     24          
     25          
     26          
     27          

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      24   uart_sendware_float
        24   -> UART_SendArray


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       2  ?_0
       2  ?_1
      68  uart_sendware_float

 
  4 bytes in section .rodata
 68 bytes in section .text
 
 68 bytes of CODE  memory
  4 bytes of CONST memory

Errors: none
Warnings: none
