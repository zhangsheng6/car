///////////////////////////////////////////////////////////////////////////////
//
// IAR ANSI C/C++ Compiler V7.30.3.8024/W32 for ARM       17/Jul/2018  09:40:43
// Copyright 1999-2014 IAR Systems AB.
//
//    Cpu mode     =  thumb
//    Endian       =  little
//    Source file  =  H:\智能车程序2018\电磁三轮――ZS\7.17\device\C\oled.c
//    Command line =  
//        H:\智能车程序2018\电磁三轮――ZS\7.17\device\C\oled.c -D IAR -D
//        TWR_K60N512 -D _DLIB_FILE_DESCRIPTOR -lCN
//        H:\智能车程序2018\电磁三轮――ZS\7.17\iar\KEA_128_RAM\List\ -lB
//        H:\智能车程序2018\电磁三轮――ZS\7.17\iar\KEA_128_RAM\List\ -o
//        H:\智能车程序2018\电磁三轮――ZS\7.17\iar\KEA_128_RAM\Obj\ --no_cse
//        --no_unroll --no_inline --no_code_motion --no_tbaa --no_clustering
//        --no_scheduling --debug --endian=little --cpu=Cortex-M0+ -e
//        --fpu=None --dlib_config H:\IAR7.3\arm\INC\c\DLib_Config_Normal.h -I
//        H:\智能车程序2018\电磁三轮――ZS\7.17\iar\..\device\H\ -I
//        H:\智能车程序2018\电磁三轮――ZS\7.17\iar\..\user\H\ -I
//        H:\智能车程序2018\电磁三轮――ZS\7.17\iar\..\system\ -I
//        H:\智能车程序2018\电磁三轮――ZS\7.17\iar\..\lib\H\ -I
//        H:\智能车程序2018\电磁三轮――ZS\7.17\iar\..\system\coreSupport\ -Ol
//    List file    =  
//        H:\智能车程序2018\电磁三轮――ZS\7.17\iar\KEA_128_RAM\List\oled.s
//
///////////////////////////////////////////////////////////////////////////////

        #define SHT_PROGBITS 0x1

        EXTERN GpioInit
        EXTERN GpioSet
        EXTERN SystickDelayMs
        EXTERN __aeabi_cfcmple
        EXTERN __aeabi_cfrcmple
        EXTERN __aeabi_f2iz
        EXTERN __aeabi_f2uiz
        EXTERN __aeabi_fmul
        EXTERN __aeabi_fsub
        EXTERN __aeabi_i2f
        EXTERN __aeabi_idiv
        EXTERN __aeabi_idivmod
        EXTERN __aeabi_memclr4
        EXTERN __aeabi_ui2f
        EXTERN __aeabi_uidiv
        EXTERN __aeabi_uidivmod
        EXTERN logo
        EXTERN menuSelect
        EXTERN spi_init
        EXTERN vsnprintf

        PUBLIC F6x8
        PUBLIC F8X16
        PUBLIC OLED_Clear
        PUBLIC OLED_Clear_allGRAM
        PUBLIC OLED_Display
        PUBLIC OLED_DisplayFloat
        PUBLIC OLED_DisplayStr
        PUBLIC OLED_Display_tinyFormat
        PUBLIC OLED_DisplaytinyStr
        PUBLIC OLED_Draw_Point
        PUBLIC OLED_GRAM
        PUBLIC OLED_HEXACSII
        PUBLIC OLED_Init
        PUBLIC OLED_Int16
        PUBLIC OLED_Menu
        PUBLIC OLED_MenuFlicker
        PUBLIC OLED_PutPixel
        PUBLIC OLED_SPI
        PUBLIC OLED_Set_Pos
        PUBLIC OLED_Uint16
        PUBLIC OLED_WrCmd
        PUBLIC OLED_WrDat
        PUBLIC StrLen6X8
        PUBLIC StrLen8X16
        PUBLIC menuNum

// H:\智能车程序2018\电磁三轮――ZS\7.17\device\C\oled.c
//    1 /**
//    2   ******************************************************************************
//    3   * COPYRIGHT NOTICE
//    4   * Copyright (c) 2018,华北科技学院
//    5   * All rights reserved.
//    6   *
//    7   * 文件名称：    oled.c
//    8   * 文件标识：
//    9   * 摘    要：    OLED显示
//   10   *
//   11   * 当前版本：     1.0
//   12   * 负    责：     韩志伟
//   13   * 时    间：     2018年1月4日 10:04:05
//   14   ******************************************************************************
//   15   */
//   16 
//   17 #include "oled.h"
//   18 #include "stdio.h"
//   19 #include "stdarg.h"
//   20 

        SECTION `.data`:DATA:REORDER:NOROOT(2)
//   21 SPI_Type* OLED_SPI[2] = SPI_BASES; //定义两个指针数组保存 SPIx 的地址
OLED_SPI:
        DATA
        DC32 40076000H, 40077000H

        SECTION `.bss`:DATA:REORDER:NOROOT(2)
//   22 unsigned char OLED_GRAM[128][8] = {0};
OLED_GRAM:
        DS8 1024

        SECTION `.rodata`:CONST:REORDER:NOROOT(2)
        DATA
        DC8 "P:"
        DC8 0

        SECTION `.rodata`:CONST:REORDER:NOROOT(2)
        DATA
        DC8 "I:"
        DC8 0

        SECTION `.rodata`:CONST:REORDER:NOROOT(2)
        DATA
        DC8 "D:"
        DC8 0

        SECTION `.rodata`:CONST:REORDER:NOROOT(2)
        DATA
        DC8 "AP:"

        SECTION `.rodata`:CONST:REORDER:NOROOT(2)
        DATA
        DC8 "AD:"

        SECTION `.rodata`:CONST:REORDER:NOROOT(2)
        DATA
        DC8 "CF:"

        SECTION `.rodata`:CONST:REORDER:NOROOT(2)
        DATA
        DC8 "SZ:"

        SECTION `.rodata`:CONST:REORDER:NOROOT(2)
        DATA
        DC8 "SW:"

        SECTION `.rodata`:CONST:REORDER:NOROOT(1)
        DATA
        DC8 "-"

        SECTION `.rodata`:CONST:REORDER:NOROOT(1)
        DATA
        DC8 "."

        SECTION `.rodata`:CONST:REORDER:NOROOT(2)
?_10:
        DATA
        DC8 "U  P_angle +100"

        SECTION `.rodata`:CONST:REORDER:NOROOT(2)
?_11:
        DATA
        DC8 "D  P_angle -100"

        SECTION `.rodata`:CONST:REORDER:NOROOT(2)
?_12:
        DATA
        DC8 "L  D_angle +1"
        DC8 0, 0

        SECTION `.rodata`:CONST:REORDER:NOROOT(2)
?_13:
        DATA
        DC8 "R  D_angle -1"
        DC8 0, 0

        SECTION `.rodata`:CONST:REORDER:NOROOT(2)
?_14:
        DATA
        DC8 "M  chice"
        DC8 0, 0, 0

        SECTION `.rodata`:CONST:REORDER:NOROOT(2)
        DATA
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
//   23 
//   24 #define Max_Column	128
//   25 #define Max_Row		64
//   26 
//   27 //菜单数字 高8宽7

        SECTION `.rodata`:CONST:REORDER:NOROOT(2)
//   28 const uint8 menuNum[][7] =
menuNum:
        DATA
        DC8 193, 197, 195, 255, 193, 193, 193, 129, 197, 227, 211, 211, 207
        DC8 193, 195, 219, 219, 219, 219, 255, 255, 177, 169, 165, 163, 255
        DC8 161, 161, 255, 253, 185, 145, 0, 0, 0, 0
//   29 {
//   30     {0xC1,0xC5,0xC3,0xFF,0xC1,0xC1,0xC1}, //1
//   31     {0x81,0xC5,0xE3,0xD3,0xD3,0xCF,0xC1}, //2
//   32     {0xC3,0xDB,0xDB,0xDB,0xDB,0xFF,0xFF}, //3
//   33     {0xB1,0xA9,0xA5,0xA3,0xFF,0xA1,0xA1}, //4
//   34     {0xFF,0xFD,0xB9,0x91}//小三角
//   35 };
//   36 
//   37 //logo 图标
//   38 //uint8 logo[][8] =
//   39 //{{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
//   40 //{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
//   41 //{0x00,0x00,0x00,0x00,0x00,0x0C,0x01,0x00},
//   42 //{0x00,0x00,0x00,0x00,0x00,0x27,0x01,0x00},
//   43 //{0x00,0x00,0x00,0x00,0xF0,0x21,0x01,0x00},
//   44 //{0x00,0x00,0x00,0x00,0x00,0x21,0x01,0x00},
//   45 //{0x00,0x00,0x00,0x00,0x00,0xE1,0xFF,0x07},
//   46 //{0x00,0x00,0x00,0x00,0x00,0x21,0x01,0x06},
//   47 //{0x00,0x00,0x00,0x00,0x00,0x21,0x01,0x03},
//   48 //{0x00,0x00,0x00,0x00,0x00,0x21,0x81,0x01},
//   49 //{0x00,0x00,0x04,0x00,0x00,0x01,0xC1,0x00},
//   50 //{0x00,0x02,0x04,0x00,0x00,0x00,0x40,0x00},
//   51 //{0x00,0x03,0x04,0x00,0x80,0x00,0x00,0x01},
//   52 //{0x00,0x01,0x04,0x00,0x80,0x00,0x08,0x01},
//   53 //{0x80,0x01,0x04,0x00,0x80,0x00,0x88,0x00},
//   54 //{0xC0,0x00,0x04,0x00,0x80,0xFC,0xC9,0x00},
//   55 //{0xE0,0xFF,0x07,0x00,0x80,0x27,0x1F,0x00},
//   56 //{0x00,0x00,0x04,0x00,0xE0,0x25,0x09,0x00},
//   57 //{0x00,0x00,0x04,0x00,0xB0,0x24,0x09,0x00},
//   58 //{0x00,0x00,0x04,0x00,0x90,0x04,0x08,0x00},
//   59 //{0x00,0x00,0x04,0x00,0x80,0x04,0x28,0x00},
//   60 //{0x00,0x00,0x04,0x00,0x80,0xFC,0x6F,0x00},
//   61 //{0x00,0x00,0x00,0x00,0x80,0x00,0xC8,0x01},
//   62 //{0x00,0x00,0x00,0x00,0x00,0x00,0x08,0x00},
//   63 //{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
//   64 //{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
//   65 //{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
//   66 //{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
//   67 //{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
//   68 //{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
//   69 //{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
//   70 //{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
//   71 //{0x00,0x00,0x00,0x1E,0x3C,0x00,0x00,0x00},
//   72 //{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
//   73 //{0x00,0x00,0x00,0xFE,0x3F,0x00,0x00,0x00},
//   74 //{0x00,0x00,0x00,0x00,0x00,0x00,0x04,0x00},
//   75 //{0x00,0x08,0x00,0xFE,0x3F,0x00,0x08,0x00},
//   76 //{0x00,0x04,0x00,0x00,0x00,0x00,0x11,0x00},
//   77 //{0x00,0x22,0x00,0xF0,0x07,0x00,0x02,0x00},
//   78 //{0x00,0x11,0x00,0x0E,0x38,0x40,0x04,0x00},
//   79 //{0x80,0x88,0xC0,0x01,0xC0,0x81,0x00,0x00},
//   80 //{0x40,0x44,0x38,0x00,0x00,0x07,0x01,0x01},
//   81 //{0x20,0x22,0x06,0x00,0x00,0x18,0x00,0x02},
//   82 //{0x10,0x91,0x01,0x00,0x00,0x60,0x40,0x04},
//   83 //{0x88,0x48,0x00,0x00,0x00,0x80,0x81,0x00},
//   84 //{0x40,0x24,0x00,0x00,0x00,0x00,0x12,0x01},
//   85 //{0x20,0x12,0x00,0x00,0x00,0x00,0x24,0x00},
//   86 //{0x00,0x09,0x00,0x00,0x00,0x00,0x48,0x00},
//   87 //{0x80,0x08,0x00,0x00,0x00,0x00,0x10,0x00},
//   88 //{0x00,0x04,0x1C,0x00,0x00,0x00,0x20,0x00},
//   89 //{0x00,0x04,0x36,0x00,0x00,0x00,0x20,0x00},
//   90 //{0x00,0x82,0xC1,0x00,0x00,0x00,0x40,0x00},
//   91 //{0x00,0x42,0x00,0x01,0x00,0x00,0x40,0x00},
//   92 //{0x00,0x22,0x00,0x02,0x00,0x18,0x40,0x00},
//   93 //{0x00,0x11,0x00,0x04,0xF0,0x0F,0x87,0x00},
//   94 //{0x00,0x09,0x00,0x08,0x00,0x81,0x83,0x00},
//   95 //{0x00,0x05,0x20,0x10,0x80,0xC8,0x81,0x00},
//   96 //{0x95,0x04,0x36,0x10,0x80,0xE8,0x00,0xA9},
//   97 //{0x95,0x02,0x93,0x20,0xC0,0xF8,0x00,0xA9},
//   98 //{0x95,0x82,0xDF,0x20,0xC0,0xBF,0x01,0xA9},
//   99 //{0x55,0xC1,0x7C,0x40,0xC0,0x18,0x03,0xAA},
//  100 //{0xC4,0x01,0xEC,0x43,0x00,0x0C,0x06,0x8A},
//  101 //{0xC4,0x00,0xA4,0x87,0x00,0x06,0x04,0x8A},
//  102 //{0xC4,0x00,0x21,0x80,0x00,0x06,0x06,0x8A},
//  103 //{0x44,0x10,0x01,0x80,0x00,0x0C,0x03,0x8B},
//  104 //{0x44,0x30,0x83,0x00,0x01,0x98,0x81,0x8B},
//  105 //{0xD5,0xE0,0xFB,0x00,0x01,0xF0,0x80,0xAA},
//  106 //{0x95,0x00,0x0F,0x00,0x02,0x60,0x40,0xA9},
//  107 //{0x95,0x61,0x02,0x00,0x02,0x00,0x40,0xA9},
//  108 //{0x15,0x31,0x02,0x00,0x04,0x00,0x20,0xA9},
//  109 //{0x00,0x11,0x04,0x00,0x04,0x00,0xA0,0x00},
//  110 //{0x00,0x02,0x04,0x00,0x08,0x00,0x90,0x00},
//  111 //{0x00,0x02,0x04,0x00,0x08,0x00,0x90,0x00},
//  112 //{0x00,0x02,0x04,0x00,0x10,0x00,0x48,0x00},
//  113 //{0x00,0x04,0x04,0x00,0x20,0x00,0x44,0x00},
//  114 //{0x00,0x04,0x00,0x00,0x40,0x00,0x42,0x00},
//  115 //{0x00,0x08,0x00,0x00,0x80,0x81,0x21,0x00},
//  116 //{0x00,0x08,0x00,0x00,0x00,0x66,0x20,0x00},
//  117 //{0x00,0x12,0x00,0x00,0x00,0x18,0x90,0x00},
//  118 //{0x00,0x24,0x00,0x00,0x00,0x00,0x48,0x00},
//  119 //{0x80,0x48,0x00,0x00,0x00,0x00,0x24,0x02},
//  120 //{0x00,0x81,0x00,0x00,0x00,0x00,0x02,0x01},
//  121 //{0x20,0x02,0x01,0x00,0x00,0x80,0x81,0x08},
//  122 //{0x40,0x00,0x02,0x00,0x00,0x60,0x40,0x04},
//  123 //{0x80,0x80,0x04,0x00,0x00,0x18,0x22,0x02},
//  124 //{0x00,0x01,0x39,0x00,0x00,0x07,0x11,0x01},
//  125 //{0x00,0x22,0xC2,0x01,0xC0,0x81,0x88,0x00},
//  126 //{0x00,0x44,0x00,0x0E,0x38,0x00,0x44,0x00},
//  127 //{0x00,0x88,0x00,0xF0,0x07,0x00,0x22,0x00},
//  128 //{0x00,0x10,0x00,0x00,0x00,0x00,0x10,0x00},
//  129 //{0x00,0x20,0x00,0xFE,0x3F,0x00,0x08,0x00},
//  130 //{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
//  131 //{0x00,0x00,0x00,0x1E,0x3C,0x00,0x00,0x00},
//  132 //{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
//  133 //{0x00,0x00,0x00,0x1E,0x3C,0x00,0x00,0x00},
//  134 //{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
//  135 //{0x00,0x00,0x00,0x00,0x00,0x40,0x00,0x00},
//  136 //{0x00,0x00,0x00,0x00,0x00,0x40,0x00,0x00},
//  137 //{0x00,0x00,0x00,0x00,0x00,0x40,0x98,0x00},
//  138 //{0x00,0x00,0x00,0x00,0x00,0x40,0x97,0x00},
//  139 //{0x00,0x00,0x00,0x00,0x00,0xF0,0xD1,0x00},
//  140 //{0x00,0x00,0x00,0x00,0x00,0x4F,0x70,0x00},
//  141 //{0x00,0x00,0x00,0x00,0x00,0x40,0x30,0x00},
//  142 //{0x00,0x00,0x00,0x00,0x00,0x40,0x1E,0x00},
//  143 //{0x00,0x00,0x00,0x00,0x00,0xF8,0x11,0x00},
//  144 //{0xC0,0x07,0x1E,0x00,0x00,0x4F,0x10,0x00},
//  145 //{0x60,0x0C,0x3F,0x00,0x00,0x40,0x10,0x00},
//  146 //{0x20,0x98,0x21,0x00,0x00,0x40,0x10,0x00},
//  147 //{0x10,0xF0,0x60,0x00,0x00,0x00,0xD0,0x00},
//  148 //{0x10,0x60,0x60,0x00,0x00,0x40,0x41,0x00},
//  149 //{0x10,0x30,0x60,0x00,0x00,0x60,0x61,0x00},
//  150 //{0x10,0x70,0x60,0x00,0x00,0x20,0x31,0x00},
//  151 //{0x10,0xC8,0x60,0x00,0x00,0x30,0x19,0x00},
//  152 //{0x30,0x8C,0x60,0x00,0x00,0xF8,0x07,0x00},
//  153 //{0xE0,0x86,0x30,0x00,0x00,0x0C,0x07,0x00},
//  154 //{0x80,0x03,0x1B,0x00,0x00,0x06,0x0D,0x00},
//  155 //{0x00,0x00,0x0E,0x00,0x00,0x82,0x18,0x00},
//  156 //{0x00,0x00,0x00,0x00,0x00,0x80,0x30,0x00},
//  157 //{0x00,0x00,0x00,0x00,0x00,0x80,0x20,0x00},
//  158 //{0x00,0x00,0x00,0x00,0x00,0x80,0x40,0x00},
//  159 //{0x00,0x00,0x00,0x00,0x00,0x80,0xC0,0x00},
//  160 //{0x00,0x00,0x00,0x00,0x00,0x80,0x80,0x00},
//  161 //{0x00,0x00,0x00,0x00,0x00,0x80,0x00,0x00},
//  162 //{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
//  163 //{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
//  164 //{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
//  165 //{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
//  166 //{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00}
//  167 //};
//  168 
//  169 
//  170 //======================================

        SECTION `.rodata`:CONST:REORDER:NOROOT(2)
//  171 const uint8 F6x8[][6] =
F6x8:
        DATA
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 47, 0, 0, 0, 0, 7, 0, 7, 0, 0, 20, 127
        DC8 20, 127, 20, 0, 36, 42, 127, 42, 18, 0, 98, 100, 8, 19, 35, 0, 54
        DC8 73, 85, 34, 80, 0, 0, 5, 3, 0, 0, 0, 0, 28, 34, 65, 0, 0, 0, 65, 34
        DC8 28, 0, 0, 20, 8, 62, 8, 20, 0, 8, 8, 62, 8, 8, 0, 0, 0, 160, 96, 0
        DC8 0, 8, 8, 8, 8, 8, 0, 0, 96, 96, 0, 0, 0, 32, 16, 8, 4, 2, 0, 62, 81
        DC8 73, 69, 62, 0, 0, 66, 127, 64, 0, 0, 66, 97, 81, 73, 70, 0, 33, 65
        DC8 69, 75, 49, 0, 24, 20, 18, 127, 16, 0, 39, 69, 69, 69, 57, 0, 60
        DC8 74, 73, 73, 48, 0, 1, 113, 9, 5, 3, 0, 54, 73, 73, 73, 54, 0, 6, 73
        DC8 73, 41, 30, 0, 0, 54, 54, 0, 0, 0, 0, 86, 54, 0, 0, 0, 8, 20, 34
        DC8 65, 0, 0, 20, 20, 20, 20, 20, 0, 0, 65, 34, 20, 8, 0, 2, 1, 81, 9
        DC8 6, 0, 50, 73, 89, 81, 62, 0, 124, 18, 17, 18, 124, 0, 127, 73, 73
        DC8 73, 54, 0, 62, 65, 65, 65, 34, 0, 127, 65, 65, 34, 28, 0, 127, 73
        DC8 73, 73, 65, 0, 127, 9, 9, 9, 1, 0, 62, 65, 73, 73, 122, 0, 127, 8
        DC8 8, 8, 127, 0, 0, 65, 127, 65, 0, 0, 32, 64, 65, 63, 1, 0, 127, 8
        DC8 20, 34, 65, 0, 127, 64, 64, 64, 64, 0, 127, 2, 12, 2, 127, 0, 127
        DC8 4, 8, 16, 127, 0, 62, 65, 65, 65, 62, 0, 127, 9, 9, 9, 6, 0, 62, 65
        DC8 81, 33, 94, 0, 127, 9, 25, 41, 70, 0, 70, 73, 73, 73, 49, 0, 1, 1
        DC8 127, 1, 1, 0, 63, 64, 64, 64, 63, 0, 31, 32, 64, 32, 31, 0, 63, 64
        DC8 56, 64, 63, 0, 99, 20, 8, 20, 99, 0, 7, 8, 112, 8, 7, 0, 97, 81, 73
        DC8 69, 67, 0, 0, 127, 65, 65, 0, 0, 85, 42, 85, 42, 85, 0, 0, 65, 65
        DC8 127, 0, 0, 4, 2, 1, 2, 4, 0, 64, 64, 64, 64, 64, 0, 0, 1, 2, 4, 0
        DC8 0, 32, 84, 84, 84, 120, 0, 127, 72, 68, 68, 56, 0, 56, 68, 68, 68
        DC8 32, 0, 56, 68, 68, 72, 127, 0, 56, 84, 84, 84, 24, 0, 8, 126, 9, 1
        DC8 2, 0, 24, 164, 164, 164, 124, 0, 127, 8, 4, 4, 120, 0, 0, 68, 125
        DC8 64, 0, 0, 64, 128, 132, 125, 0, 0, 127, 16, 40, 68, 0, 0, 0, 65
        DC8 127, 64, 0, 0, 124, 4, 24, 4, 120, 0, 124, 8, 4, 4, 120, 0, 56, 68
        DC8 68, 68, 56, 0, 252, 36, 36, 36, 24, 0, 24, 36, 36, 24, 252, 0, 124
        DC8 8, 4, 4, 8, 0, 72, 84, 84, 84, 32, 0, 4, 63, 68, 64, 32, 0, 60, 64
        DC8 64, 32, 124, 0, 28, 32, 64, 32, 28, 0, 60, 64, 48, 64, 60, 0, 68
        DC8 40, 16, 40, 68, 0, 28, 160, 160, 160, 124, 0, 68, 100, 84, 76, 68
        DC8 20, 20, 20, 20, 20, 20
//  172 {
//  173     { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },   // sp
//  174     { 0x00, 0x00, 0x00, 0x2f, 0x00, 0x00 },   // !
//  175     { 0x00, 0x00, 0x07, 0x00, 0x07, 0x00 },   // "
//  176     { 0x00, 0x14, 0x7f, 0x14, 0x7f, 0x14 },   // #
//  177     { 0x00, 0x24, 0x2a, 0x7f, 0x2a, 0x12 },   // $
//  178     { 0x00, 0x62, 0x64, 0x08, 0x13, 0x23 },   // %
//  179     { 0x00, 0x36, 0x49, 0x55, 0x22, 0x50 },   // &
//  180     { 0x00, 0x00, 0x05, 0x03, 0x00, 0x00 },   // '
//  181     { 0x00, 0x00, 0x1c, 0x22, 0x41, 0x00 },   // (
//  182     { 0x00, 0x00, 0x41, 0x22, 0x1c, 0x00 },   // )
//  183     { 0x00, 0x14, 0x08, 0x3E, 0x08, 0x14 },   // *
//  184     { 0x00, 0x08, 0x08, 0x3E, 0x08, 0x08 },   // +
//  185     { 0x00, 0x00, 0x00, 0xA0, 0x60, 0x00 },   // ,
//  186     { 0x00, 0x08, 0x08, 0x08, 0x08, 0x08 },   // -
//  187     { 0x00, 0x00, 0x60, 0x60, 0x00, 0x00 },   // .
//  188     { 0x00, 0x20, 0x10, 0x08, 0x04, 0x02 },   // /
//  189     { 0x00, 0x3E, 0x51, 0x49, 0x45, 0x3E },   // 0
//  190     { 0x00, 0x00, 0x42, 0x7F, 0x40, 0x00 },   // 1
//  191     { 0x00, 0x42, 0x61, 0x51, 0x49, 0x46 },   // 2
//  192     { 0x00, 0x21, 0x41, 0x45, 0x4B, 0x31 },   // 3
//  193     { 0x00, 0x18, 0x14, 0x12, 0x7F, 0x10 },   // 4
//  194     { 0x00, 0x27, 0x45, 0x45, 0x45, 0x39 },   // 5
//  195     { 0x00, 0x3C, 0x4A, 0x49, 0x49, 0x30 },   // 6
//  196     { 0x00, 0x01, 0x71, 0x09, 0x05, 0x03 },   // 7
//  197     { 0x00, 0x36, 0x49, 0x49, 0x49, 0x36 },   // 8
//  198     { 0x00, 0x06, 0x49, 0x49, 0x29, 0x1E },   // 9
//  199     { 0x00, 0x00, 0x36, 0x36, 0x00, 0x00 },   // :
//  200     { 0x00, 0x00, 0x56, 0x36, 0x00, 0x00 },   // ;
//  201     { 0x00, 0x08, 0x14, 0x22, 0x41, 0x00 },   // <
//  202     { 0x00, 0x14, 0x14, 0x14, 0x14, 0x14 },   // =
//  203     { 0x00, 0x00, 0x41, 0x22, 0x14, 0x08 },   // >
//  204     { 0x00, 0x02, 0x01, 0x51, 0x09, 0x06 },   // ?
//  205     { 0x00, 0x32, 0x49, 0x59, 0x51, 0x3E },   // @
//  206     { 0x00, 0x7C, 0x12, 0x11, 0x12, 0x7C },   // A
//  207     { 0x00, 0x7F, 0x49, 0x49, 0x49, 0x36 },   // B
//  208     { 0x00, 0x3E, 0x41, 0x41, 0x41, 0x22 },   // C
//  209     { 0x00, 0x7F, 0x41, 0x41, 0x22, 0x1C },   // D
//  210     { 0x00, 0x7F, 0x49, 0x49, 0x49, 0x41 },   // E
//  211     { 0x00, 0x7F, 0x09, 0x09, 0x09, 0x01 },   // F
//  212     { 0x00, 0x3E, 0x41, 0x49, 0x49, 0x7A },   // G
//  213     { 0x00, 0x7F, 0x08, 0x08, 0x08, 0x7F },   // H
//  214     { 0x00, 0x00, 0x41, 0x7F, 0x41, 0x00 },   // I
//  215     { 0x00, 0x20, 0x40, 0x41, 0x3F, 0x01 },   // J
//  216     { 0x00, 0x7F, 0x08, 0x14, 0x22, 0x41 },   // K
//  217     { 0x00, 0x7F, 0x40, 0x40, 0x40, 0x40 },   // L
//  218     { 0x00, 0x7F, 0x02, 0x0C, 0x02, 0x7F },   // M
//  219     { 0x00, 0x7F, 0x04, 0x08, 0x10, 0x7F },   // N
//  220     { 0x00, 0x3E, 0x41, 0x41, 0x41, 0x3E },   // O
//  221     { 0x00, 0x7F, 0x09, 0x09, 0x09, 0x06 },   // P
//  222     { 0x00, 0x3E, 0x41, 0x51, 0x21, 0x5E },   // Q
//  223     { 0x00, 0x7F, 0x09, 0x19, 0x29, 0x46 },   // R
//  224     { 0x00, 0x46, 0x49, 0x49, 0x49, 0x31 },   // S
//  225     { 0x00, 0x01, 0x01, 0x7F, 0x01, 0x01 },   // T
//  226     { 0x00, 0x3F, 0x40, 0x40, 0x40, 0x3F },   // U
//  227     { 0x00, 0x1F, 0x20, 0x40, 0x20, 0x1F },   // V
//  228     { 0x00, 0x3F, 0x40, 0x38, 0x40, 0x3F },   // W
//  229     { 0x00, 0x63, 0x14, 0x08, 0x14, 0x63 },   // X
//  230     { 0x00, 0x07, 0x08, 0x70, 0x08, 0x07 },   // Y
//  231     { 0x00, 0x61, 0x51, 0x49, 0x45, 0x43 },   // Z
//  232     { 0x00, 0x00, 0x7F, 0x41, 0x41, 0x00 },   // [
//  233     { 0x00, 0x55, 0x2A, 0x55, 0x2A, 0x55 },   // /*\*/
//  234     { 0x00, 0x00, 0x41, 0x41, 0x7F, 0x00 },   // ]
//  235     { 0x00, 0x04, 0x02, 0x01, 0x02, 0x04 },   // ^
//  236     { 0x00, 0x40, 0x40, 0x40, 0x40, 0x40 },   // _
//  237     { 0x00, 0x00, 0x01, 0x02, 0x04, 0x00 },   // '
//  238     { 0x00, 0x20, 0x54, 0x54, 0x54, 0x78 },   // a
//  239     { 0x00, 0x7F, 0x48, 0x44, 0x44, 0x38 },   // b
//  240     { 0x00, 0x38, 0x44, 0x44, 0x44, 0x20 },   // c
//  241     { 0x00, 0x38, 0x44, 0x44, 0x48, 0x7F },   // d
//  242     { 0x00, 0x38, 0x54, 0x54, 0x54, 0x18 },   // e
//  243     { 0x00, 0x08, 0x7E, 0x09, 0x01, 0x02 },   // f
//  244     { 0x00, 0x18, 0xA4, 0xA4, 0xA4, 0x7C },   // g
//  245     { 0x00, 0x7F, 0x08, 0x04, 0x04, 0x78 },   // h
//  246     { 0x00, 0x00, 0x44, 0x7D, 0x40, 0x00 },   // i
//  247     { 0x00, 0x40, 0x80, 0x84, 0x7D, 0x00 },   // j
//  248     { 0x00, 0x7F, 0x10, 0x28, 0x44, 0x00 },   // k
//  249     { 0x00, 0x00, 0x41, 0x7F, 0x40, 0x00 },   // l
//  250     { 0x00, 0x7C, 0x04, 0x18, 0x04, 0x78 },   // m
//  251     { 0x00, 0x7C, 0x08, 0x04, 0x04, 0x78 },   // n
//  252     { 0x00, 0x38, 0x44, 0x44, 0x44, 0x38 },   // o
//  253     { 0x00, 0xFC, 0x24, 0x24, 0x24, 0x18 },   // p
//  254     { 0x00, 0x18, 0x24, 0x24, 0x18, 0xFC },   // q
//  255     { 0x00, 0x7C, 0x08, 0x04, 0x04, 0x08 },   // r
//  256     { 0x00, 0x48, 0x54, 0x54, 0x54, 0x20 },   // s
//  257     { 0x00, 0x04, 0x3F, 0x44, 0x40, 0x20 },   // t
//  258     { 0x00, 0x3C, 0x40, 0x40, 0x20, 0x7C },   // u
//  259     { 0x00, 0x1C, 0x20, 0x40, 0x20, 0x1C },   // v
//  260     { 0x00, 0x3C, 0x40, 0x30, 0x40, 0x3C },   // w
//  261     { 0x00, 0x44, 0x28, 0x10, 0x28, 0x44 },   // x
//  262     { 0x00, 0x1C, 0xA0, 0xA0, 0xA0, 0x7C },   // y
//  263     { 0x00, 0x44, 0x64, 0x54, 0x4C, 0x44 },   // z
//  264     { 0x14, 0x14, 0x14, 0x14, 0x14, 0x14 }    // horiz lines
//  265 };
//  266 

        SECTION `.rodata`:CONST:REORDER:NOROOT(2)
//  267 const uint8 F8X16[]=
F8X16:
        DATA
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 248, 0, 0
        DC8 0, 0, 0, 0, 0, 51, 48, 0, 0, 0, 0, 16, 12, 6, 16, 12, 6, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 64, 192, 120, 64, 192, 120, 64, 0, 4, 63, 4, 4, 63
        DC8 4, 4, 0, 0, 112, 136, 252, 8, 48, 0, 0, 0, 24, 32, 255, 33, 30, 0
        DC8 0, 240, 8, 240, 0, 224, 24, 0, 0, 0, 33, 28, 3, 30, 33, 30, 0, 0
        DC8 240, 8, 136, 112, 0, 0, 0, 30, 33, 35, 36, 25, 39, 33, 16, 16, 22
        DC8 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 224, 24, 4, 2
        DC8 0, 0, 0, 0, 7, 24, 32, 64, 0, 0, 2, 4, 24, 224, 0, 0, 0, 0, 64, 32
        DC8 24, 7, 0, 0, 0, 64, 64, 128, 240, 128, 64, 64, 0, 2, 2, 1, 15, 1, 2
        DC8 2, 0, 0, 0, 0, 240, 0, 0, 0, 0, 1, 1, 1, 31, 1, 1, 1, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 128, 176, 112, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 48, 48, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 128, 96, 24, 4, 0, 96, 24, 6, 1, 0, 0, 0, 0, 224, 16
        DC8 8, 8, 16, 224, 0, 0, 15, 16, 32, 32, 16, 15, 0, 0, 16, 16, 248, 0
        DC8 0, 0, 0, 0, 32, 32, 63, 32, 32, 0, 0, 0, 112, 8, 8, 8, 136, 112, 0
        DC8 0, 48, 40, 36, 34, 33, 48, 0, 0, 48, 8, 136, 136, 72, 48, 0, 0, 24
        DC8 32, 32, 32, 17, 14, 0, 0, 0, 192, 32, 16, 248, 0, 0, 0, 7, 4, 36
        DC8 36, 63, 36, 0, 0, 248, 8, 136, 136, 8, 8, 0, 0, 25, 33, 32, 32, 17
        DC8 14, 0, 0, 224, 16, 136, 136, 24, 0, 0, 0, 15, 17, 32, 32, 17, 14, 0
        DC8 0, 56, 8, 8, 200, 56, 8, 0, 0, 0, 0, 63, 0, 0, 0, 0, 0, 112, 136, 8
        DC8 8, 136, 112, 0, 0, 28, 34, 33, 33, 34, 28, 0, 0, 224, 16, 8, 8, 16
        DC8 224, 0, 0, 0, 49, 34, 34, 17, 15, 0, 0, 0, 0, 192, 192, 0, 0, 0, 0
        DC8 0, 0, 48, 48, 0, 0, 0, 0, 0, 0, 128, 0, 0, 0, 0, 0, 0, 128, 96, 0
        DC8 0, 0, 0, 0, 0, 128, 64, 32, 16, 8, 0, 0, 1, 2, 4, 8, 16, 32, 0, 64
        DC8 64, 64, 64, 64, 64, 64, 0, 4, 4, 4, 4, 4, 4, 4, 0, 0, 8, 16, 32, 64
        DC8 128, 0, 0, 0, 32, 16, 8, 4, 2, 1, 0, 0, 112, 72, 8, 8, 8, 240, 0, 0
        DC8 0, 0, 48, 54, 1, 0, 0, 192, 48, 200, 40, 232, 16, 224, 0, 7, 24, 39
        DC8 36, 35, 20, 11, 0, 0, 0, 192, 56, 224, 0, 0, 0, 32, 60, 35, 2, 2
        DC8 39, 56, 32, 8, 248, 136, 136, 136, 112, 0, 0, 32, 63, 32, 32, 32
        DC8 17, 14, 0, 192, 48, 8, 8, 8, 8, 56, 0, 7, 24, 32, 32, 32, 16, 8, 0
        DC8 8, 248, 8, 8, 8, 16, 224, 0, 32, 63, 32, 32, 32, 16, 15, 0, 8, 248
        DC8 136, 136, 232, 8, 16, 0, 32, 63, 32, 32, 35, 32, 24, 0, 8, 248, 136
        DC8 136, 232, 8, 16, 0, 32, 63, 32, 0, 3, 0, 0, 0, 192, 48, 8, 8, 8, 56
        DC8 0, 0, 7, 24, 32, 32, 34, 30, 2, 0, 8, 248, 8, 0, 0, 8, 248, 8, 32
        DC8 63, 33, 1, 1, 33, 63, 32, 0, 8, 8, 248, 8, 8, 0, 0, 0, 32, 32, 63
        DC8 32, 32, 0, 0, 0, 0, 8, 8, 248, 8, 8, 0, 192, 128, 128, 128, 127, 0
        DC8 0, 0, 8, 248, 136, 192, 40, 24, 8, 0, 32, 63, 32, 1, 38, 56, 32, 0
        DC8 8, 248, 8, 0, 0, 0, 0, 0, 32, 63, 32, 32, 32, 32, 48, 0, 8, 248
        DC8 248, 0, 248, 248, 8, 0, 32, 63, 0, 63, 0, 63, 32, 0, 8, 248, 48
        DC8 192, 0, 8, 248, 8, 32, 63, 32, 0, 7, 24, 63, 0, 224, 16, 8, 8, 8
        DC8 16, 224, 0, 15, 16, 32, 32, 32, 16, 15, 0, 8, 248, 8, 8, 8, 8, 240
        DC8 0, 32, 63, 33, 1, 1, 1, 0, 0, 224, 16, 8, 8, 8, 16, 224, 0, 15, 24
        DC8 36, 36, 56, 80, 79, 0, 8, 248, 136, 136, 136, 136, 112, 0, 32, 63
        DC8 32, 0, 3, 12, 48, 32, 0, 112, 136, 8, 8, 8, 56, 0, 0, 56, 32, 33
        DC8 33, 34, 28, 0, 24, 8, 8, 248, 8, 8, 24, 0, 0, 0, 32, 63, 32, 0, 0
        DC8 0, 8, 248, 8, 0, 0, 8, 248, 8, 0, 31, 32, 32, 32, 32, 31, 0, 8, 120
        DC8 136, 0, 0, 200, 56, 8, 0, 0, 7, 56, 14, 1, 0, 0, 248, 8, 0, 248, 0
        DC8 8, 248, 0, 3, 60, 7, 0, 7, 60, 3, 0, 8, 24, 104, 128, 128, 104, 24
        DC8 8, 32, 48, 44, 3, 3, 44, 48, 32, 8, 56, 200, 0, 200, 56, 8, 0, 0, 0
        DC8 32, 63, 32, 0, 0, 0, 16, 8, 8, 8, 200, 56, 8, 0, 32, 56, 38, 33, 32
        DC8 32, 24, 0, 0, 0, 0, 254, 2, 2, 2, 0, 0, 0, 0, 127, 64, 64, 64, 0, 0
        DC8 12, 48, 192, 0, 0, 0, 0, 0, 0, 0, 1, 6, 56, 192, 0, 0, 2, 2, 2, 254
        DC8 0, 0, 0, 0, 64, 64, 64, 127, 0, 0, 0, 0, 0, 4, 2, 2, 2, 4, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 128, 128, 128, 128, 128
        DC8 128, 128, 128, 0, 2, 2, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 128, 128, 128, 128, 0, 0, 0, 25, 36, 34, 34, 34, 63, 32, 8, 248, 0
        DC8 128, 128, 0, 0, 0, 0, 63, 17, 32, 32, 17, 14, 0, 0, 0, 0, 128, 128
        DC8 128, 0, 0, 0, 14, 17, 32, 32, 32, 17, 0, 0, 0, 0, 128, 128, 136
        DC8 248, 0, 0, 14, 17, 32, 32, 16, 63, 32, 0, 0, 128, 128, 128, 128, 0
        DC8 0, 0, 31, 34, 34, 34, 34, 19, 0, 0, 128, 128, 240, 136, 136, 136
        DC8 24, 0, 32, 32, 63, 32, 32, 0, 0, 0, 0, 128, 128, 128, 128, 128, 0
        DC8 0, 107, 148, 148, 148, 147, 96, 0, 8, 248, 0, 128, 128, 128, 0, 0
        DC8 32, 63, 33, 0, 0, 32, 63, 32, 0, 128, 152, 152, 0, 0, 0, 0, 0, 32
        DC8 32, 63, 32, 32, 0, 0, 0, 0, 0, 128, 152, 152, 0, 0, 0, 192, 128
        DC8 128, 128, 127, 0, 0, 8, 248, 0, 0, 128, 128, 128, 0, 32, 63, 36, 2
        DC8 45, 48, 32, 0, 0, 8, 8, 248, 0, 0, 0, 0, 0, 32, 32, 63, 32, 32, 0
        DC8 0, 128, 128, 128, 128, 128, 128, 128, 0, 32, 63, 32, 0, 63, 32, 0
        DC8 63, 128, 128, 0, 128, 128, 128, 0, 0, 32, 63, 33, 0, 0, 32, 63, 32
        DC8 0, 0, 128, 128, 128, 128, 0, 0, 0, 31, 32, 32, 32, 32, 31, 0, 128
        DC8 128, 0, 128, 128, 0, 0, 0, 128, 255, 161, 32, 32, 17, 14, 0, 0, 0
        DC8 0, 128, 128, 128, 128, 0, 0, 14, 17, 32, 32, 160, 255, 128, 128
        DC8 128, 128, 0, 128, 128, 128, 0, 32, 32, 63, 33, 32, 0, 1, 0, 0, 0
        DC8 128, 128, 128, 128, 128, 0, 0, 51, 36, 36, 36, 36, 25, 0, 0, 128
        DC8 128, 224, 128, 128, 0, 0, 0, 0, 0, 31, 32, 32, 0, 0, 128, 128, 0, 0
        DC8 0, 128, 128, 0, 0, 31, 32, 32, 32, 16, 63, 32, 128, 128, 128, 0, 0
        DC8 128, 128, 128, 0, 1, 14, 48, 8, 6, 1, 0, 128, 128, 0, 128, 0, 128
        DC8 128, 128, 15, 48, 12, 3, 12, 48, 15, 0, 0, 128, 128, 0, 128, 128
        DC8 128, 0, 0, 32, 49, 46, 14, 49, 32, 0, 128, 128, 128, 0, 0, 128, 128
        DC8 128, 128, 129, 142, 112, 24, 6, 1, 0, 0, 128, 128, 128, 128, 128
        DC8 128, 0, 0, 33, 48, 44, 34, 33, 48, 0, 0, 0, 0, 0, 128, 124, 2, 2, 0
        DC8 0, 0, 0, 0, 63, 64, 64, 0, 0, 0, 0, 255, 0, 0, 0, 0, 0, 0, 0, 255
        DC8 0, 0, 0, 0, 2, 2, 124, 128, 0, 0, 0, 0, 64, 64, 63, 0, 0, 0, 0, 0
        DC8 6, 1, 1, 2, 2, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0
//  268 {
//  269   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,// 0
//  270   0x00,0x00,0x00,0xF8,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x33,0x30,0x00,0x00,0x00,//!1
//  271   0x00,0x10,0x0C,0x06,0x10,0x0C,0x06,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,//"2
//  272   0x40,0xC0,0x78,0x40,0xC0,0x78,0x40,0x00,0x04,0x3F,0x04,0x04,0x3F,0x04,0x04,0x00,//#3
//  273   0x00,0x70,0x88,0xFC,0x08,0x30,0x00,0x00,0x00,0x18,0x20,0xFF,0x21,0x1E,0x00,0x00,//$4
//  274   0xF0,0x08,0xF0,0x00,0xE0,0x18,0x00,0x00,0x00,0x21,0x1C,0x03,0x1E,0x21,0x1E,0x00,//%5
//  275   0x00,0xF0,0x08,0x88,0x70,0x00,0x00,0x00,0x1E,0x21,0x23,0x24,0x19,0x27,0x21,0x10,//&6
//  276   0x10,0x16,0x0E,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,//'7
//  277   0x00,0x00,0x00,0xE0,0x18,0x04,0x02,0x00,0x00,0x00,0x00,0x07,0x18,0x20,0x40,0x00,//(8
//  278   0x00,0x02,0x04,0x18,0xE0,0x00,0x00,0x00,0x00,0x40,0x20,0x18,0x07,0x00,0x00,0x00,//)9
//  279   0x40,0x40,0x80,0xF0,0x80,0x40,0x40,0x00,0x02,0x02,0x01,0x0F,0x01,0x02,0x02,0x00,//*10
//  280   0x00,0x00,0x00,0xF0,0x00,0x00,0x00,0x00,0x01,0x01,0x01,0x1F,0x01,0x01,0x01,0x00,//+11
//  281   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0xB0,0x70,0x00,0x00,0x00,0x00,0x00,//,12
//  282   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x01,0x01,0x01,0x01,0x01,0x01,//-13
//  283   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x30,0x30,0x00,0x00,0x00,0x00,0x00,//.14
//  284   0x00,0x00,0x00,0x00,0x80,0x60,0x18,0x04,0x00,0x60,0x18,0x06,0x01,0x00,0x00,0x00,///15
//  285   0x00,0xE0,0x10,0x08,0x08,0x10,0xE0,0x00,0x00,0x0F,0x10,0x20,0x20,0x10,0x0F,0x00,//016
//  286   0x00,0x10,0x10,0xF8,0x00,0x00,0x00,0x00,0x00,0x20,0x20,0x3F,0x20,0x20,0x00,0x00,//117
//  287   0x00,0x70,0x08,0x08,0x08,0x88,0x70,0x00,0x00,0x30,0x28,0x24,0x22,0x21,0x30,0x00,//218
//  288   0x00,0x30,0x08,0x88,0x88,0x48,0x30,0x00,0x00,0x18,0x20,0x20,0x20,0x11,0x0E,0x00,//319
//  289   0x00,0x00,0xC0,0x20,0x10,0xF8,0x00,0x00,0x00,0x07,0x04,0x24,0x24,0x3F,0x24,0x00,//420
//  290   0x00,0xF8,0x08,0x88,0x88,0x08,0x08,0x00,0x00,0x19,0x21,0x20,0x20,0x11,0x0E,0x00,//521
//  291   0x00,0xE0,0x10,0x88,0x88,0x18,0x00,0x00,0x00,0x0F,0x11,0x20,0x20,0x11,0x0E,0x00,//622
//  292   0x00,0x38,0x08,0x08,0xC8,0x38,0x08,0x00,0x00,0x00,0x00,0x3F,0x00,0x00,0x00,0x00,//723
//  293   0x00,0x70,0x88,0x08,0x08,0x88,0x70,0x00,0x00,0x1C,0x22,0x21,0x21,0x22,0x1C,0x00,//824
//  294   0x00,0xE0,0x10,0x08,0x08,0x10,0xE0,0x00,0x00,0x00,0x31,0x22,0x22,0x11,0x0F,0x00,//925
//  295   0x00,0x00,0x00,0xC0,0xC0,0x00,0x00,0x00,0x00,0x00,0x00,0x30,0x30,0x00,0x00,0x00,//:26
//  296   0x00,0x00,0x00,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x60,0x00,0x00,0x00,0x00,//;27
//  297   0x00,0x00,0x80,0x40,0x20,0x10,0x08,0x00,0x00,0x01,0x02,0x04,0x08,0x10,0x20,0x00,//<28
//  298   0x40,0x40,0x40,0x40,0x40,0x40,0x40,0x00,0x04,0x04,0x04,0x04,0x04,0x04,0x04,0x00,//=29
//  299   0x00,0x08,0x10,0x20,0x40,0x80,0x00,0x00,0x00,0x20,0x10,0x08,0x04,0x02,0x01,0x00,//>30
//  300   0x00,0x70,0x48,0x08,0x08,0x08,0xF0,0x00,0x00,0x00,0x00,0x30,0x36,0x01,0x00,0x00,//?31
//  301   0xC0,0x30,0xC8,0x28,0xE8,0x10,0xE0,0x00,0x07,0x18,0x27,0x24,0x23,0x14,0x0B,0x00,//@32
//  302   0x00,0x00,0xC0,0x38,0xE0,0x00,0x00,0x00,0x20,0x3C,0x23,0x02,0x02,0x27,0x38,0x20,//A33
//  303   0x08,0xF8,0x88,0x88,0x88,0x70,0x00,0x00,0x20,0x3F,0x20,0x20,0x20,0x11,0x0E,0x00,//B34
//  304   0xC0,0x30,0x08,0x08,0x08,0x08,0x38,0x00,0x07,0x18,0x20,0x20,0x20,0x10,0x08,0x00,//C35
//  305   0x08,0xF8,0x08,0x08,0x08,0x10,0xE0,0x00,0x20,0x3F,0x20,0x20,0x20,0x10,0x0F,0x00,//D36
//  306   0x08,0xF8,0x88,0x88,0xE8,0x08,0x10,0x00,0x20,0x3F,0x20,0x20,0x23,0x20,0x18,0x00,//E37
//  307   0x08,0xF8,0x88,0x88,0xE8,0x08,0x10,0x00,0x20,0x3F,0x20,0x00,0x03,0x00,0x00,0x00,//F38
//  308   0xC0,0x30,0x08,0x08,0x08,0x38,0x00,0x00,0x07,0x18,0x20,0x20,0x22,0x1E,0x02,0x00,//G39
//  309   0x08,0xF8,0x08,0x00,0x00,0x08,0xF8,0x08,0x20,0x3F,0x21,0x01,0x01,0x21,0x3F,0x20,//H40
//  310   0x00,0x08,0x08,0xF8,0x08,0x08,0x00,0x00,0x00,0x20,0x20,0x3F,0x20,0x20,0x00,0x00,//I41
//  311   0x00,0x00,0x08,0x08,0xF8,0x08,0x08,0x00,0xC0,0x80,0x80,0x80,0x7F,0x00,0x00,0x00,//J42
//  312   0x08,0xF8,0x88,0xC0,0x28,0x18,0x08,0x00,0x20,0x3F,0x20,0x01,0x26,0x38,0x20,0x00,//K43
//  313   0x08,0xF8,0x08,0x00,0x00,0x00,0x00,0x00,0x20,0x3F,0x20,0x20,0x20,0x20,0x30,0x00,//L44
//  314   0x08,0xF8,0xF8,0x00,0xF8,0xF8,0x08,0x00,0x20,0x3F,0x00,0x3F,0x00,0x3F,0x20,0x00,//M45
//  315   0x08,0xF8,0x30,0xC0,0x00,0x08,0xF8,0x08,0x20,0x3F,0x20,0x00,0x07,0x18,0x3F,0x00,//N46
//  316   0xE0,0x10,0x08,0x08,0x08,0x10,0xE0,0x00,0x0F,0x10,0x20,0x20,0x20,0x10,0x0F,0x00,//O47
//  317   0x08,0xF8,0x08,0x08,0x08,0x08,0xF0,0x00,0x20,0x3F,0x21,0x01,0x01,0x01,0x00,0x00,//P48
//  318   0xE0,0x10,0x08,0x08,0x08,0x10,0xE0,0x00,0x0F,0x18,0x24,0x24,0x38,0x50,0x4F,0x00,//Q49
//  319   0x08,0xF8,0x88,0x88,0x88,0x88,0x70,0x00,0x20,0x3F,0x20,0x00,0x03,0x0C,0x30,0x20,//R50
//  320   0x00,0x70,0x88,0x08,0x08,0x08,0x38,0x00,0x00,0x38,0x20,0x21,0x21,0x22,0x1C,0x00,//S51
//  321   0x18,0x08,0x08,0xF8,0x08,0x08,0x18,0x00,0x00,0x00,0x20,0x3F,0x20,0x00,0x00,0x00,//T52
//  322   0x08,0xF8,0x08,0x00,0x00,0x08,0xF8,0x08,0x00,0x1F,0x20,0x20,0x20,0x20,0x1F,0x00,//U53
//  323   0x08,0x78,0x88,0x00,0x00,0xC8,0x38,0x08,0x00,0x00,0x07,0x38,0x0E,0x01,0x00,0x00,//V54
//  324   0xF8,0x08,0x00,0xF8,0x00,0x08,0xF8,0x00,0x03,0x3C,0x07,0x00,0x07,0x3C,0x03,0x00,//W55
//  325   0x08,0x18,0x68,0x80,0x80,0x68,0x18,0x08,0x20,0x30,0x2C,0x03,0x03,0x2C,0x30,0x20,//X56
//  326   0x08,0x38,0xC8,0x00,0xC8,0x38,0x08,0x00,0x00,0x00,0x20,0x3F,0x20,0x00,0x00,0x00,//Y57
//  327   0x10,0x08,0x08,0x08,0xC8,0x38,0x08,0x00,0x20,0x38,0x26,0x21,0x20,0x20,0x18,0x00,//Z58
//  328   0x00,0x00,0x00,0xFE,0x02,0x02,0x02,0x00,0x00,0x00,0x00,0x7F,0x40,0x40,0x40,0x00,//[59
//  329   0x00,0x0C,0x30,0xC0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x06,0x38,0xC0,0x00,//\60
//  330   0x00,0x02,0x02,0x02,0xFE,0x00,0x00,0x00,0x00,0x40,0x40,0x40,0x7F,0x00,0x00,0x00,//]61
//  331   0x00,0x00,0x04,0x02,0x02,0x02,0x04,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,//^62
//  332   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,//_63
//  333   0x00,0x02,0x02,0x04,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,//`64
//  334   0x00,0x00,0x80,0x80,0x80,0x80,0x00,0x00,0x00,0x19,0x24,0x22,0x22,0x22,0x3F,0x20,//a65
//  335   0x08,0xF8,0x00,0x80,0x80,0x00,0x00,0x00,0x00,0x3F,0x11,0x20,0x20,0x11,0x0E,0x00,//b66
//  336   0x00,0x00,0x00,0x80,0x80,0x80,0x00,0x00,0x00,0x0E,0x11,0x20,0x20,0x20,0x11,0x00,//c67
//  337   0x00,0x00,0x00,0x80,0x80,0x88,0xF8,0x00,0x00,0x0E,0x11,0x20,0x20,0x10,0x3F,0x20,//d68
//  338   0x00,0x00,0x80,0x80,0x80,0x80,0x00,0x00,0x00,0x1F,0x22,0x22,0x22,0x22,0x13,0x00,//e69
//  339   0x00,0x80,0x80,0xF0,0x88,0x88,0x88,0x18,0x00,0x20,0x20,0x3F,0x20,0x20,0x00,0x00,//f70
//  340   0x00,0x00,0x80,0x80,0x80,0x80,0x80,0x00,0x00,0x6B,0x94,0x94,0x94,0x93,0x60,0x00,//g71
//  341   0x08,0xF8,0x00,0x80,0x80,0x80,0x00,0x00,0x20,0x3F,0x21,0x00,0x00,0x20,0x3F,0x20,//h72
//  342   0x00,0x80,0x98,0x98,0x00,0x00,0x00,0x00,0x00,0x20,0x20,0x3F,0x20,0x20,0x00,0x00,//i73
//  343   0x00,0x00,0x00,0x80,0x98,0x98,0x00,0x00,0x00,0xC0,0x80,0x80,0x80,0x7F,0x00,0x00,//j74
//  344   0x08,0xF8,0x00,0x00,0x80,0x80,0x80,0x00,0x20,0x3F,0x24,0x02,0x2D,0x30,0x20,0x00,//k75
//  345   0x00,0x08,0x08,0xF8,0x00,0x00,0x00,0x00,0x00,0x20,0x20,0x3F,0x20,0x20,0x00,0x00,//l76
//  346   0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x00,0x20,0x3F,0x20,0x00,0x3F,0x20,0x00,0x3F,//m77
//  347   0x80,0x80,0x00,0x80,0x80,0x80,0x00,0x00,0x20,0x3F,0x21,0x00,0x00,0x20,0x3F,0x20,//n78
//  348   0x00,0x00,0x80,0x80,0x80,0x80,0x00,0x00,0x00,0x1F,0x20,0x20,0x20,0x20,0x1F,0x00,//o79
//  349   0x80,0x80,0x00,0x80,0x80,0x00,0x00,0x00,0x80,0xFF,0xA1,0x20,0x20,0x11,0x0E,0x00,//p80
//  350   0x00,0x00,0x00,0x80,0x80,0x80,0x80,0x00,0x00,0x0E,0x11,0x20,0x20,0xA0,0xFF,0x80,//q81
//  351   0x80,0x80,0x80,0x00,0x80,0x80,0x80,0x00,0x20,0x20,0x3F,0x21,0x20,0x00,0x01,0x00,//r82
//  352   0x00,0x00,0x80,0x80,0x80,0x80,0x80,0x00,0x00,0x33,0x24,0x24,0x24,0x24,0x19,0x00,//s83
//  353   0x00,0x80,0x80,0xE0,0x80,0x80,0x00,0x00,0x00,0x00,0x00,0x1F,0x20,0x20,0x00,0x00,//t84
//  354   0x80,0x80,0x00,0x00,0x00,0x80,0x80,0x00,0x00,0x1F,0x20,0x20,0x20,0x10,0x3F,0x20,//u85
//  355   0x80,0x80,0x80,0x00,0x00,0x80,0x80,0x80,0x00,0x01,0x0E,0x30,0x08,0x06,0x01,0x00,//v86
//  356   0x80,0x80,0x00,0x80,0x00,0x80,0x80,0x80,0x0F,0x30,0x0C,0x03,0x0C,0x30,0x0F,0x00,//w87
//  357   0x00,0x80,0x80,0x00,0x80,0x80,0x80,0x00,0x00,0x20,0x31,0x2E,0x0E,0x31,0x20,0x00,//x88
//  358   0x80,0x80,0x80,0x00,0x00,0x80,0x80,0x80,0x80,0x81,0x8E,0x70,0x18,0x06,0x01,0x00,//y89
//  359   0x00,0x80,0x80,0x80,0x80,0x80,0x80,0x00,0x00,0x21,0x30,0x2C,0x22,0x21,0x30,0x00,//z90
//  360   0x00,0x00,0x00,0x00,0x80,0x7C,0x02,0x02,0x00,0x00,0x00,0x00,0x00,0x3F,0x40,0x40,//{91
//  361   0x00,0x00,0x00,0x00,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0x00,0x00,0x00,//|92
//  362   0x00,0x02,0x02,0x7C,0x80,0x00,0x00,0x00,0x00,0x40,0x40,0x3F,0x00,0x00,0x00,0x00,//}93
//  363   0x00,0x06,0x01,0x01,0x02,0x02,0x04,0x04,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,//~94
//  364 };
//  365 
//  366 /**
//  367   * 简介
//  368   *     写命令
//  369 //  */
//  370 //void OLED_WrCmd(unsigned char cmd)
//  371 //{
//  372 //  uint8 i=8;
//  373 //  CL_CS
//  374 //  CL_DC
//  375 //  while(i--)
//  376 //  {
//  377 //    CL_OSCLK
//  378 //    if(cmd&0x80)
//  379 //      SDIN
//  380 //    else
//  381 //      CL_SDIN
//  382 //    cmd<<=1;
//  383 //    OSCLK
//  384 //  }
//  385 //  DC
//  386 //  CS
//  387 //}

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
//  388 void OLED_WrCmd(unsigned char cmd)
//  389 {
OLED_WrCmd:
        PUSH     {R4,LR}
        MOVS     R4,R0
//  390     CL_DC;
        MOVS     R1,#+0
        MOVS     R0,#+70
        BL       GpioSet
//  391 
//  392     while ( !( OLED_SPI[1]->S & SPI_S_SPTEF_MASK ) );
??OLED_WrCmd_0:
        LDR      R0,??DataTable4
        LDR      R0,[R0, #+4]
        LDRB     R0,[R0, #+3]
        LSLS     R0,R0,#+26
        BPL      ??OLED_WrCmd_0
//  393     OLED_SPI[1]->D = cmd;
        LDR      R0,??DataTable4
        LDR      R0,[R0, #+4]
        STRB     R4,[R0, #+5]
//  394 
//  395     DC;
        MOVS     R1,#+1
        MOVS     R0,#+70
        BL       GpioSet
//  396 }
        POP      {R4,PC}          ;; return
//  397 /**
//  398   * 简介
//  399   *     写数据
//  400   */
//  401 //void OLED_WrDat(unsigned char data)
//  402 //{
//  403 //  uint8 i=8;
//  404 //  CL_CS
//  405 //  DC
//  406 //  while(i--)
//  407 //  {
//  408 //    CL_OSCLK
//  409 //    if(data&0x80)
//  410 //      SDIN
//  411 //    else
//  412 //      CL_SDIN
//  413 //    data<<=1;
//  414 //    OSCLK
//  415 //  }
//  416 //  DC
//  417 //  CS
//  418 //}

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
//  419 void OLED_WrDat(unsigned char data)
//  420 {
OLED_WrDat:
        PUSH     {R4,LR}
        MOVS     R4,R0
//  421     DC;
        MOVS     R1,#+1
        MOVS     R0,#+70
        BL       GpioSet
//  422     while( !( OLED_SPI[1]->S & SPI_S_SPTEF_MASK ) );
??OLED_WrDat_0:
        LDR      R0,??DataTable4
        LDR      R0,[R0, #+4]
        LDRB     R0,[R0, #+3]
        LSLS     R0,R0,#+26
        BPL      ??OLED_WrDat_0
//  423     OLED_SPI[1]->D = data;
        LDR      R0,??DataTable4
        LDR      R0,[R0, #+4]
        STRB     R4,[R0, #+5]
//  424     CL_DC;
        MOVS     R1,#+0
        MOVS     R0,#+70
        BL       GpioSet
//  425 }
        POP      {R4,PC}          ;; return
//  426 
//  427 
//  428 /**
//  429   * 简介
//  430   *     清屏
//  431   */

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
//  432 void OLED_Clear(void)
//  433 {
OLED_Clear:
        PUSH     {R3-R5,LR}
//  434     uint8 y, x;
//  435     for (y=0; y<8; y++)
        MOVS     R4,#+0
        B        ??OLED_Clear_0
//  436     {
//  437         OLED_WrCmd(0xb0+y);//设置页地址（0~7）
//  438         OLED_WrCmd(0x01);  //设置显示位置―列低地址,偏移了1列
//  439         OLED_WrCmd(0x10);  //设置显示位置―列高地址
//  440         for(x=0; x<Max_Column; x++)
//  441             OLED_WrDat(0);
??OLED_Clear_1:
        MOVS     R0,#+0
        BL       OLED_WrDat
        ADDS     R5,R5,#+1
??OLED_Clear_2:
        UXTB     R5,R5
        CMP      R5,#+128
        BLT      ??OLED_Clear_1
        ADDS     R4,R4,#+1
??OLED_Clear_0:
        UXTB     R4,R4
        CMP      R4,#+8
        BGE      ??OLED_Clear_3
        MOVS     R0,R4
        SUBS     R0,R0,#+80
        UXTB     R0,R0
        BL       OLED_WrCmd
        MOVS     R0,#+1
        BL       OLED_WrCmd
        MOVS     R0,#+16
        BL       OLED_WrCmd
        MOVS     R5,#+0
        B        ??OLED_Clear_2
//  442     }
//  443 }
??OLED_Clear_3:
        POP      {R0,R4,R5,PC}    ;; return
//  444 
//  445 /**
//  446   * 简介
//  447   *     画点
//  448   * 参数
//  449   *     x   列 0~127
//  450   *     y   页 0~7
//  451   */

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
//  452 void OLED_Set_Pos(unsigned char x, unsigned char y)
//  453 {
OLED_Set_Pos:
        PUSH     {R4,LR}
        MOVS     R4,R0
        MOVS     R0,R1
//  454   OLED_WrCmd(0xb0+y);
        SUBS     R0,R0,#+80
        UXTB     R0,R0
        BL       OLED_WrCmd
//  455   OLED_WrCmd(((x&0xf0)>>4)|0x10);
        MOVS     R1,R4
        UXTB     R1,R1
        LSRS     R1,R1,#+4
        MOVS     R0,#+16
        ORRS     R0,R0,R1
        UXTB     R0,R0
        BL       OLED_WrCmd
//  456   OLED_WrCmd((x&0x0f));
        LSLS     R0,R4,#+28       ;; ZeroExtS R0,R4,#+28,#+28
        LSRS     R0,R0,#+28
        BL       OLED_WrCmd
//  457 }
        POP      {R4,PC}          ;; return
//  458 
//  459 /**
//  460   * 简介
//  461   *     OLED初始化
//  462   * 注意
//  463   *     对应引脚请查看Variable.h文件
//  464   */

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
//  465 void OLED_Init(void)
//  466 {
OLED_Init:
        PUSH     {R7,LR}
//  467     spi_init(SPI_PORT, USE_PCS, MASTER, 20*1000*1000);
        LDR      R3,??DataTable4_1  ;; 0x1312d00
        MOVS     R2,#+0
        MOVS     R1,#+1
        MOVS     R0,#+1
        BL       spi_init
//  468 //    DDRCS;
//  469     DDRDC;
        MOVS     R2,#+1
        MOVS     R1,#+1
        MOVS     R0,#+70
        BL       GpioInit
//  470 //    DDRSDIN;
//  471 //    DDROSCLK;
//  472     DDRRES;
        MOVS     R2,#+1
        MOVS     R1,#+1
        MOVS     R0,#+69
        BL       GpioInit
//  473 
//  474     CL_RES;
        MOVS     R1,#+0
        MOVS     R0,#+69
        BL       GpioSet
//  475     SystickDelayMs(50);
        MOVS     R0,#+50
        BL       SystickDelayMs
//  476     RES;
        MOVS     R1,#+1
        MOVS     R0,#+69
        BL       GpioSet
//  477 
//  478     OLED_WrCmd(0xae);//--turn off oled panel
        MOVS     R0,#+174
        BL       OLED_WrCmd
//  479     OLED_WrCmd(0x00);//---set low column address
        MOVS     R0,#+0
        BL       OLED_WrCmd
//  480     OLED_WrCmd(0x10);//---set high column address
        MOVS     R0,#+16
        BL       OLED_WrCmd
//  481     OLED_WrCmd(0x40);//--set start line address  Set Mapping RAM Display Start Line (0x00~0x3F)
        MOVS     R0,#+64
        BL       OLED_WrCmd
//  482     OLED_WrCmd(0x81);//--set contrast control register
        MOVS     R0,#+129
        BL       OLED_WrCmd
//  483     OLED_WrCmd(0xcf);// Set SEG Output Current Brightness
        MOVS     R0,#+207
        BL       OLED_WrCmd
//  484     OLED_WrCmd(0xa1);//--Set SEG/Column Mapping     0xa0左右反置 0xa1正常
        MOVS     R0,#+161
        BL       OLED_WrCmd
//  485     OLED_WrCmd(0xc8);//Set COM/Row Scan Direction   0xc0上下反置 0xc8正常
        MOVS     R0,#+200
        BL       OLED_WrCmd
//  486     OLED_WrCmd(0xa6);//--set normal display
        MOVS     R0,#+166
        BL       OLED_WrCmd
//  487     OLED_WrCmd(0xa8);//--set multiplex ratio(1 to 64)
        MOVS     R0,#+168
        BL       OLED_WrCmd
//  488     OLED_WrCmd(0x3f);//--1/64 duty
        MOVS     R0,#+63
        BL       OLED_WrCmd
//  489     OLED_WrCmd(0xd3);//-set display offset	Shift Mapping RAM Counter (0x00~0x3F)
        MOVS     R0,#+211
        BL       OLED_WrCmd
//  490     OLED_WrCmd(0x00);//-not offset
        MOVS     R0,#+0
        BL       OLED_WrCmd
//  491     OLED_WrCmd(0xd5);//--set display clock divide ratio/oscillator frequency
        MOVS     R0,#+213
        BL       OLED_WrCmd
//  492     OLED_WrCmd(0x80);//--set divide ratio, Set Clock as 100 Frames/Sec
        MOVS     R0,#+128
        BL       OLED_WrCmd
//  493     OLED_WrCmd(0xd9);//--set pre-charge period
        MOVS     R0,#+217
        BL       OLED_WrCmd
//  494     OLED_WrCmd(0xf1);//Set Pre-Charge as 15 Clocks & Discharge as 1 Clock
        MOVS     R0,#+241
        BL       OLED_WrCmd
//  495     OLED_WrCmd(0xda);//--set com pins hardware configuration
        MOVS     R0,#+218
        BL       OLED_WrCmd
//  496     OLED_WrCmd(0x12);
        MOVS     R0,#+18
        BL       OLED_WrCmd
//  497     OLED_WrCmd(0xdb);//--set vcomh
        MOVS     R0,#+219
        BL       OLED_WrCmd
//  498     OLED_WrCmd(0x40);//Set VCOM Deselect Level
        MOVS     R0,#+64
        BL       OLED_WrCmd
//  499     OLED_WrCmd(0x20);//-Set Page Addressing Mode (0x00/0x01/0x02)
        MOVS     R0,#+32
        BL       OLED_WrCmd
//  500     OLED_WrCmd(0x02);//
        MOVS     R0,#+2
        BL       OLED_WrCmd
//  501     OLED_WrCmd(0x8d);//--set Charge Pump enable/disable
        MOVS     R0,#+141
        BL       OLED_WrCmd
//  502     OLED_WrCmd(0x14);//--set(0x10) disable
        MOVS     R0,#+20
        BL       OLED_WrCmd
//  503     OLED_WrCmd(0xa4);// Disable Entire Display On (0xa4/0xa5)
        MOVS     R0,#+164
        BL       OLED_WrCmd
//  504     OLED_WrCmd(0xa6);// Disable Inverse Display On (0xa6/a7)
        MOVS     R0,#+166
        BL       OLED_WrCmd
//  505     OLED_WrCmd(0xaf);//--turn on oled panel
        MOVS     R0,#+175
        BL       OLED_WrCmd
//  506     OLED_Clear();
        BL       OLED_Clear
//  507     OLED_Set_Pos(0,0);
        MOVS     R1,#+0
        MOVS     R0,#+0
        BL       OLED_Set_Pos
//  508 }
        POP      {R0,PC}          ;; return
//  509 
//  510 /**
//  511   * 简介
//  512   *     显示一个字符串 f8x16
//  513   */

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
//  514 void OLED_DisplayStr(unsigned char x,unsigned char y,char *str)
//  515 {
OLED_DisplayStr:
        PUSH     {R0-R2,R4-R7,LR}
        MOVS     R4,R0
//  516 	unsigned char c=0,i=0,j=0;
        MOVS     R5,#+0
        MOVS     R6,#+0
        MOVS     R7,#+0
        B        ??OLED_DisplayStr_0
//  517 	while (str[j]!='\0')
//  518 	{
//  519 		c=str[j]-32;
//  520 		if(x>120){return;}
//  521 			OLED_Set_Pos(x,y);
//  522 		for(i=0;i<8;i++)
//  523 			OLED_WrDat(F8X16[c*16+i]);
//  524 		OLED_Set_Pos(x,y+1);
//  525 		for(i=0;i<8;i++)
//  526 			OLED_WrDat(F8X16[c*16+i+8]);
??OLED_DisplayStr_1:
        LDR      R0,??DataTable5
        UXTB     R5,R5
        MOVS     R1,#+16
        MULS     R1,R5,R1
        UXTB     R6,R6
        ADDS     R1,R1,R6
        ADDS     R0,R0,R1
        LDRB     R0,[R0, #+8]
        BL       OLED_WrDat
        ADDS     R6,R6,#+1
??OLED_DisplayStr_2:
        UXTB     R6,R6
        CMP      R6,#+8
        BLT      ??OLED_DisplayStr_1
//  527 		x+=8;
        ADDS     R4,R4,#+8
//  528 		j++;
        ADDS     R7,R7,#+1
??OLED_DisplayStr_0:
        LDR      R0,[SP, #+8]
        UXTB     R7,R7
        LDRB     R0,[R0, R7]
        CMP      R0,#+0
        BEQ      ??OLED_DisplayStr_3
        LDR      R0,[SP, #+8]
        UXTB     R7,R7
        LDRB     R5,[R0, R7]
        SUBS     R5,R5,#+32
        UXTB     R4,R4
        CMP      R4,#+121
        BGE      ??OLED_DisplayStr_4
??OLED_DisplayStr_5:
        MOV      R0,SP
        LDRB     R1,[R0, #+4]
        MOVS     R0,R4
        UXTB     R0,R0
        BL       OLED_Set_Pos
        MOVS     R6,#+0
        B        ??OLED_DisplayStr_6
??OLED_DisplayStr_7:
        LDR      R0,??DataTable5
        UXTB     R5,R5
        MOVS     R1,#+16
        MULS     R1,R5,R1
        UXTB     R6,R6
        ADDS     R1,R1,R6
        LDRB     R0,[R0, R1]
        BL       OLED_WrDat
        ADDS     R6,R6,#+1
??OLED_DisplayStr_6:
        UXTB     R6,R6
        CMP      R6,#+8
        BLT      ??OLED_DisplayStr_7
        MOV      R0,SP
        LDRB     R1,[R0, #+4]
        ADDS     R1,R1,#+1
        UXTB     R1,R1
        MOVS     R0,R4
        UXTB     R0,R0
        BL       OLED_Set_Pos
        MOVS     R6,#+0
        B        ??OLED_DisplayStr_2
//  529 	}
//  530 }
??OLED_DisplayStr_3:
??OLED_DisplayStr_4:
        POP      {R0-R2,R4-R7,PC}  ;; return
//  531 
//  532 /**
//  533   * 简介
//  534   *     显示一个字符串 f6x8
//  535   */

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
//  536 uint8 OLED_DisplaytinyStr(unsigned char x,unsigned char y,char *str)
//  537 {
OLED_DisplaytinyStr:
        PUSH     {R0-R2,R4-R7,LR}
        MOVS     R4,R0
//  538 	unsigned char c=0,i=0,j=0;
        MOVS     R7,#+0
        MOVS     R6,#+0
        MOVS     R5,#+0
        B        ??OLED_DisplaytinyStr_0
//  539 	while (str[j]!='\0')
//  540 	{
//  541 		c = str[j]-32;
//  542 
//  543 			OLED_Set_Pos(x,y);
//  544 		for(i=0;i<6;i++)
//  545 			OLED_WrDat(F6x8[c][i]);
??OLED_DisplaytinyStr_1:
        LDR      R0,??DataTable5_1
        UXTB     R7,R7
        MOVS     R1,#+6
        MULS     R1,R7,R1
        ADDS     R0,R0,R1
        UXTB     R6,R6
        LDRB     R0,[R0, R6]
        BL       OLED_WrDat
        ADDS     R6,R6,#+1
??OLED_DisplaytinyStr_2:
        UXTB     R6,R6
        CMP      R6,#+6
        BLT      ??OLED_DisplaytinyStr_1
//  546 		x+=6;
        ADDS     R4,R4,#+6
//  547 		j++;
        ADDS     R5,R5,#+1
??OLED_DisplaytinyStr_0:
        LDR      R0,[SP, #+8]
        UXTB     R5,R5
        LDRB     R0,[R0, R5]
        CMP      R0,#+0
        BEQ      ??OLED_DisplaytinyStr_3
        LDR      R0,[SP, #+8]
        UXTB     R5,R5
        LDRB     R7,[R0, R5]
        SUBS     R7,R7,#+32
        MOV      R0,SP
        LDRB     R1,[R0, #+4]
        MOVS     R0,R4
        UXTB     R0,R0
        BL       OLED_Set_Pos
        MOVS     R6,#+0
        B        ??OLED_DisplaytinyStr_2
//  548 	}
//  549 
//  550     return x;
??OLED_DisplaytinyStr_3:
        MOVS     R0,R4
        UXTB     R0,R0
        POP      {R1-R7,PC}       ;; return
//  551 }

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable4:
        DC32     OLED_SPI

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable4_1:
        DC32     0x1312d00
//  552 
//  553 
//  554 /**
//  555   * 简介
//  556   *     绘制一个点（x,y)
//  557   * 参数
//  558   *     x，y     坐标
//  559   * 备注
//  560   *     x的范围0～127，y的范围0～63
//  561   *     最好不要使用此函数，会打乱菜单布局
//  562   */

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
//  563 void OLED_PutPixel(unsigned char x,unsigned char y)
//  564 {
OLED_PutPixel:
        PUSH     {R3-R5,LR}
        MOVS     R4,R1
//  565   unsigned char data1;  //data1当前点的数据
//  566   if(x>127||y>64)return;
        UXTB     R0,R0
        CMP      R0,#+128
        BGE      ??OLED_PutPixel_0
        UXTB     R4,R4
        CMP      R4,#+65
        BLT      ??OLED_PutPixel_1
??OLED_PutPixel_0:
        B        ??OLED_PutPixel_2
//  567   OLED_Set_Pos(x, y>>3);
??OLED_PutPixel_1:
        MOVS     R1,R4
        UXTB     R1,R1
        LSRS     R1,R1,#+3
        UXTB     R0,R0
        BL       OLED_Set_Pos
//  568   data1 = 0x01<<(y%8);
        MOVS     R5,#+1
        UXTB     R4,R4
        MOVS     R0,R4
        MOVS     R1,#+8
        BL       __aeabi_idivmod
        LSLS     R5,R5,R1
//  569 //  OLED_WrCmd(0xb0+(y>>3));
//  570 //  OLED_WrCmd(((x&0xf0)>>4)|0x10);
//  571 //  OLED_WrCmd((x&0x0f)|0x00);
//  572   OLED_WrDat(data1);
        MOVS     R0,R5
        UXTB     R0,R0
        BL       OLED_WrDat
//  573 }
??OLED_PutPixel_2:
        POP      {R0,R4,R5,PC}    ;; return
//  574 
//  575 /**
//  576   * 简介
//  577   *     绘制 菜单
//  578   * 备注
//  579   *     y
//  580   *         0 --- 空出
//  581   *         1,5
//  582   *              x  0 ~ 127 双横线
//  583   *         1 ~ 7
//  584   *              x  0,67,127 --- 竖线
//  585   *         1,5
//  586   *              x  30,94 --- 参数数字
//  587   *     页分配
//  588   *         0       --- 空出
//  589   *         1,5     --- 菜单数字
//  590   *         2~4,6~7 --- 显示区域
//  591   *     显示区域坐标
//  592   *         菜单     x   y --- x  y
//  593   *           1      1   2    66  4  可显示 11个字符，3行
//  594   *           2      68  2   126  4  可显示 9 个字符,3行
//  595   *           3      1   6   126  7  可显示 21个字符,2行
//  596   *           4      1   6   126  7  可显示 21个字符,2行
//  597   */

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
//  598 void OLED_Menu()
//  599 {
OLED_Menu:
        PUSH     {R3-R5,LR}
//  600   uint8 i, x, y;
//  601 
//  602   for (i=0; i<10; i++)
        MOVS     R4,#+0
        B        ??OLED_Menu_0
//  603   {
//  604       switch (i)
//  605       {
//  606           //先画横再画竖线，竖线将横线覆盖掉,再画数字覆盖
//  607       case 0://-------------------- 上双横线
//  608           for (x=0; x<128; x++)// 0~127
//  609           {
//  610               OLED_Set_Pos(x, 1);
//  611               OLED_WrDat(0x81);//双横杠为0x81
//  612           }
//  613           break;
//  614       case 1://-------------------- 下双横线
//  615           for (x=0; x<128; x++)// 0~127
//  616           {
//  617               OLED_Set_Pos(x, 5);
//  618               OLED_WrDat(0x81);
//  619           }
//  620           break;
//  621       case 2://-------------------- 左竖线
//  622           for (y=1; y<8; y++)// 1~7
//  623           {
//  624               OLED_Set_Pos(0, y);
//  625               OLED_WrDat(0xff);
//  626           }
//  627           break;
//  628       case 3://-------------------- 中竖线
//  629           for (y=1; y<6; y++)// 1~5
//  630           {
//  631               OLED_Set_Pos(67, y);
//  632               OLED_WrDat(0xff);
//  633           }
//  634           break;
//  635       case 4://-------------------- 右竖线
//  636           for (y=1; y<8; y++)// 1~7
//  637           {
//  638               OLED_Set_Pos(127, y);
//  639               OLED_WrDat(0xff);
//  640           }
//  641           break;
//  642       case 5://-------------------- 菜单1数字
//  643           for (x=0; x<7; x++)
//  644           {
//  645               OLED_Set_Pos(30+x, 1);//30~36
//  646               OLED_WrDat(menuNum[0][x]);
//  647           }
//  648           break;
//  649       case 6://-------------------- 菜单2数字
//  650           for (x=0; x<7; x++)
//  651           {
//  652               OLED_Set_Pos(94+x, 1);//94~101
//  653               OLED_WrDat(menuNum[1][x]);
//  654           }
//  655           break;
//  656       case 7://-------------------- 菜单3数字
//  657           for (x=0; x<7; x++)
//  658           {
//  659               OLED_Set_Pos(30+x, 5);//30~36
//  660               OLED_WrDat(menuNum[2][x]);
//  661           }
//  662           break;
//  663       case 8://-------------------- 菜单4数字
//  664           for (x=0; x<7; x++)
//  665           {
//  666               OLED_Set_Pos(94+x, 5);//94~101
//  667               OLED_WrDat(menuNum[3][x]);
//  668           }
//  669           break;
//  670 
//  671       case 9:/* 各个菜单预先显示,可屏蔽 */
//  672         
//  673 //         OLED_DisplaytinyStr(1, 0, "Chabi:");//菜单1内容显示
//  674 
//  675          OLED_DisplaytinyStr(1, 2, "P:");//菜单1内容显示
//  676          OLED_DisplaytinyStr(1, 3, "I:");//菜单2内容显示
//  677          OLED_DisplaytinyStr(1, 4, "D:");//菜单3内容显示
//  678 
//  679          OLED_DisplaytinyStr(68, 2, "P:");//菜单4内容显示
//  680          OLED_DisplaytinyStr(68, 3, "I:");//菜单5内容显示
//  681          OLED_DisplaytinyStr(68, 4, "D:");//菜单6内容显示         
//  682          
//  683 //         OLED_DisplaytinyStr(68, 6, "K1:");//菜单10内容显示
//  684          OLED_DisplaytinyStr(1, 6, "AP:");//菜单10内容显示
//  685          OLED_DisplaytinyStr(1, 7, "AD:");//菜单11内容显示
//  686 //         OLED_DisplaytinyStr(68, 8, "AL:");//菜单12内容显示
//  687          OLED_DisplaytinyStr(68, 8, "CF:");//菜单12内容显示
//  688 
//  689          OLED_DisplaytinyStr(68, 6, "SZ:");//菜单7内容显示
//  690          OLED_DisplaytinyStr(68, 7, "SW:");//菜单8内容显示
//  691 //         OLED_DisplaytinyStr(1, 9, "K3:");//菜单9内容显示
//  692             break;
//  693 
//  694       default :
//  695           break;
??OLED_Menu_1:
??OLED_Menu_2:
        ADDS     R4,R4,#+1
??OLED_Menu_0:
        UXTB     R4,R4
        CMP      R4,#+10
        BLT      .+4
        B        ??OLED_Menu_3
        UXTB     R4,R4
        CMP      R4,#+0
        BEQ      ??OLED_Menu_4
        CMP      R4,#+2
        BEQ      ??OLED_Menu_5
        BCC      ??OLED_Menu_6
        CMP      R4,#+4
        BEQ      ??OLED_Menu_7
        BCC      ??OLED_Menu_8
        CMP      R4,#+6
        BEQ      ??OLED_Menu_9
        BCC      ??OLED_Menu_10
        CMP      R4,#+8
        BNE      .+4
        B        ??OLED_Menu_11
        BCC      ??OLED_Menu_12
        CMP      R4,#+9
        BNE      .+4
        B        ??OLED_Menu_13
        B        ??OLED_Menu_1
??OLED_Menu_4:
        MOVS     R5,#+0
        B        ??OLED_Menu_14
??OLED_Menu_15:
        MOVS     R1,#+1
        MOVS     R0,R5
        UXTB     R0,R0
        BL       OLED_Set_Pos
        MOVS     R0,#+129
        BL       OLED_WrDat
        ADDS     R5,R5,#+1
??OLED_Menu_14:
        UXTB     R5,R5
        CMP      R5,#+128
        BLT      ??OLED_Menu_15
        B        ??OLED_Menu_2
??OLED_Menu_6:
        MOVS     R5,#+0
        B        ??OLED_Menu_16
??OLED_Menu_17:
        MOVS     R1,#+5
        MOVS     R0,R5
        UXTB     R0,R0
        BL       OLED_Set_Pos
        MOVS     R0,#+129
        BL       OLED_WrDat
        ADDS     R5,R5,#+1
??OLED_Menu_16:
        UXTB     R5,R5
        CMP      R5,#+128
        BLT      ??OLED_Menu_17
        B        ??OLED_Menu_2
??OLED_Menu_5:
        MOVS     R5,#+1
        B        ??OLED_Menu_18
??OLED_Menu_19:
        MOVS     R1,R5
        UXTB     R1,R1
        MOVS     R0,#+0
        BL       OLED_Set_Pos
        MOVS     R0,#+255
        BL       OLED_WrDat
        ADDS     R5,R5,#+1
??OLED_Menu_18:
        UXTB     R5,R5
        CMP      R5,#+8
        BLT      ??OLED_Menu_19
        B        ??OLED_Menu_2
??OLED_Menu_8:
        MOVS     R5,#+1
        B        ??OLED_Menu_20
??OLED_Menu_21:
        MOVS     R1,R5
        UXTB     R1,R1
        MOVS     R0,#+67
        BL       OLED_Set_Pos
        MOVS     R0,#+255
        BL       OLED_WrDat
        ADDS     R5,R5,#+1
??OLED_Menu_20:
        UXTB     R5,R5
        CMP      R5,#+6
        BLT      ??OLED_Menu_21
        B        ??OLED_Menu_2
??OLED_Menu_7:
        MOVS     R5,#+1
        B        ??OLED_Menu_22
??OLED_Menu_23:
        MOVS     R1,R5
        UXTB     R1,R1
        MOVS     R0,#+127
        BL       OLED_Set_Pos
        MOVS     R0,#+255
        BL       OLED_WrDat
        ADDS     R5,R5,#+1
??OLED_Menu_22:
        UXTB     R5,R5
        CMP      R5,#+8
        BLT      ??OLED_Menu_23
        B        ??OLED_Menu_2
??OLED_Menu_10:
        MOVS     R5,#+0
        B        ??OLED_Menu_24
??OLED_Menu_25:
        MOVS     R1,#+1
        MOVS     R0,R5
        ADDS     R0,R0,#+30
        UXTB     R0,R0
        BL       OLED_Set_Pos
        LDR      R0,??DataTable5_2
        UXTB     R5,R5
        LDRB     R0,[R0, R5]
        BL       OLED_WrDat
        ADDS     R5,R5,#+1
??OLED_Menu_24:
        UXTB     R5,R5
        CMP      R5,#+7
        BLT      ??OLED_Menu_25
        B        ??OLED_Menu_2
??OLED_Menu_9:
        MOVS     R5,#+0
        B        ??OLED_Menu_26
??OLED_Menu_27:
        MOVS     R1,#+1
        MOVS     R0,R5
        ADDS     R0,R0,#+94
        UXTB     R0,R0
        BL       OLED_Set_Pos
        LDR      R0,??DataTable5_2
        UXTB     R5,R5
        ADDS     R0,R0,R5
        LDRB     R0,[R0, #+7]
        BL       OLED_WrDat
        ADDS     R5,R5,#+1
??OLED_Menu_26:
        UXTB     R5,R5
        CMP      R5,#+7
        BLT      ??OLED_Menu_27
        B        ??OLED_Menu_2
??OLED_Menu_12:
        MOVS     R5,#+0
        B        ??OLED_Menu_28
??OLED_Menu_29:
        MOVS     R1,#+5
        MOVS     R0,R5
        ADDS     R0,R0,#+30
        UXTB     R0,R0
        BL       OLED_Set_Pos
        LDR      R0,??DataTable5_2
        UXTB     R5,R5
        ADDS     R0,R0,R5
        LDRB     R0,[R0, #+14]
        BL       OLED_WrDat
        ADDS     R5,R5,#+1
??OLED_Menu_28:
        UXTB     R5,R5
        CMP      R5,#+7
        BLT      ??OLED_Menu_29
        B        ??OLED_Menu_2
??OLED_Menu_11:
        MOVS     R5,#+0
        B        ??OLED_Menu_30
??OLED_Menu_31:
        MOVS     R1,#+5
        MOVS     R0,R5
        ADDS     R0,R0,#+94
        UXTB     R0,R0
        BL       OLED_Set_Pos
        LDR      R0,??DataTable5_2
        UXTB     R5,R5
        ADDS     R0,R0,R5
        LDRB     R0,[R0, #+21]
        BL       OLED_WrDat
        ADDS     R5,R5,#+1
??OLED_Menu_30:
        UXTB     R5,R5
        CMP      R5,#+7
        BLT      ??OLED_Menu_31
        B        ??OLED_Menu_2
??OLED_Menu_13:
        ADR      R2,??DataTable5_3  ;; 0x50, 0x3A, 0x00, 0x00
        MOVS     R1,#+2
        MOVS     R0,#+1
        BL       OLED_DisplaytinyStr
        ADR      R2,??DataTable5_4  ;; 0x49, 0x3A, 0x00, 0x00
        MOVS     R1,#+3
        MOVS     R0,#+1
        BL       OLED_DisplaytinyStr
        ADR      R2,??DataTable5_5  ;; 0x44, 0x3A, 0x00, 0x00
        MOVS     R1,#+4
        MOVS     R0,#+1
        BL       OLED_DisplaytinyStr
        ADR      R2,??DataTable5_3  ;; 0x50, 0x3A, 0x00, 0x00
        MOVS     R1,#+2
        MOVS     R0,#+68
        BL       OLED_DisplaytinyStr
        ADR      R2,??DataTable5_4  ;; 0x49, 0x3A, 0x00, 0x00
        MOVS     R1,#+3
        MOVS     R0,#+68
        BL       OLED_DisplaytinyStr
        ADR      R2,??DataTable5_5  ;; 0x44, 0x3A, 0x00, 0x00
        MOVS     R1,#+4
        MOVS     R0,#+68
        BL       OLED_DisplaytinyStr
        ADR      R2,??DataTable5_6  ;; "AP:"
        MOVS     R1,#+6
        MOVS     R0,#+1
        BL       OLED_DisplaytinyStr
        ADR      R2,??DataTable5_7  ;; "AD:"
        MOVS     R1,#+7
        MOVS     R0,#+1
        BL       OLED_DisplaytinyStr
        ADR      R2,??DataTable5_8  ;; "CF:"
        MOVS     R1,#+8
        MOVS     R0,#+68
        BL       OLED_DisplaytinyStr
        ADR      R2,??DataTable5_9  ;; "SZ:"
        MOVS     R1,#+6
        MOVS     R0,#+68
        BL       OLED_DisplaytinyStr
        ADR      R2,??DataTable5_10  ;; "SW:"
        MOVS     R1,#+7
        MOVS     R0,#+68
        BL       OLED_DisplaytinyStr
        B        ??OLED_Menu_2
//  696       }
//  697   }
//  698 }
??OLED_Menu_3:
        POP      {R0,R4,R5,PC}    ;; return

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable5:
        DC32     F8X16

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable5_1:
        DC32     F6x8

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable5_2:
        DC32     menuNum

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable5_3:
        DC8      0x50, 0x3A, 0x00, 0x00

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable5_4:
        DC8      0x49, 0x3A, 0x00, 0x00

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable5_5:
        DC8      0x44, 0x3A, 0x00, 0x00

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable5_6:
        DC8      "AP:"

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable5_7:
        DC8      "AD:"

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable5_8:
        DC8      "CF:"

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable5_9:
        DC8      "SZ:"

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable5_10:
        DC8      "SW:"
//  699 
//  700 /**
//  701   * 简介
//  702   *     菜单闪烁
//  703   * 备注
//  704   *     当菜单被选中时 闪烁
//  705   */

        SECTION `.text`:CODE:NOROOT(2)
        THUMB
//  706 void OLED_MenuFlicker()
//  707 {
OLED_MenuFlicker:
        PUSH     {R3-R5,LR}
//  708   uint8 x, y;
//  709 
//  710     switch (menuSelect)
        LDR      R0,??OLED_MenuFlicker_0
        LDRB     R0,[R0, #+0]
        CMP      R0,#+0
        BEQ      ??OLED_MenuFlicker_1
        CMP      R0,#+2
        BEQ      ??OLED_MenuFlicker_2
        BCC      ??OLED_MenuFlicker_3
        CMP      R0,#+4
        BNE      .+4
        B        ??OLED_MenuFlicker_4
        BCC      ??OLED_MenuFlicker_5
        CMP      R0,#+6
        BNE      .+4
        B        ??OLED_MenuFlicker_6
        BCS      .+4
        B        ??OLED_MenuFlicker_7
        CMP      R0,#+8
        BNE      .+4
        B        ??OLED_MenuFlicker_8
        BCS      .+4
        B        ??OLED_MenuFlicker_9
        CMP      R0,#+10
        BNE      .+4
        B        ??OLED_MenuFlicker_10
        BCS      .+4
        B        ??OLED_MenuFlicker_11
        CMP      R0,#+12
        BNE      .+4
        B        ??OLED_MenuFlicker_12
        BCS      .+4
        B        ??OLED_MenuFlicker_13
        CMP      R0,#+13
        BNE      .+4
        B        ??OLED_MenuFlicker_14
        B        ??OLED_MenuFlicker_15
//  711     {
//  712     case LOGO://--------------------------- 显示 logo 130ms
//  713         for (x=0; x<128; x++)
??OLED_MenuFlicker_1:
        MOVS     R5,#+0
        B        ??OLED_MenuFlicker_16
//  714         {
//  715             for (y=0; y<8; y++)
//  716             {
//  717                 OLED_Set_Pos(x, y);
??OLED_MenuFlicker_17:
        MOVS     R1,R4
        UXTB     R1,R1
        MOVS     R0,R5
        UXTB     R0,R0
        BL       OLED_Set_Pos
//  718                 OLED_WrDat(logo[x][y]);
        LDR      R0,??OLED_MenuFlicker_18
        UXTB     R5,R5
        MOVS     R1,#+8
        MULS     R1,R5,R1
        ADDS     R0,R0,R1
        UXTB     R4,R4
        LDRB     R0,[R0, R4]
        BL       OLED_WrDat
//  719             }
        ADDS     R4,R4,#+1
??OLED_MenuFlicker_19:
        UXTB     R4,R4
        CMP      R4,#+8
        BLT      ??OLED_MenuFlicker_17
        ADDS     R5,R5,#+1
??OLED_MenuFlicker_16:
        UXTB     R5,R5
        CMP      R5,#+128
        BGE      ??OLED_MenuFlicker_20
        MOVS     R4,#+0
        B        ??OLED_MenuFlicker_19
        Nop      
        DATA
??OLED_MenuFlicker_0:
        DC32     menuSelect
        THUMB
//  720         }
//  721         break;
??OLED_MenuFlicker_20:
        B        ??OLED_MenuFlicker_21
//  722     case MENU://--------------------------- 显示 菜单 38.5ms
//  723         OLED_Menu();
??OLED_MenuFlicker_3:
        BL       OLED_Menu
//  724         break;
        B        ??OLED_MenuFlicker_21
//  725     case MENU_1://--------------------------- 选择 菜单1 - 消掉菜单4 51us
//  726         for (x=0; x<4; x++)//20~23 选 1
??OLED_MenuFlicker_2:
        MOVS     R5,#+0
        B        ??OLED_MenuFlicker_22
//  727         {
//  728             OLED_Set_Pos(20+x, 1);//第一行20列的三角形
??OLED_MenuFlicker_23:
        MOVS     R1,#+1
        MOVS     R0,R5
        ADDS     R0,R0,#+20
        UXTB     R0,R0
        BL       OLED_Set_Pos
//  729             OLED_WrDat(menuNum[4][x]);
        LDR      R0,??DataTable6
        UXTB     R5,R5
        ADDS     R0,R0,R5
        LDRB     R0,[R0, #+28]
        BL       OLED_WrDat
//  730         }
        ADDS     R5,R5,#+1
??OLED_MenuFlicker_22:
        UXTB     R5,R5
        CMP      R5,#+4
        BLT      ??OLED_MenuFlicker_23
//  731         for (x=0; x<4; x++)//84~87 消 4
        MOVS     R5,#+0
        B        ??OLED_MenuFlicker_24
//  732         {
//  733             OLED_Set_Pos(124+x, 5);//消灭第五行99列三角形
??OLED_MenuFlicker_25:
        MOVS     R1,#+5
        MOVS     R0,R5
        ADDS     R0,R0,#+124
        UXTB     R0,R0
        BL       OLED_Set_Pos
//  734             OLED_WrDat(0x81);
        MOVS     R0,#+129
        BL       OLED_WrDat
//  735         }
        ADDS     R5,R5,#+1
??OLED_MenuFlicker_24:
        UXTB     R5,R5
        CMP      R5,#+4
        BLT      ??OLED_MenuFlicker_25
//  736         break;
        B        ??OLED_MenuFlicker_21
//  737         
//  738     case MENU_2://--------------------------- 选择 菜单1 - 消掉菜单4 51us
//  739         for (x=0; x<4; x++)//20~23 选 1
??OLED_MenuFlicker_5:
        MOVS     R5,#+0
        B        ??OLED_MenuFlicker_26
//  740         {
//  741             OLED_Set_Pos(40+x, 1);
??OLED_MenuFlicker_27:
        MOVS     R1,#+1
        MOVS     R0,R5
        ADDS     R0,R0,#+40
        UXTB     R0,R0
        BL       OLED_Set_Pos
//  742             OLED_WrDat(menuNum[4][x]);
        LDR      R0,??DataTable6
        UXTB     R5,R5
        ADDS     R0,R0,R5
        LDRB     R0,[R0, #+28]
        BL       OLED_WrDat
//  743         }
        ADDS     R5,R5,#+1
??OLED_MenuFlicker_26:
        UXTB     R5,R5
        CMP      R5,#+4
        BLT      ??OLED_MenuFlicker_27
//  744         for (x=0; x<4; x++)//84~87 消 4
        MOVS     R5,#+0
        B        ??OLED_MenuFlicker_28
//  745         {
//  746             OLED_Set_Pos(20+x, 1);
??OLED_MenuFlicker_29:
        MOVS     R1,#+1
        MOVS     R0,R5
        ADDS     R0,R0,#+20
        UXTB     R0,R0
        BL       OLED_Set_Pos
//  747             OLED_WrDat(0x81);
        MOVS     R0,#+129
        BL       OLED_WrDat
//  748         }
        ADDS     R5,R5,#+1
??OLED_MenuFlicker_28:
        UXTB     R5,R5
        CMP      R5,#+4
        BLT      ??OLED_MenuFlicker_29
//  749         break;
        B        ??OLED_MenuFlicker_21
//  750         
//  751     case MENU_3://--------------------------- 选择 菜单2
//  752         for (x=0; x<4; x++)//84~87 选 2
??OLED_MenuFlicker_4:
        MOVS     R5,#+0
        B        ??OLED_MenuFlicker_30
//  753         {
//  754             OLED_Set_Pos(60+x, 1);
??OLED_MenuFlicker_31:
        MOVS     R1,#+1
        MOVS     R0,R5
        ADDS     R0,R0,#+60
        UXTB     R0,R0
        BL       OLED_Set_Pos
//  755             OLED_WrDat(menuNum[4][x]);
        LDR      R0,??DataTable6
        UXTB     R5,R5
        ADDS     R0,R0,R5
        LDRB     R0,[R0, #+28]
        BL       OLED_WrDat
//  756         }
        ADDS     R5,R5,#+1
??OLED_MenuFlicker_30:
        UXTB     R5,R5
        CMP      R5,#+4
        BLT      ??OLED_MenuFlicker_31
//  757         for (x=0; x<4; x++)//20~23 消 1
        MOVS     R5,#+0
        B        ??OLED_MenuFlicker_32
//  758         {
//  759             OLED_Set_Pos(40+x, 1);
??OLED_MenuFlicker_33:
        MOVS     R1,#+1
        MOVS     R0,R5
        ADDS     R0,R0,#+40
        UXTB     R0,R0
        BL       OLED_Set_Pos
//  760             OLED_WrDat(0x81);
        MOVS     R0,#+129
        BL       OLED_WrDat
//  761         }
        ADDS     R5,R5,#+1
??OLED_MenuFlicker_32:
        UXTB     R5,R5
        CMP      R5,#+4
        BLT      ??OLED_MenuFlicker_33
//  762         break;
        B        ??OLED_MenuFlicker_21
//  763  
//  764         case MENU_4://--------------------------- 选择 菜单2
//  765         for (x=0; x<4; x++)//84~87 选 2
??OLED_MenuFlicker_7:
        MOVS     R5,#+0
        B        ??OLED_MenuFlicker_34
//  766         {
//  767             OLED_Set_Pos(84+x, 1);
??OLED_MenuFlicker_35:
        MOVS     R1,#+1
        MOVS     R0,R5
        ADDS     R0,R0,#+84
        UXTB     R0,R0
        BL       OLED_Set_Pos
//  768             OLED_WrDat(menuNum[4][x]);
        LDR      R0,??DataTable6
        UXTB     R5,R5
        ADDS     R0,R0,R5
        LDRB     R0,[R0, #+28]
        BL       OLED_WrDat
//  769         }
        ADDS     R5,R5,#+1
??OLED_MenuFlicker_34:
        UXTB     R5,R5
        CMP      R5,#+4
        BLT      ??OLED_MenuFlicker_35
//  770         for (x=0; x<4; x++)//20~23 消 1
        MOVS     R5,#+0
        B        ??OLED_MenuFlicker_36
//  771         {
//  772             OLED_Set_Pos(60+x, 1);
??OLED_MenuFlicker_37:
        MOVS     R1,#+1
        MOVS     R0,R5
        ADDS     R0,R0,#+60
        UXTB     R0,R0
        BL       OLED_Set_Pos
//  773             OLED_WrDat(0x81);
        MOVS     R0,#+129
        BL       OLED_WrDat
//  774         }
        ADDS     R5,R5,#+1
??OLED_MenuFlicker_36:
        UXTB     R5,R5
        CMP      R5,#+4
        BLT      ??OLED_MenuFlicker_37
//  775         break;
        B        ??OLED_MenuFlicker_21
//  776         
//  777         
//  778         case MENU_5://--------------------------- 选择 菜单2
//  779         for (x=0; x<4; x++)//84~87 选 2
??OLED_MenuFlicker_6:
        MOVS     R5,#+0
        B        ??OLED_MenuFlicker_38
//  780         {
//  781             OLED_Set_Pos(104+x, 1);
??OLED_MenuFlicker_39:
        MOVS     R1,#+1
        MOVS     R0,R5
        ADDS     R0,R0,#+104
        UXTB     R0,R0
        BL       OLED_Set_Pos
//  782             OLED_WrDat(menuNum[4][x]);
        LDR      R0,??DataTable6
        UXTB     R5,R5
        ADDS     R0,R0,R5
        LDRB     R0,[R0, #+28]
        BL       OLED_WrDat
//  783         }
        ADDS     R5,R5,#+1
??OLED_MenuFlicker_38:
        UXTB     R5,R5
        CMP      R5,#+4
        BLT      ??OLED_MenuFlicker_39
//  784         for (x=0; x<4; x++)//20~23 消 1
        MOVS     R5,#+0
        B        ??OLED_MenuFlicker_40
//  785         {
//  786             OLED_Set_Pos(84+x, 1);
??OLED_MenuFlicker_41:
        MOVS     R1,#+1
        MOVS     R0,R5
        ADDS     R0,R0,#+84
        UXTB     R0,R0
        BL       OLED_Set_Pos
//  787             OLED_WrDat(0x81);
        MOVS     R0,#+129
        BL       OLED_WrDat
//  788         }
        ADDS     R5,R5,#+1
??OLED_MenuFlicker_40:
        UXTB     R5,R5
        CMP      R5,#+4
        BLT      ??OLED_MenuFlicker_41
//  789         break;
        B        ??OLED_MenuFlicker_21
//  790         
//  791         case MENU_6://--------------------------- 选择 菜单2
//  792         for (x=0; x<4; x++)//84~87 选 2
??OLED_MenuFlicker_9:
        MOVS     R5,#+0
        B        ??OLED_MenuFlicker_42
//  793         {
//  794             OLED_Set_Pos(124+x, 1);
??OLED_MenuFlicker_43:
        MOVS     R1,#+1
        MOVS     R0,R5
        ADDS     R0,R0,#+124
        UXTB     R0,R0
        BL       OLED_Set_Pos
//  795             OLED_WrDat(menuNum[4][x]);
        LDR      R0,??DataTable6
        UXTB     R5,R5
        ADDS     R0,R0,R5
        LDRB     R0,[R0, #+28]
        BL       OLED_WrDat
//  796         }
        ADDS     R5,R5,#+1
??OLED_MenuFlicker_42:
        UXTB     R5,R5
        CMP      R5,#+4
        BLT      ??OLED_MenuFlicker_43
//  797         for (x=0; x<4; x++)//20~23 消 1
        MOVS     R5,#+0
        B        ??OLED_MenuFlicker_44
//  798         {
//  799             OLED_Set_Pos(104+x, 1);
??OLED_MenuFlicker_45:
        MOVS     R1,#+1
        MOVS     R0,R5
        ADDS     R0,R0,#+104
        UXTB     R0,R0
        BL       OLED_Set_Pos
//  800             OLED_WrDat(0x81);
        MOVS     R0,#+129
        BL       OLED_WrDat
//  801         }
        ADDS     R5,R5,#+1
??OLED_MenuFlicker_44:
        UXTB     R5,R5
        CMP      R5,#+4
        BLT      ??OLED_MenuFlicker_45
//  802         break;
        B        ??OLED_MenuFlicker_21
//  803         
//  804                 
//  805     case MENU_7://--------------------------- 选择 菜单3
//  806         for (x=0; x<4; x++)//20~23 选 3
??OLED_MenuFlicker_8:
        MOVS     R5,#+0
        B        ??OLED_MenuFlicker_46
//  807         {
//  808             OLED_Set_Pos(20+x, 5);
??OLED_MenuFlicker_47:
        MOVS     R1,#+5
        MOVS     R0,R5
        ADDS     R0,R0,#+20
        UXTB     R0,R0
        BL       OLED_Set_Pos
//  809             OLED_WrDat(menuNum[4][x]);
        LDR      R0,??DataTable6
        UXTB     R5,R5
        ADDS     R0,R0,R5
        LDRB     R0,[R0, #+28]
        BL       OLED_WrDat
//  810         }
        ADDS     R5,R5,#+1
??OLED_MenuFlicker_46:
        UXTB     R5,R5
        CMP      R5,#+4
        BLT      ??OLED_MenuFlicker_47
//  811         for (x=0; x<4; x++)//84~87 消 2
        MOVS     R5,#+0
        B        ??OLED_MenuFlicker_48
//  812         {
//  813             OLED_Set_Pos(124+x, 1);
??OLED_MenuFlicker_49:
        MOVS     R1,#+1
        MOVS     R0,R5
        ADDS     R0,R0,#+124
        UXTB     R0,R0
        BL       OLED_Set_Pos
//  814             OLED_WrDat(0x81);
        MOVS     R0,#+129
        BL       OLED_WrDat
//  815         }
        ADDS     R5,R5,#+1
??OLED_MenuFlicker_48:
        UXTB     R5,R5
        CMP      R5,#+4
        BLT      ??OLED_MenuFlicker_49
//  816         break;
        B        ??OLED_MenuFlicker_21
//  817         
//  818    case MENU_8://--------------------------- 选择 菜单3
//  819         for (x=0; x<4; x++)//20~23 选 3
??OLED_MenuFlicker_11:
        MOVS     R5,#+0
        B        ??OLED_MenuFlicker_50
//  820         {
//  821             OLED_Set_Pos(40+x, 5);
??OLED_MenuFlicker_51:
        MOVS     R1,#+5
        MOVS     R0,R5
        ADDS     R0,R0,#+40
        UXTB     R0,R0
        BL       OLED_Set_Pos
//  822             OLED_WrDat(menuNum[4][x]);
        LDR      R0,??DataTable6
        UXTB     R5,R5
        ADDS     R0,R0,R5
        LDRB     R0,[R0, #+28]
        BL       OLED_WrDat
//  823         }
        ADDS     R5,R5,#+1
??OLED_MenuFlicker_50:
        UXTB     R5,R5
        CMP      R5,#+4
        BLT      ??OLED_MenuFlicker_51
//  824         for (x=0; x<4; x++)//84~87 消 2
        MOVS     R5,#+0
        B        ??OLED_MenuFlicker_52
//  825         {
//  826             OLED_Set_Pos(20+x, 5);
??OLED_MenuFlicker_53:
        MOVS     R1,#+5
        MOVS     R0,R5
        ADDS     R0,R0,#+20
        UXTB     R0,R0
        BL       OLED_Set_Pos
//  827             OLED_WrDat(0x81);
        MOVS     R0,#+129
        BL       OLED_WrDat
//  828         }
        ADDS     R5,R5,#+1
??OLED_MenuFlicker_52:
        UXTB     R5,R5
        CMP      R5,#+4
        BLT      ??OLED_MenuFlicker_53
//  829         break;
        B        ??OLED_MenuFlicker_21
//  830         
//  831           case MENU_9://--------------------------- 选择 菜单3
//  832         for (x=0; x<4; x++)//20~23 选 3
??OLED_MenuFlicker_10:
        MOVS     R5,#+0
        B        ??OLED_MenuFlicker_54
//  833         {
//  834             OLED_Set_Pos(60+x, 5);
??OLED_MenuFlicker_55:
        MOVS     R1,#+5
        MOVS     R0,R5
        ADDS     R0,R0,#+60
        UXTB     R0,R0
        BL       OLED_Set_Pos
//  835             OLED_WrDat(menuNum[4][x]);
        LDR      R0,??DataTable6
        UXTB     R5,R5
        ADDS     R0,R0,R5
        LDRB     R0,[R0, #+28]
        BL       OLED_WrDat
//  836         }
        ADDS     R5,R5,#+1
??OLED_MenuFlicker_54:
        UXTB     R5,R5
        CMP      R5,#+4
        BLT      ??OLED_MenuFlicker_55
//  837         for (x=0; x<4; x++)//84~87 消 2
        MOVS     R5,#+0
        B        ??OLED_MenuFlicker_56
//  838         {
//  839             OLED_Set_Pos(40+x, 5);
??OLED_MenuFlicker_57:
        MOVS     R1,#+5
        MOVS     R0,R5
        ADDS     R0,R0,#+40
        UXTB     R0,R0
        BL       OLED_Set_Pos
//  840             OLED_WrDat(0x81);
        MOVS     R0,#+129
        BL       OLED_WrDat
//  841         }
        ADDS     R5,R5,#+1
??OLED_MenuFlicker_56:
        UXTB     R5,R5
        CMP      R5,#+4
        BLT      ??OLED_MenuFlicker_57
//  842         break;
        B        ??OLED_MenuFlicker_21
//  843         
//  844         
//  845         
//  846     case MENU_10://--------------------------- 选择 菜单4第四表格
//  847                 for (x=0; x<4; x++)//84~87 选4
??OLED_MenuFlicker_13:
        MOVS     R5,#+0
        B        ??OLED_MenuFlicker_58
//  848         {
//  849             OLED_Set_Pos(84+x, 5);
??OLED_MenuFlicker_59:
        MOVS     R1,#+5
        MOVS     R0,R5
        ADDS     R0,R0,#+84
        UXTB     R0,R0
        BL       OLED_Set_Pos
//  850             OLED_WrDat(menuNum[4][x]);
        LDR      R0,??DataTable6
        UXTB     R5,R5
        ADDS     R0,R0,R5
        LDRB     R0,[R0, #+28]
        BL       OLED_WrDat
//  851         }
        ADDS     R5,R5,#+1
??OLED_MenuFlicker_58:
        UXTB     R5,R5
        CMP      R5,#+4
        BLT      ??OLED_MenuFlicker_59
//  852         for (x=0; x<4; x++)//84~87 消 3
        MOVS     R5,#+0
        B        ??OLED_MenuFlicker_60
//  853         {
//  854             OLED_Set_Pos(60+x, 5);
??OLED_MenuFlicker_61:
        MOVS     R1,#+5
        MOVS     R0,R5
        ADDS     R0,R0,#+60
        UXTB     R0,R0
        BL       OLED_Set_Pos
//  855             OLED_WrDat(0x81);
        MOVS     R0,#+129
        BL       OLED_WrDat
//  856         }
        ADDS     R5,R5,#+1
??OLED_MenuFlicker_60:
        UXTB     R5,R5
        CMP      R5,#+4
        BLT      ??OLED_MenuFlicker_61
//  857         break;
        B        ??OLED_MenuFlicker_21
//  858         
//  859          case MENU_11://--------------------------- 选择 菜单4第四表格
//  860                 for (x=0; x<4; x++)//84~87 选4
??OLED_MenuFlicker_12:
        MOVS     R5,#+0
        B        ??OLED_MenuFlicker_62
//  861         {
//  862             OLED_Set_Pos(104+x, 5);
??OLED_MenuFlicker_63:
        MOVS     R1,#+5
        MOVS     R0,R5
        ADDS     R0,R0,#+104
        UXTB     R0,R0
        BL       OLED_Set_Pos
//  863             OLED_WrDat(menuNum[4][x]);
        LDR      R0,??DataTable6
        UXTB     R5,R5
        ADDS     R0,R0,R5
        LDRB     R0,[R0, #+28]
        BL       OLED_WrDat
//  864         }
        ADDS     R5,R5,#+1
??OLED_MenuFlicker_62:
        UXTB     R5,R5
        CMP      R5,#+4
        BLT      ??OLED_MenuFlicker_63
//  865         for (x=0; x<4; x++)//84~87 消 3
        MOVS     R5,#+0
        B        ??OLED_MenuFlicker_64
        DATA
??OLED_MenuFlicker_18:
        DC32     logo
        THUMB
//  866         {
//  867             OLED_Set_Pos(84+x, 5);
??OLED_MenuFlicker_65:
        MOVS     R1,#+5
        MOVS     R0,R5
        ADDS     R0,R0,#+84
        UXTB     R0,R0
        BL       OLED_Set_Pos
//  868             OLED_WrDat(0x81);
        MOVS     R0,#+129
        BL       OLED_WrDat
//  869         }
        ADDS     R5,R5,#+1
??OLED_MenuFlicker_64:
        UXTB     R5,R5
        CMP      R5,#+4
        BLT      ??OLED_MenuFlicker_65
//  870         break;
        B        ??OLED_MenuFlicker_21
//  871         
//  872          case MENU_12://--------------------------- 选择 菜单4第四表格
//  873                 for (x=0; x<4; x++)//84~87 选4
??OLED_MenuFlicker_14:
        MOVS     R5,#+0
        B        ??OLED_MenuFlicker_66
//  874         {
//  875             OLED_Set_Pos(124+x, 5);
??OLED_MenuFlicker_67:
        MOVS     R1,#+5
        MOVS     R0,R5
        ADDS     R0,R0,#+124
        UXTB     R0,R0
        BL       OLED_Set_Pos
//  876             OLED_WrDat(menuNum[4][x]);
        LDR      R0,??DataTable6
        UXTB     R5,R5
        ADDS     R0,R0,R5
        LDRB     R0,[R0, #+28]
        BL       OLED_WrDat
//  877         }
        ADDS     R5,R5,#+1
??OLED_MenuFlicker_66:
        UXTB     R5,R5
        CMP      R5,#+4
        BLT      ??OLED_MenuFlicker_67
//  878         for (x=0; x<4; x++)//84~87 消 3
        MOVS     R5,#+0
        B        ??OLED_MenuFlicker_68
//  879         {
//  880             OLED_Set_Pos(104+x, 5);
??OLED_MenuFlicker_69:
        MOVS     R1,#+5
        MOVS     R0,R5
        ADDS     R0,R0,#+104
        UXTB     R0,R0
        BL       OLED_Set_Pos
//  881             OLED_WrDat(0x81);
        MOVS     R0,#+129
        BL       OLED_WrDat
//  882         }
        ADDS     R5,R5,#+1
??OLED_MenuFlicker_68:
        UXTB     R5,R5
        CMP      R5,#+4
        BLT      ??OLED_MenuFlicker_69
//  883         break;
        B        ??OLED_MenuFlicker_21
//  884         
//  885     
//  886     default :
//  887         break;
//  888     }
//  889 }
??OLED_MenuFlicker_15:
??OLED_MenuFlicker_21:
        POP      {R0,R4,R5,PC}    ;; return

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable6:
        DC32     menuNum
//  890 
//  891 
//  892 
//  893 
//  894 /**
//  895   * 简介
//  896   *     uint16 转 uint8
//  897   * 参数
//  898   *     hex     uint16数据
//  899   *     Print   uint8数组地址
//  900   */

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
//  901 void OLED_HEXACSII(uint16 hex, uint8* Print)
//  902 {
OLED_HEXACSII:
        PUSH     {R4-R7,LR}
        MOVS     R4,R0
        MOVS     R5,R1
//  903 	uint8 hexcheck ;
//  904 	uint8 TEMP ;
//  905 	TEMP = 6 ;
        MOVS     R6,#+6
//  906 	Print[TEMP ]='\0';
        MOVS     R0,#+0
        UXTB     R6,R6
        STRB     R0,[R5, R6]
        B        ??OLED_HEXACSII_0
//  907 	while(TEMP)
//  908 	{
//  909 	  	TEMP -- ;
??OLED_HEXACSII_1:
        SUBS     R6,R6,#+1
//  910 	  	hexcheck  =  hex%10 ;
        UXTH     R4,R4
        MOVS     R0,R4
        MOVS     R1,#+10
        BL       __aeabi_idivmod
        MOVS     R7,R1
//  911 	  	hex   /=10 ;
        UXTH     R4,R4
        MOVS     R0,R4
        MOVS     R1,#+10
        BL       __aeabi_idiv
        MOVS     R4,R0
//  912 	  	Print[TEMP ]  = hexcheck + 0x30 ;
        ADDS     R7,R7,#+48
        UXTB     R6,R6
        STRB     R7,[R5, R6]
//  913 	}
??OLED_HEXACSII_0:
        UXTB     R6,R6
        CMP      R6,#+0
        BNE      ??OLED_HEXACSII_1
//  914 
//  915 }
        POP      {R4-R7,PC}       ;; return
//  916 
//  917 /**
//  918   * 简介
//  919   *     OLED显示无符号数(6*8字体)
//  920   * 参数
//  921   *     x			x轴坐标设置
//  922   *     y           y轴坐标设置
//  923   *     num         无符号数
//  924   * 返回值
//  925   *     下一个值应该放置的x坐标
//  926   * 备注
//  927   */

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
//  928 uint8 OLED_Uint16(uint8 x, uint8 y, uint16 num)
//  929 {
OLED_Uint16:
        PUSH     {R4,R5,LR}
        SUB      SP,SP,#+20
        MOVS     R4,R0
        MOVS     R5,R1
        MOVS     R0,R2
//  930 	uint8 *ch1,ch[7], m[7];
//  931     uint8 i = 0;
        MOVS     R1,#+0
//  932 
//  933     if (num == 0)
        UXTH     R0,R0
        CMP      R0,#+0
        BNE      ??OLED_Uint16_0
//  934     {
//  935         m[0] = '0';
        MOVS     R0,#+48
        MOV      R1,SP
        STRB     R0,[R1, #+0]
//  936         m[1] = '\0';
        MOVS     R0,#+0
        MOV      R1,SP
        STRB     R0,[R1, #+1]
        B        ??OLED_Uint16_1
//  937     }
//  938     else
//  939 	{
//  940         OLED_HEXACSII(num,ch);
??OLED_Uint16_0:
        ADD      R1,SP,#+8
        UXTH     R0,R0
        BL       OLED_HEXACSII
//  941         ch1 =&ch[1];
        ADD      R0,SP,#+8
        ADDS     R0,R0,#+1
        B        ??OLED_Uint16_2
//  942         while (*ch1 == '0')
//  943         {
//  944             ch1++;
??OLED_Uint16_3:
        ADDS     R0,R0,#+1
//  945         }
??OLED_Uint16_2:
        LDRB     R1,[R0, #+0]
        CMP      R1,#+48
        BEQ      ??OLED_Uint16_3
//  946         for (i=0; *ch1 != '\0'; i++)
        MOVS     R1,#+0
        B        ??OLED_Uint16_4
//  947         {
//  948             m[i] = *ch1;
??OLED_Uint16_5:
        LDRB     R2,[R0, #+0]
        MOV      R3,SP
        UXTB     R1,R1
        STRB     R2,[R3, R1]
//  949             ch1++;
        ADDS     R0,R0,#+1
//  950         }
        ADDS     R1,R1,#+1
??OLED_Uint16_4:
        LDRB     R2,[R0, #+0]
        CMP      R2,#+0
        BNE      ??OLED_Uint16_5
//  951         m[i] = '\0';
        MOVS     R0,#+0
        MOV      R2,SP
        UXTB     R1,R1
        STRB     R0,[R2, R1]
//  952     }
//  953 
//  954     x = OLED_DisplaytinyStr(x, y, (char *)m);	//显示数字
??OLED_Uint16_1:
        MOV      R2,SP
        MOVS     R1,R5
        UXTB     R1,R1
        MOVS     R0,R4
        UXTB     R0,R0
        BL       OLED_DisplaytinyStr
        MOVS     R4,R0
//  955 
//  956     return x;
        MOVS     R0,R4
        UXTB     R0,R0
        ADD      SP,SP,#+20
        POP      {R4,R5,PC}       ;; return
//  957 }
//  958 
//  959 /**
//  960   * 简介
//  961   *     OLED显示 有符号数 (6*8字体)
//  962   * 参数
//  963   *     x			x轴坐标设置
//  964   *     y           y轴坐标设置
//  965   *     num         有 符号数
//  966   * 备注
//  967   */

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
//  968 void OLED_Int16(uint8 x, uint8 y, int16 num)
//  969 {
OLED_Int16:
        PUSH     {R4-R6,LR}
        MOVS     R4,R0
        MOVS     R6,R1
        MOVS     R5,R2
//  970 	if (num < 0)
        SXTH     R5,R5
        CMP      R5,#+0
        BPL      ??OLED_Int16_0
//  971     {
//  972         num = -num;
        MOVS     R0,R5
        SXTH     R0,R0
        RSBS     R5,R0,#+0
//  973         OLED_DisplaytinyStr(x, y, (char *)"-");
        ADR      R2,??DataTable11  ;; "-"
        MOVS     R1,R6
        UXTB     R1,R1
        MOVS     R0,R4
        UXTB     R0,R0
        BL       OLED_DisplaytinyStr
//  974         x += 6;
        ADDS     R4,R4,#+6
//  975     }
//  976     OLED_Uint16(x, y, num);
??OLED_Int16_0:
        MOVS     R2,R5
        UXTH     R2,R2
        MOVS     R1,R6
        UXTB     R1,R1
        MOVS     R0,R4
        UXTB     R0,R0
        BL       OLED_Uint16
//  977 }
        POP      {R4-R6,PC}       ;; return
//  978 
//  979 
//  980 /**
//  981   * 简介
//  982   *     OLED显示 float (6*8字体)
//  983   * 参数
//  984   *     x			x轴坐标设置
//  985   *     y           y轴坐标设置
//  986   *     len         显示尾数长度
//  987   * 备注
//  988   */

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
//  989 void OLED_DisplayFloat(uint8 x, uint8 y, float data, uint8 len)
//  990 {
OLED_DisplayFloat:
        PUSH     {R0,R1,R3-R7,LR}
        MOVS     R4,R0
        MOVS     R5,R2
//  991     uint8 i = 0;
        MOVS     R6,#+0
//  992     uint32 integer;//存储整数
//  993     float decimals;//存储小数
//  994     uint8 decimalsInterger;//小数转换为整数
//  995 
//  996     if (data < 0)
        MOVS     R0,R5
        MOVS     R1,#+0
        BL       __aeabi_cfcmple
        BCS      ??OLED_DisplayFloat_0
//  997     {
//  998         data = -data;
        MOVS     R0,#+128
        LSLS     R0,R0,#+24       ;; #-2147483648
        EORS     R5,R5,R0
//  999         OLED_DisplaytinyStr(x, y, (char *)"-");
        ADR      R2,??DataTable11  ;; "-"
        MOV      R0,SP
        LDRB     R1,[R0, #+4]
        MOVS     R0,R4
        UXTB     R0,R0
        BL       OLED_DisplaytinyStr
// 1000         x += 6;
        ADDS     R4,R4,#+6
// 1001     }
// 1002 
// 1003     integer = (uint32)data;
??OLED_DisplayFloat_0:
        MOVS     R0,R5
        BL       __aeabi_f2uiz
        MOVS     R6,R0
// 1004     decimals = data - (float)integer;
        MOVS     R0,R6
        BL       __aeabi_ui2f
        MOVS     R1,R0
        MOVS     R0,R5
        BL       __aeabi_fsub
        MOVS     R7,R0
// 1005 
// 1006     //发送整数
// 1007     if (data > 9999)
        MOVS     R0,R5
        LDR      R1,??DataTable11_1  ;; 0x461c3c01
        BL       __aeabi_cfrcmple
        BHI      ??OLED_DisplayFloat_1
// 1008     {
// 1009         x = OLED_Uint16(x, y, integer/10000);
        MOVS     R0,R6
        LDR      R1,??DataTable11_2  ;; 0x2710
        BL       __aeabi_uidiv
        MOVS     R2,R0
        UXTH     R2,R2
        MOV      R0,SP
        LDRB     R1,[R0, #+4]
        MOVS     R0,R4
        UXTB     R0,R0
        BL       OLED_Uint16
        MOVS     R4,R0
// 1010     }
// 1011     x = OLED_Uint16(x, y, integer%10000);
??OLED_DisplayFloat_1:
        MOVS     R0,R6
        LDR      R1,??DataTable11_2  ;; 0x2710
        BL       __aeabi_uidivmod
        MOVS     R2,R1
        UXTH     R2,R2
        MOV      R0,SP
        LDRB     R1,[R0, #+4]
        MOVS     R0,R4
        UXTB     R0,R0
        BL       OLED_Uint16
        MOVS     R4,R0
// 1012 
// 1013     //发送小数点
// 1014     OLED_DisplaytinyStr(x, y, (char *)".");
        ADR      R2,??DataTable11_3  ;; "."
        MOV      R0,SP
        LDRB     R1,[R0, #+4]
        MOVS     R0,R4
        UXTB     R0,R0
        BL       OLED_DisplaytinyStr
// 1015     x += 6;
        ADDS     R4,R4,#+6
        B        ??OLED_DisplayFloat_2
// 1016 
// 1017     //发送小数
// 1018     while (len)
// 1019     {
// 1020         len --;
// 1021         decimals *= 10;
// 1022         decimalsInterger = (uint8)decimals + 0x30 - 32;
// 1023 
// 1024         OLED_Set_Pos(x, y);
// 1025 		for (i=0; i<6; i++)
// 1026 			OLED_WrDat(F6x8[decimalsInterger][i]);
??OLED_DisplayFloat_3:
        LDR      R0,??DataTable11_4
        UXTB     R5,R5
        MOVS     R1,#+6
        MULS     R1,R5,R1
        ADDS     R0,R0,R1
        UXTB     R6,R6
        LDRB     R0,[R0, R6]
        BL       OLED_WrDat
        ADDS     R6,R6,#+1
??OLED_DisplayFloat_4:
        UXTB     R6,R6
        CMP      R6,#+6
        BLT      ??OLED_DisplayFloat_3
// 1027 		x+=6;
        ADDS     R4,R4,#+6
// 1028         decimals = decimals - (float)(decimalsInterger-0x30+32);
        UXTB     R5,R5
        SUBS     R5,R5,#+16
        MOVS     R0,R5
        BL       __aeabi_i2f
        MOVS     R1,R0
        MOVS     R0,R7
        BL       __aeabi_fsub
        MOVS     R7,R0
??OLED_DisplayFloat_2:
        MOV      R0,SP
        LDRB     R0,[R0, #+8]
        CMP      R0,#+0
        BEQ      ??OLED_DisplayFloat_5
        MOV      R0,SP
        MOV      R1,SP
        LDRB     R1,[R1, #+8]
        SUBS     R1,R1,#+1
        STRB     R1,[R0, #+8]
        LDR      R0,??DataTable11_5  ;; 0x41200000
        MOVS     R1,R7
        BL       __aeabi_fmul
        MOVS     R7,R0
        MOVS     R0,R7
        BL       __aeabi_f2iz
        MOVS     R5,R0
        ADDS     R5,R5,#+16
        MOV      R0,SP
        LDRB     R1,[R0, #+4]
        MOVS     R0,R4
        UXTB     R0,R0
        BL       OLED_Set_Pos
        MOVS     R6,#+0
        B        ??OLED_DisplayFloat_4
// 1029     }
// 1030 }
??OLED_DisplayFloat_5:
        POP      {R0-R2,R4-R7,PC}  ;; return
// 1031 
// 1032 /**
// 1033   * 简介
// 1034   *     OLED显示 键盘
// 1035   * 备注
// 1036   */

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
// 1037 void OLED_Display()
// 1038 {
OLED_Display:
        PUSH     {R7,LR}
// 1039 	OLED_DisplaytinyStr(0, 0, "U  P_angle +100");
        LDR      R2,??DataTable11_6
        MOVS     R1,#+0
        MOVS     R0,#+0
        BL       OLED_DisplaytinyStr
// 1040 	OLED_DisplaytinyStr(0, 1, "D  P_angle -100");
        LDR      R2,??DataTable11_7
        MOVS     R1,#+1
        MOVS     R0,#+0
        BL       OLED_DisplaytinyStr
// 1041 	OLED_DisplaytinyStr(0, 2, "L  D_angle +1");
        LDR      R2,??DataTable11_8
        MOVS     R1,#+2
        MOVS     R0,#+0
        BL       OLED_DisplaytinyStr
// 1042 	OLED_DisplaytinyStr(0, 3, "R  D_angle -1");
        LDR      R2,??DataTable11_9
        MOVS     R1,#+3
        MOVS     R0,#+0
        BL       OLED_DisplaytinyStr
// 1043 	OLED_DisplaytinyStr(0, 4, "M  chice");
        LDR      R2,??DataTable11_10
        MOVS     R1,#+4
        MOVS     R0,#+0
        BL       OLED_DisplaytinyStr
// 1044 }
        POP      {R0,PC}          ;; return
// 1045 
// 1046 

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
// 1047 void OLED_Display_tinyFormat(unsigned char x,unsigned char y,const char* format,...)
// 1048 {
OLED_Display_tinyFormat:
        PUSH     {R3}
        PUSH     {R4-R6,LR}
        SUB      SP,SP,#+68
        MOVS     R5,R0
        MOVS     R4,R1
        MOVS     R6,R2
// 1049 	va_list ap;
// 1050 	char string[64]={0};
        MOV      R0,SP
        MOVS     R1,#+64
        BL       __aeabi_memclr4
// 1051 	va_start(ap,format);
        ADD      R3,SP,#+84
// 1052 	vsnprintf(string,64,format,ap);
        MOVS     R2,R6
        MOVS     R1,#+64
        MOV      R0,SP
        BL       vsnprintf
// 1053 	va_end(ap);
// 1054 	OLED_DisplaytinyStr(x,y,string);
        MOV      R2,SP
        MOVS     R1,R4
        UXTB     R1,R1
        MOVS     R0,R5
        UXTB     R0,R0
        BL       OLED_DisplaytinyStr
// 1055 }
        ADD      SP,SP,#+68
        LDR      R0,[SP, #+12]
        POP      {R4-R6}
        ADD      SP,SP,#+8
        BX       R0               ;; return
// 1056 

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
// 1057 uint8 StrLen6X8(char *str)
// 1058 {
StrLen6X8:
        PUSH     {LR}
        MOVS     R1,R0
// 1059     uint8 i=0;
        MOVS     R0,#+0
        B        ??StrLen6X8_0
// 1060     while(str[i]!='\0')
// 1061     {
// 1062       i++;
??StrLen6X8_1:
        ADDS     R0,R0,#+1
// 1063     }
??StrLen6X8_0:
        UXTB     R0,R0
        LDRB     R2,[R1, R0]
        CMP      R2,#+0
        BNE      ??StrLen6X8_1
// 1064     i++;
        ADDS     R0,R0,#+1
// 1065     return (i*6);
        MOVS     R1,#+6
        MULS     R0,R1,R0
        UXTB     R0,R0
        POP      {PC}             ;; return
// 1066 }

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
// 1067 uint8 StrLen8X16(char *str)
// 1068 {
StrLen8X16:
        PUSH     {LR}
        MOVS     R1,R0
// 1069     uint8 i=0;
        MOVS     R0,#+0
        B        ??StrLen8X16_0
// 1070     while(str[i]!='\0')
// 1071     {
// 1072       i++;
??StrLen8X16_1:
        ADDS     R0,R0,#+1
// 1073     }
??StrLen8X16_0:
        UXTB     R0,R0
        LDRB     R2,[R1, R0]
        CMP      R2,#+0
        BNE      ??StrLen8X16_1
// 1074     i++;
        ADDS     R0,R0,#+1
// 1075     return (i*8);
        MOVS     R1,#+8
        MULS     R0,R1,R0
        UXTB     R0,R0
        POP      {PC}             ;; return
// 1076 }
// 1077 
// 1078 
// 1079 

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
// 1080 void OLED_Draw_Point(unsigned char x,unsigned char y,unsigned char a)
// 1081 {
OLED_Draw_Point:
        PUSH     {R4-R7,LR}
        MOVS     R4,R0
        MOVS     R7,R1
        MOVS     R5,R2
// 1082    	unsigned char pos,bx,temp=0;
        MOVS     R0,#+0
// 1083 
// 1084 	if(x>127||y>64)
        UXTB     R4,R4
        CMP      R4,#+128
        BGE      ??OLED_Draw_Point_0
        UXTB     R7,R7
        CMP      R7,#+65
        BLT      ??OLED_Draw_Point_1
// 1085 		return;//超出范围了.
??OLED_Draw_Point_0:
        B        ??OLED_Draw_Point_2
// 1086 	pos=y/8;
??OLED_Draw_Point_1:
        UXTB     R7,R7
        MOVS     R0,R7
        MOVS     R1,#+8
        BL       __aeabi_idiv
        MOVS     R6,R0
// 1087 	bx=y%8;
        UXTB     R7,R7
        MOVS     R0,R7
        MOVS     R1,#+8
        BL       __aeabi_idivmod
// 1088 	temp=1<<(bx);
        MOVS     R0,#+1
        LSLS     R0,R0,R1
// 1089 	if(a)
        UXTB     R5,R5
        CMP      R5,#+0
        BEQ      ??OLED_Draw_Point_3
// 1090 		OLED_GRAM[pos][x]|=temp;
        LDR      R1,??DataTable11_11
        UXTB     R6,R6
        MOVS     R2,#+8
        MULS     R2,R6,R2
        ADDS     R1,R1,R2
        UXTB     R4,R4
        LDR      R2,??DataTable11_11
        UXTB     R6,R6
        MOVS     R3,#+8
        MULS     R6,R3,R6
        ADDS     R2,R2,R6
        MOVS     R3,R4
        UXTB     R3,R3
        LDRB     R2,[R2, R3]
        ORRS     R0,R0,R2
        STRB     R0,[R1, R4]
        B        ??OLED_Draw_Point_4
// 1091 	else
// 1092 		OLED_GRAM[pos][x]&=~temp;
??OLED_Draw_Point_3:
        LDR      R1,??DataTable11_11
        UXTB     R6,R6
        MOVS     R2,#+8
        MULS     R2,R6,R2
        ADDS     R1,R1,R2
        UXTB     R4,R4
        LDR      R2,??DataTable11_11
        UXTB     R6,R6
        MOVS     R3,#+8
        MULS     R6,R3,R6
        ADDS     R2,R2,R6
        MOVS     R3,R4
        UXTB     R3,R3
        LDRB     R2,[R2, R3]
        BICS     R2,R2,R0
        STRB     R2,[R1, R4]
// 1093 }
??OLED_Draw_Point_4:
??OLED_Draw_Point_2:
        POP      {R4-R7,PC}       ;; return

        SECTION `.text`:CODE:NOROOT(1)
        THUMB
// 1094 void OLED_Clear_allGRAM(void)
// 1095 {
OLED_Clear_allGRAM:
        PUSH     {LR}
// 1096    unsigned char i,j;
// 1097    for(i=0;i<8;i++)
        MOVS     R0,#+0
        B        ??OLED_Clear_allGRAM_0
// 1098       for(j=0;j<128;j++)
// 1099          OLED_GRAM[i][j]=0;
??OLED_Clear_allGRAM_1:
        LDR      R2,??DataTable11_11
        UXTB     R0,R0
        MOVS     R3,#+8
        MULS     R3,R0,R3
        ADDS     R2,R2,R3
        UXTB     R1,R1
        MOVS     R3,#+0
        STRB     R3,[R2, R1]
        ADDS     R1,R1,#+1
??OLED_Clear_allGRAM_2:
        UXTB     R1,R1
        CMP      R1,#+128
        BLT      ??OLED_Clear_allGRAM_1
        ADDS     R0,R0,#+1
??OLED_Clear_allGRAM_0:
        UXTB     R0,R0
        CMP      R0,#+8
        BGE      ??OLED_Clear_allGRAM_3
        MOVS     R1,#+0
        B        ??OLED_Clear_allGRAM_2
// 1100 }
??OLED_Clear_allGRAM_3:
        POP      {PC}             ;; return

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable11:
        DC8      "-",0x0,0x0

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable11_1:
        DC32     0x461c3c01

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable11_2:
        DC32     0x2710

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable11_3:
        DC8      ".",0x0,0x0

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable11_4:
        DC32     F6x8

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable11_5:
        DC32     0x41200000

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable11_6:
        DC32     ?_10

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable11_7:
        DC32     ?_11

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable11_8:
        DC32     ?_12

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable11_9:
        DC32     ?_13

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable11_10:
        DC32     ?_14

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable11_11:
        DC32     OLED_GRAM

        SECTION `.iar_vfe_header`:DATA:NOALLOC:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
        DC32 0

        SECTION __DLIB_PERTHREAD:DATA:REORDER:NOROOT(0)
        SECTION_TYPE SHT_PROGBITS, 0

        SECTION __DLIB_PERTHREAD_init:DATA:REORDER:NOROOT(0)
        SECTION_TYPE SHT_PROGBITS, 0

        END
// 1101 
// 1102 
// 1103 /* ---------------------------------------- 存在bug的函数 不到万不得已 不要使用 */
// 1104 
// 1105 /**
// 1106   * 简介
// 1107   *     OLED printf显示
// 1108   * 参数
// 1109   *     x, y 坐标值
// 1110   *     format --- "%d"类似这样的
// 1111   *     ...    --- 变量，就像使用printf一样
// 1112   * 备注
// 1113   *     由于逐飞库最底层的修改，printf无法通过类似方法通过串口打印
// 1114   *     而逐飞库的printf函数无法打印 %f 类型数据 --- han 1/26
// 1115   */
// 1116 //void OLED_Display_Format(unsigned char x,unsigned char y,const char* format,...)
// 1117 //{
// 1118 //	va_list ap;
// 1119 //	char string[64]={0};
// 1120 //	va_start(ap,format);
// 1121 //	vsnprintf(string,64,format,ap);
// 1122 //	va_end(ap);
// 1123 //	OLED_DisplayStr(x,y,string);
// 1124 //}
// 1125 
// 1126 
// 1127 /**
// 1128   * 简介
// 1129   *     OLED显示 float
// 1130   * 参数
// 1131   *     date    float数据
// 1132   *     len     显示长度  推荐 9
// 1133   * 备注
// 1134   *     当 uart.c 文件中的 UART_SendFloat() 中的 UART_FloatArray数组定义
// 1135   *     位于 UART_SendFloat() 函数中时，此函数就会无效，未查明原因 --- han 1/28
// 1136   */
// 1137 //void OLED_DisplayFloat(uint8 x, uint8 y, float date, uint8 len)
// 1138 //{
// 1139 //////    uint8 i = 0;
// 1140 ////    char OLED_FloatArray[FLOAT_ARRAY_NUM] = {0};
// 1141 ////
// 1142 //////    //不能在定义时候初始化，不知道原因，总之会死，只能定义完再初始化
// 1143 //////    for (i=0; i<FLOAT_ARRAY_NUM; i++)
// 1144 //////    {
// 1145 //////        OLED_FloatArray[i] = 0;
// 1146 //////    }
// 1147 ////
// 1148 ////    sprintf(OLED_FloatArray, "%f", date);
// 1149 ////
// 1150 ////    OLED_FloatArray[len] = '\0';
// 1151 ////
// 1152 ////    OLED_DisplayStr(x, y, OLED_FloatArray);
// 1153 //
// 1154 //
// 1155 //    uint8 i=0;
// 1156 //
// 1157 //    for (i=0; i<FLOAT_ARRAY_NUM; i++)
// 1158 //    {
// 1159 //        UART_SendFloatArray[i] = 0;
// 1160 //    }
// 1161 //
// 1162 //    sprintf(UART_SendFloatArray, "%f", date);
// 1163 //
// 1164 //    UART_SendFloatArray[len] = '\0';
// 1165 //
// 1166 //    OLED_DisplayStr(x, y, UART_SendFloatArray);
// 1167 //}
// 1168 
// 1169 /**
// 1170   * 简介
// 1171   *     OLED显示 uint16
// 1172   * 参数
// 1173   *     date    数据
// 1174   */
// 1175 //void OLED_DisplayUint16(uint8 x, uint8 y, uint16 data)
// 1176 //{
// 1177 //    char hold[6] = {0};
// 1178 //    uint16 h = data;
// 1179 //
// 1180 //    sprintf(hold, "%uhd", data);
// 1181 //
// 1182 //    if (h / 9999)
// 1183 //    {
// 1184 //        hold[5] = '\0';
// 1185 //    }
// 1186 //    else if (h / 999)
// 1187 //    {
// 1188 //        hold[4] = '\0';
// 1189 //    }
// 1190 //    else if (h / 99)
// 1191 //    {
// 1192 //        hold[3] = '\0';
// 1193 //    }
// 1194 //    else if (h / 9)
// 1195 //    {
// 1196 //        hold[2] = '\0';
// 1197 //    }
// 1198 //    else
// 1199 //    {
// 1200 //        hold[1] = '\0';
// 1201 //    }
// 1202 //
// 1203 //    OLED_DisplayStr(x, y, hold);
// 1204 //}
// 1205 
// 1206 
// 1207 /* --------------------------- 存在bug的函数 不到万不得已 不要使用 -------- END */
// 1208 
// 1209 
// 
// 1 024 bytes in section .bss
//     8 bytes in section .data
// 2 284 bytes in section .rodata
// 3 014 bytes in section .text
// 
// 3 014 bytes of CODE  memory
// 2 284 bytes of CONST memory
// 1 032 bytes of DATA  memory
//
//Errors: none
//Warnings: none
