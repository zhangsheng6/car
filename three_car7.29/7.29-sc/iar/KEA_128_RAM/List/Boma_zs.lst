###############################################################################
#
# IAR ANSI C/C++ Compiler V7.40.2.8542/W32 for ARM        17/Jul/2018  09:48:29
# Copyright 1999-2015 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  H:\智能车程序2018\电磁三轮――ZS\7.17\user\C\Boma_zs.c
#    Command line =  
#        H:\智能车程序2018\电磁三轮――ZS\7.17\user\C\Boma_zs.c -D IAR -D
#        TWR_K60N512 -D _DLIB_FILE_DESCRIPTOR -lCN
#        H:\智能车程序2018\电磁三轮――ZS\7.17\iar\KEA_128_RAM\List\ -lB
#        H:\智能车程序2018\电磁三轮――ZS\7.17\iar\KEA_128_RAM\List\ -o
#        H:\智能车程序2018\电磁三轮――ZS\7.17\iar\KEA_128_RAM\Obj\ --no_cse
#        --no_unroll --no_inline --no_code_motion --no_tbaa --no_clustering
#        --no_scheduling --debug --endian=little --cpu=Cortex-M0+ -e --fpu=None
#        --dlib_config F:\IAR安装包\arm\INC\c\DLib_Config_Normal.h -I
#        H:\智能车程序2018\电磁三轮――ZS\7.17\iar\..\device\H\ -I
#        H:\智能车程序2018\电磁三轮――ZS\7.17\iar\..\user\H\ -I
#        H:\智能车程序2018\电磁三轮――ZS\7.17\iar\..\system\ -I
#        H:\智能车程序2018\电磁三轮――ZS\7.17\iar\..\lib\H\ -I
#        H:\智能车程序2018\电磁三轮――ZS\7.17\iar\..\system\coreSupport\ -Ol
#    List file    =  
#        H:\智能车程序2018\电磁三轮――ZS\7.17\iar\KEA_128_RAM\List\Boma_zs.lst
#    Object file  =  
#        H:\智能车程序2018\电磁三轮――ZS\7.17\iar\KEA_128_RAM\Obj\Boma_zs.o
#
###############################################################################

H:\智能车程序2018\电磁三轮――ZS\7.17\user\C\Boma_zs.c
      1          #include "Variable.h"
      2          #include "common.h"
      3          #include "allHead.h"
      4          #include  "Boma_zs.h"
      5          extern int Boma_num;
      6          
      7          /**
      8            * 简介
      9            *     拨码按键检测
     10            * 备注
     11          0     1     2    3     4
     12          0000 0001  0010 0011  0100
     13          通过四个IO口的不同高低电平切换，2*2*2*2=16，共0-15，16个挡位
     14            */

   \                                 In section .text, align 2, keep-with-next
     15          uint8 BO_Scan(void)
     16          {
   \                     BO_Scan: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
     17              uint8 num = 0;
   \   00000002   0x2400             MOVS     R4,#+0
     18          
     19              if (GpioGet(KEY_BO_0) == UP)    num |= ((uint8)(1<<3));//num |= 1000
   \   00000004   0x202B             MOVS     R0,#+43
   \   00000006   0x.... 0x....      BL       GpioGet
   \   0000000A   0x2801             CMP      R0,#+1
   \   0000000C   0xD102             BNE      ??BO_Scan_0
   \   0000000E   0x0020             MOVS     R0,R4
   \   00000010   0x2408             MOVS     R4,#+8
   \   00000012   0x4304             ORRS     R4,R4,R0
     20              if (GpioGet(KEY_BO_1) == UP)    num |= ((uint8)(1<<2));//num |= 0100
   \                     ??BO_Scan_0: (+1)
   \   00000014   0x2038             MOVS     R0,#+56
   \   00000016   0x.... 0x....      BL       GpioGet
   \   0000001A   0x2801             CMP      R0,#+1
   \   0000001C   0xD102             BNE      ??BO_Scan_1
   \   0000001E   0x0020             MOVS     R0,R4
   \   00000020   0x2404             MOVS     R4,#+4
   \   00000022   0x4304             ORRS     R4,R4,R0
     21              if (GpioGet(KEY_BO_2) == UP)    num |= ((uint8)(1<<1));//num |= 0010
   \                     ??BO_Scan_1: (+1)
   \   00000024   0x2039             MOVS     R0,#+57
   \   00000026   0x.... 0x....      BL       GpioGet
   \   0000002A   0x2801             CMP      R0,#+1
   \   0000002C   0xD102             BNE      ??BO_Scan_2
   \   0000002E   0x0020             MOVS     R0,R4
   \   00000030   0x2402             MOVS     R4,#+2
   \   00000032   0x4304             ORRS     R4,R4,R0
     22              if (GpioGet(KEY_BO_3) == UP)    num |= ((uint8)(1<<0));//num |= 0000
   \                     ??BO_Scan_2: (+1)
   \   00000034   0x2040             MOVS     R0,#+64
   \   00000036   0x.... 0x....      BL       GpioGet
   \   0000003A   0x2801             CMP      R0,#+1
   \   0000003C   0xD102             BNE      ??BO_Scan_3
   \   0000003E   0x0020             MOVS     R0,R4
   \   00000040   0x2401             MOVS     R4,#+1
   \   00000042   0x4304             ORRS     R4,R4,R0
     23          
     24              return num;
   \                     ??BO_Scan_3: (+1)
   \   00000044   0x0020             MOVS     R0,R4
   \   00000046   0xB2C0             UXTB     R0,R0
   \   00000048   0xBD10             POP      {R4,PC}          ;; return
     25          }
     26          //

   \                                 In section .text, align 2, keep-with-next
     27          void Boma_Gear_ZS(void)
     28          {
   \                     Boma_Gear_ZS: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
     29            switch(BO_Scan())
   \   00000002   0x.... 0x....      BL       BO_Scan
   \   00000006   0x2801             CMP      R0,#+1
     30            {
     31               case 1:
     32              
     33              
     34            }
     35          }
   \                     ??Boma_Gear_ZS_0: (+1)
   \   00000008   0xBD01             POP      {R0,PC}          ;; return

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       8   BO_Scan
         8   -> GpioGet
       8   Boma_Gear_ZS
         8   -> BO_Scan


   Section sizes:

   Bytes  Function/Label
   -----  --------------
      74  BO_Scan
      10  Boma_Gear_ZS

 
 84 bytes in section .text
 
 84 bytes of CODE memory

Errors: none
Warnings: 1
