###############################################################################
#
# IAR ANSI C/C++ Compiler V7.30.3.8024/W32 for ARM        17/Jul/2018  09:40:42
# Copyright 1999-2014 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  H:\智能车程序2018\电磁三轮――ZS\7.17\user\C\main.c
#    Command line =  
#        H:\智能车程序2018\电磁三轮――ZS\7.17\user\C\main.c -D IAR -D
#        TWR_K60N512 -D _DLIB_FILE_DESCRIPTOR -lCN
#        H:\智能车程序2018\电磁三轮――ZS\7.17\iar\KEA_128_RAM\List\ -lB
#        H:\智能车程序2018\电磁三轮――ZS\7.17\iar\KEA_128_RAM\List\ -o
#        H:\智能车程序2018\电磁三轮――ZS\7.17\iar\KEA_128_RAM\Obj\ --no_cse
#        --no_unroll --no_inline --no_code_motion --no_tbaa --no_clustering
#        --no_scheduling --debug --endian=little --cpu=Cortex-M0+ -e --fpu=None
#        --dlib_config H:\IAR7.3\arm\INC\c\DLib_Config_Normal.h -I
#        H:\智能车程序2018\电磁三轮――ZS\7.17\iar\..\device\H\ -I
#        H:\智能车程序2018\电磁三轮――ZS\7.17\iar\..\user\H\ -I
#        H:\智能车程序2018\电磁三轮――ZS\7.17\iar\..\system\ -I
#        H:\智能车程序2018\电磁三轮――ZS\7.17\iar\..\lib\H\ -I
#        H:\智能车程序2018\电磁三轮――ZS\7.17\iar\..\system\coreSupport\ -Ol
#    List file    =  
#        H:\智能车程序2018\电磁三轮――ZS\7.17\iar\KEA_128_RAM\List\main.lst
#    Object file  =  
#        H:\智能车程序2018\电磁三轮――ZS\7.17\iar\KEA_128_RAM\Obj\main.o
#
###############################################################################

H:\智能车程序2018\电磁三轮――ZS\7.17\user\C\main.c
      1          /*
      2          
      3          很多事情都不值得你动容。不要觉得会有人相信你。
      4          只有自己靠的住，不要轻易相信他人。
      5          
      6          解决再次进环岛，设定差值
      7          解决提前进弯后反转
      8          模糊PID
      9          
     10          */
     11          #include "allHead.h"
     12          #include "lcd.h"
     13          #include "flash.h"
     14          #include "BL.h"
     15          
     16          extern uint8  KEY_sta ;//按键状态，1-按下
     17          extern char position; 
     18          
     19          

   \                                 In section .data, align 4
     20          uint32 ijk = 123, kez;
   \                     ijk:
   \   00000000   0x0000007B         DC32 123

   \                                 In section .bss, align 4
   \                     kez:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
     21          float spee[3000]={0};
   \                     spee:
   \   00000000                      DS8 12000

   \                                 In section .bss, align 4
     22          float zhan[3000]={0};
   \                     zhan:
   \   00000000                      DS8 12000

   \                                 In section .bss, align 4
     23          int flash_time=0;
   \                     flash_time:
   \   00000000                      DS8 4

   \                                 In section .bss, align 2
     24          uint16 PIT_times = 0;           //定时次数
   \                     PIT_times:
   \   00000000                      DS8 2

   \                                 In section .bss, align 1
     25          uint8 KEY_textSelect = TEXT_DEFAULT;  //测试菜单 使用
   \                     KEY_textSelect:
   \   00000000                      DS8 1

   \                                 In section .bss, align 1
     26          uint8 carStatus = 0;     //速度方案使用
   \                     carStatus:
   \   00000000                      DS8 1

   \                                 In section .data, align 1
     27          uint8 menuSelect = MENU;//菜单选择
   \                     menuSelect:
   \   00000000   0x01               DC8 1

   \                                 In section .bss, align 4
     28          int z=0,zz=0,man=0;
   \                     z:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
   \                     zz:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
   \                     man:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
     29            int x=0;
   \                     x:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
     30            int zs_car=0;
   \                     zs_car:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
     31          int   speed_control_counter = 0,direction_control_counter=0;
   \                     speed_control_counter:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
   \                     direction_control_counter:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
     32          int  iic_error=0,iic_error_counter=0;
   \                     iic_error:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
   \                     iic_error_counter:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
     33          int  Chazhi_Class=0;
   \                     Chazhi_Class:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
     34          int ms=0,s=0;
   \                     ms:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
   \                     s:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
     35          int Boma_num=0;
   \                     Boma_num:
   \   00000000                      DS8 4
     36          /*****************************************************************************************/
     37          // ----------------------------------- MAIN -------------------------------------------- //
     38          /*****************************************************************************************/

   \                                 In section .text, align 2, keep-with-next
     39          void main()
     40          {
   \                     main: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
     41              get_clk();  //因为作用域的原因，必须加载main里面，不能加在时钟里
   \   00000002   0x.... 0x....      BL       get_clk
     42              DISABLE_INTERRUPTS;  //关总中断
   \   00000006   0xB672             CPSID    I
     43          
     44              ADC_Init();//一定要放在最前面，里面开了ADC时钟
   \   00000008   0x.... 0x....      BL       ADC_Init
     45              UART_Init(UART_PART, UART_BAUD);
   \   0000000C   0x21E1             MOVS     R1,#+225
   \   0000000E   0x0249             LSLS     R1,R1,#+9        ;; #+115200
   \   00000010   0x2002             MOVS     R0,#+2
   \   00000012   0x.... 0x....      BL       UART_Init
     46              L3G4200_Init();//顺序随便
   \   00000016   0x.... 0x....      BL       L3G4200_Init
     47              FTM_PwmInit(PWM_CH0, ch0, 10, 0); //PWM 初始化
   \   0000001A   0x2300             MOVS     R3,#+0
   \   0000001C   0x220A             MOVS     R2,#+10
   \   0000001E   0x2100             MOVS     R1,#+0
   \   00000020   0x2002             MOVS     R0,#+2
   \   00000022   0x.... 0x....      BL       FTM_PwmInit
     48              FTM_PwmInit(PWM_CH1, ch1, 10, 0); //PWM 初始化
   \   00000026   0x2300             MOVS     R3,#+0
   \   00000028   0x220A             MOVS     R2,#+10
   \   0000002A   0x2101             MOVS     R1,#+1
   \   0000002C   0x2002             MOVS     R0,#+2
   \   0000002E   0x.... 0x....      BL       FTM_PwmInit
     49              FTM_SpeedInit(FTM_SPEED_L);       //测速 初始化
   \   00000032   0x2000             MOVS     R0,#+0
   \   00000034   0x.... 0x....      BL       FTM_SpeedInit
     50              FTM_SpeedInit(FTM_SPEED_R);       //测速 初始化
   \   00000038   0x2001             MOVS     R0,#+1
   \   0000003A   0x.... 0x....      BL       FTM_SpeedInit
     51              //放在后面
     52              OLED_Init();
   \   0000003E   0x.... 0x....      BL       OLED_Init
     53          //    LCD_Init();
     54          //      LCD_Name_ZS();  
     55          //        Flash_Init(0);
     56              KEY_Init();
   \   00000042   0x.... 0x....      BL       KEY_Init
     57              IoInit();
   \   00000046   0x.... 0x....      BL       IoInit
     58              PIT_Init(PIT0, 1000);             //PIT0 定时 5ms
   \   0000004A   0x21FA             MOVS     R1,#+250
   \   0000004C   0x0089             LSLS     R1,R1,#+2        ;; #+1000
   \   0000004E   0x2000             MOVS     R0,#+0
   \   00000050   0x.... 0x....      BL       PIT_Init
     59            //开定时中断之前要完成的
     60             OLED_Biaoge_ZS();    
   \   00000054   0x.... 0x....      BL       OLED_Biaoge_ZS
     61          //OLED_MenuFlicker();//速度控制改参数显示菜单  
     62              PIT_EnableIrq();                  //开PIT0 中断
   \   00000058   0x.... 0x....      BL       PIT_EnableIrq
     63              ENABLE_INTERRUPTS;   //开总中断   
   \   0000005C   0xB662             CPSIE    I
     64          // flash_time++;
     65          // spee[flash_time]=speed_R;
     66          //  zhan[flash_time]=Motor_Out_R_Temp;
     67          //        Direction_P = FLASH_READ(0,float);   
     68              while (1)
   \                     ??main_0: (+1)
   \   0000005E   0xE7FE             B        ??main_0
     69              {
     70          //      KEY_TestMenu();//测试电机       
     71          //      KEY();//zs按键阿克曼角差速      
     72          //        OLED_Key_ZS();
     73          //      LCD_Key_ZS();           
     74          //       KEY_ParaMenu();//按键改变数据1
     75                 //void OLED_Menu();//oled显示数据名称3
     76                 //void OLED_MenuFlicker();//oled菜单闪烁4
     77                 //KEY_ParaMenuDisplay();//oled显示实时数据2        
     78                //ReadDataControl();  
     79                //PlanSet();
     80                //ReadDataControl();//串口控制   
     81              }
     82          }
     83          /********PIT0 中断:自定义函数名在中断向量表中进行了替换*****************************************/

   \                                 In section .text, align 2, keep-with-next
     84          void PIT_CH0_IRQHandler(void)
     85          {
   \                     PIT_CH0_IRQHandler: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
     86          //LED_0_OFF;//1.212MS正常跑//        LED_1_OFF;
     87          //        LED_2_OFF;
     88          //        LED_3_OFF;
     89            PIT_CLEAR;    
   \   00000002   0x....             LDR      R0,??DataTable0  ;; 0x4003710c
   \   00000004   0x6800             LDR      R0,[R0, #+0]
   \   00000006   0x2101             MOVS     R1,#+1
   \   00000008   0x4301             ORRS     R1,R1,R0
   \   0000000A   0x....             LDR      R0,??DataTable0  ;; 0x4003710c
   \   0000000C   0x6001             STR      R1,[R0, #+0]
     90          
     91            if ((++PIT_times) >= 500)//每 500ms LED0翻转一次
   \   0000000E   0x....             LDR      R0,??DataTable0_1
   \   00000010   0x8800             LDRH     R0,[R0, #+0]
   \   00000012   0x1C40             ADDS     R0,R0,#+1
   \   00000014   0x....             LDR      R1,??DataTable0_1
   \   00000016   0x8008             STRH     R0,[R1, #+0]
   \   00000018   0x....             LDR      R0,??DataTable0_1
   \   0000001A   0x8800             LDRH     R0,[R0, #+0]
   \   0000001C   0x21FA             MOVS     R1,#+250
   \   0000001E   0x0049             LSLS     R1,R1,#+1        ;; #+500
   \   00000020   0x4288             CMP      R0,R1
   \   00000022   0xDB05             BLT      ??PIT_CH0_IRQHandler_0
     92            {
     93                PIT_times = 0;
   \   00000024   0x2000             MOVS     R0,#+0
   \   00000026   0x....             LDR      R1,??DataTable0_1
   \   00000028   0x8008             STRH     R0,[R1, #+0]
     94                LED_0_TURN;
   \   0000002A   0x2030             MOVS     R0,#+48
   \   0000002C   0x.... 0x....      BL       GpioTurn
     95            }  
     96           
     97            Inductor_analyse();//方向判断 
   \                     ??PIT_CH0_IRQHandler_0: (+1)
   \   00000030   0x.... 0x....      BL       Inductor_analyse
     98                 Test_Huandao();    
   \   00000034   0x.... 0x....      BL       Test_Huandao
     99          
    100            if(zs_car==1)
   \   00000038   0x....             LDR      R0,??DataTable0_2
   \   0000003A   0x6800             LDR      R0,[R0, #+0]
   \   0000003C   0x2801             CMP      R0,#+1
   \   0000003E   0xD14F             BNE      ??PIT_CH0_IRQHandler_1
    101          { 
    102          //   Test_Huandao(); 
    103             
    104             Hall();
   \   00000040   0x.... 0x....      BL       Hall
    105             
    106             Gyro_ZS(); 
   \   00000044   0x.... 0x....      BL       Gyro_ZS
    107             
    108            if(Stop_Flag==1)
   \   00000048   0x....             LDR      R0,??DataTable0_3
   \   0000004A   0x6800             LDR      R0,[R0, #+0]
   \   0000004C   0x21FE             MOVS     R1,#+254
   \   0000004E   0x0589             LSLS     R1,R1,#+22       ;; #+1065353216
   \   00000050   0x.... 0x....      BL       __aeabi_cfcmpeq
   \   00000054   0xD110             BNE      ??PIT_CH0_IRQHandler_2
    109            {
    110              speed_set=0;
   \   00000056   0x2000             MOVS     R0,#+0
   \   00000058   0x....             LDR      R1,??DataTable0_4
   \   0000005A   0x6008             STR      R0,[R1, #+0]
    111                OLED_Int16(75, 5, ms);
   \   0000005C   0x....             LDR      R0,??DataTable0_5
   \   0000005E   0x6802             LDR      R2,[R0, #+0]
   \   00000060   0xB212             SXTH     R2,R2
   \   00000062   0x2105             MOVS     R1,#+5
   \   00000064   0x204B             MOVS     R0,#+75
   \   00000066   0x.... 0x....      BL       OLED_Int16
    112            OLED_Int16(75, 6, s);
   \   0000006A   0x....             LDR      R0,??DataTable0_6
   \   0000006C   0x6802             LDR      R2,[R0, #+0]
   \   0000006E   0xB212             SXTH     R2,R2
   \   00000070   0x2106             MOVS     R1,#+6
   \   00000072   0x204B             MOVS     R0,#+75
   \   00000074   0x.... 0x....      BL       OLED_Int16
    113            }
    114           //棒棒10ms  阿克曼角5ms    
    115            z++;
   \                     ??PIT_CH0_IRQHandler_2: (+1)
   \   00000078   0x....             LDR      R0,??DataTable0_7
   \   0000007A   0x6800             LDR      R0,[R0, #+0]
   \   0000007C   0x1C40             ADDS     R0,R0,#+1
   \   0000007E   0x....             LDR      R1,??DataTable0_7
   \   00000080   0x6008             STR      R0,[R1, #+0]
    116            if(z>4)//5ms,4
   \   00000082   0x....             LDR      R0,??DataTable0_7
   \   00000084   0x6800             LDR      R0,[R0, #+0]
   \   00000086   0x2805             CMP      R0,#+5
   \   00000088   0xDB06             BLT      ??PIT_CH0_IRQHandler_3
    117           {
    118               z=0;
   \   0000008A   0x2000             MOVS     R0,#+0
   \   0000008C   0x....             LDR      R1,??DataTable0_7
   \   0000008E   0x6008             STR      R0,[R1, #+0]
    119               Get_CarSpeed();//获取车速  
   \   00000090   0x.... 0x....      BL       Get_CarSpeed
    120             
    121          //     zz++;
    122          //     if(zz>1)
    123          //     {
    124          //       zz=0;
    125                BangBang();   
   \   00000094   0x.... 0x....      BL       BangBang
    126          //     }
    127          
    128           }
    129          
    130             Test_RoadInfo();
   \                     ??PIT_CH0_IRQHandler_3: (+1)
   \   00000098   0x.... 0x....      BL       Test_RoadInfo
    131               Direction_ChaSpeed_Control();
   \   0000009C   0x.... 0x....      BL       Direction_ChaSpeed_Control
    132               Controler();
   \   000000A0   0x.... 0x....      BL       Controler
    133               
    134             
    135            Direction_Controler();
   \   000000A4   0x.... 0x....      BL       Direction_Controler
    136          
    137            Motor_control();//电机控制输出PWM 
   \   000000A8   0x.... 0x....      BL       Motor_control
    138            if(Stop_Flag==0)
   \   000000AC   0x....             LDR      R0,??DataTable0_3
   \   000000AE   0x6800             LDR      R0,[R0, #+0]
   \   000000B0   0x2100             MOVS     R1,#+0
   \   000000B2   0x.... 0x....      BL       __aeabi_cfcmpeq
   \   000000B6   0xD11F             BNE      ??PIT_CH0_IRQHandler_4
    139            {
    140            ms++; 
   \   000000B8   0x....             LDR      R0,??DataTable0_5
   \   000000BA   0x6800             LDR      R0,[R0, #+0]
   \   000000BC   0x1C40             ADDS     R0,R0,#+1
   \   000000BE   0x....             LDR      R1,??DataTable0_5
   \   000000C0   0x6008             STR      R0,[R1, #+0]
    141                if(ms>999)
   \   000000C2   0x....             LDR      R0,??DataTable0_5
   \   000000C4   0x6800             LDR      R0,[R0, #+0]
   \   000000C6   0x21FA             MOVS     R1,#+250
   \   000000C8   0x0089             LSLS     R1,R1,#+2        ;; #+1000
   \   000000CA   0x4288             CMP      R0,R1
   \   000000CC   0xDB14             BLT      ??PIT_CH0_IRQHandler_4
    142                {
    143                  ms=0;
   \   000000CE   0x2000             MOVS     R0,#+0
   \   000000D0   0x....             LDR      R1,??DataTable0_5
   \   000000D2   0x6008             STR      R0,[R1, #+0]
    144                  s++;
   \   000000D4   0x....             LDR      R0,??DataTable0_6
   \   000000D6   0x6800             LDR      R0,[R0, #+0]
   \   000000D8   0x1C40             ADDS     R0,R0,#+1
   \   000000DA   0x....             LDR      R1,??DataTable0_6
   \   000000DC   0x6008             STR      R0,[R1, #+0]
   \   000000DE   0xE00B             B        ??PIT_CH0_IRQHandler_4
    145                }
    146            }
    147                
    148          //              AD_hall = ADC_Once(Hall,adc12bit);  //中2 通道
    149            
    150          //       OLED_Int16(75, 5, AD_hall);
    151          //  OLED_Int16(75, 6, speed_set_R); 
    152          //  OLED_Int16(75, 5, speed_L);
    153          //  OLED_Int16(75, 6, speed_R);
    154          
    155          //  OLED_DisplayFloat(110,7,gyr_angle_speed, 3); 
    156          
    157          //  OLED_DisplayFloat(75,5,speed_car, 1); 
    158          //  OLED_DisplayFloat(75,5,Chazhi_Rate, 1); 
    159          //  OLED_DisplayFloat(75,5,speed_L, 1); 
    160          //  OLED_DisplayFloat(75,6,speed_R, 1); 
    161          }
    162          else
    163          {
    164            OLED_Inductor_Dynamic();//线跳动，数据变化大
   \                     ??PIT_CH0_IRQHandler_1: (+1)
   \   000000E0   0x.... 0x....      BL       OLED_Inductor_Dynamic
    165            change_L(0);
   \   000000E4   0x2200             MOVS     R2,#+0
   \   000000E6   0x2101             MOVS     R1,#+1
   \   000000E8   0x2002             MOVS     R0,#+2
   \   000000EA   0x.... 0x....      BL       FTM_PwmDuty
    166            change_R(0);
   \   000000EE   0x2200             MOVS     R2,#+0
   \   000000F0   0x2100             MOVS     R1,#+0
   \   000000F2   0x2002             MOVS     R0,#+2
   \   000000F4   0x.... 0x....      BL       FTM_PwmDuty
    167           }
    168           Boma_num=BO_Scan();
   \                     ??PIT_CH0_IRQHandler_4: (+1)
   \   000000F8   0x.... 0x....      BL       BO_Scan
   \   000000FC   0x....             LDR      R1,??DataTable0_8
   \   000000FE   0x6008             STR      R0,[R1, #+0]
    169             OLED_Int16(75, 7, Boma_num);
   \   00000100   0x....             LDR      R0,??DataTable0_8
   \   00000102   0x6802             LDR      R2,[R0, #+0]
   \   00000104   0xB212             SXTH     R2,R2
   \   00000106   0x2107             MOVS     R1,#+7
   \   00000108   0x204B             MOVS     R0,#+75
   \   0000010A   0x.... 0x....      BL       OLED_Int16
    170          
    171           
    172           OLED_Key_ZS();
   \   0000010E   0x.... 0x....      BL       OLED_Key_ZS
    173          //刷OLED  OLED_Int16(75, 6, s);
    174          //使用了硬件spi速率已经缩小到了us级别
    175              if (KEY_sta)
   \   00000112   0x....             LDR      R0,??DataTable0_9
   \   00000114   0x7800             LDRB     R0,[R0, #+0]
   \   00000116   0x2800             CMP      R0,#+0
   \   00000118   0xD01D             BEQ      ??PIT_CH0_IRQHandler_5
    176              {
    177                  if (KEY_menuChange)//菜单选择和数据显示 更新分两次进行 减小数据量
   \   0000011A   0x....             LDR      R0,??DataTable0_10
   \   0000011C   0x7800             LDRB     R0,[R0, #+0]
   \   0000011E   0x2800             CMP      R0,#+0
   \   00000120   0xD00C             BEQ      ??PIT_CH0_IRQHandler_6
    178                  {
    179                      OLED_Select_ZS();
   \   00000122   0x.... 0x....      BL       OLED_Select_ZS
    180                      KEY_menuChange = !KEY_menuChange;
   \   00000126   0x....             LDR      R0,??DataTable0_10
   \   00000128   0x7800             LDRB     R0,[R0, #+0]
   \   0000012A   0x2800             CMP      R0,#+0
   \   0000012C   0xD103             BNE      ??PIT_CH0_IRQHandler_7
   \   0000012E   0x2001             MOVS     R0,#+1
   \   00000130   0x....             LDR      R1,??DataTable0_10
   \   00000132   0x7008             STRB     R0,[R1, #+0]
   \   00000134   0xE002             B        ??PIT_CH0_IRQHandler_6
   \                     ??PIT_CH0_IRQHandler_7: (+1)
   \   00000136   0x2000             MOVS     R0,#+0
   \   00000138   0x....             LDR      R1,??DataTable0_10
   \   0000013A   0x7008             STRB     R0,[R1, #+0]
    181                  }
    182                  Oled_Data_ZS();//大概需要1ms左右,但由于第二次按键不操作，所以时间差可以忽略
   \                     ??PIT_CH0_IRQHandler_6: (+1)
   \   0000013C   0x.... 0x....      BL       Oled_Data_ZS
    183                  KEY_sta = !KEY_sta;             
   \   00000140   0x....             LDR      R0,??DataTable0_9
   \   00000142   0x7800             LDRB     R0,[R0, #+0]
   \   00000144   0x2800             CMP      R0,#+0
   \   00000146   0xD103             BNE      ??PIT_CH0_IRQHandler_8
   \   00000148   0x2001             MOVS     R0,#+1
   \   0000014A   0x....             LDR      R1,??DataTable0_9
   \   0000014C   0x7008             STRB     R0,[R1, #+0]
   \   0000014E   0xE002             B        ??PIT_CH0_IRQHandler_5
   \                     ??PIT_CH0_IRQHandler_8: (+1)
   \   00000150   0x2000             MOVS     R0,#+0
   \   00000152   0x....             LDR      R1,??DataTable0_9
   \   00000154   0x7008             STRB     R0,[R1, #+0]
    184              }
    185               
    186          //FTM_motorDuty=3000;
    187          //   change_L(FTM_motorDuty);
    188          //   change_R(FTM_motorDuty);
    189          //   forward_L;
    190          //   forward_R;
    191          //   reversal_L;
    192          //     reversal_R;
    193          //        LED_0_ON;
    194          ////        LED_1_ON;
    195          //        LED_2_ON;
    196          //        LED_3_ON;
    197          }
   \                     ??PIT_CH0_IRQHandler_5: (+1)
   \   00000156   0xBD01             POP      {R0,PC}          ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable0:
   \   00000000   0x4003710C         DC32     0x4003710c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable0_1:
   \   00000000   0x........         DC32     PIT_times

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable0_2:
   \   00000000   0x........         DC32     zs_car

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable0_3:
   \   00000000   0x........         DC32     Stop_Flag

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable0_4:
   \   00000000   0x........         DC32     speed_set

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable0_5:
   \   00000000   0x........         DC32     ms

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable0_6:
   \   00000000   0x........         DC32     s

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable0_7:
   \   00000000   0x........         DC32     z

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable0_8:
   \   00000000   0x........         DC32     Boma_num

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable0_9:
   \   00000000   0x........         DC32     KEY_sta

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable0_10:
   \   00000000   0x........         DC32     KEY_menuChange
    198          
    199          
    200          
    201          
    202          
    203          
    204          //  if(Chazhi>20)  Chazhi+=20;
    205          //  if(Chazhi<-20)  Chazhi-=20;
    206          //  Chazhi=1.5*Chazhi;
    207          //    if(Chazhi>0) 
    208          //    {
    209          //       if(Chazhi<AD_inductor[4]&&AD_inductor[3]<10)
    210          //         Chazhi=(Chazhi+AD_inductor[4])/2;
    211          //    }
    212          //   if(Chazhi<0) 
    213          //    {
    214          //       if(-1*Chazhi<AD_inductor[3]&&AD_inductor[4]<10)
    215          //         Chazhi=(Chazhi-AD_inductor[3])/2;
    216          //    }
    217          
    218          
    219          
    220          
    221          
    222          
    223          //if(x++>20)
    224          //{
    225          //  x=0;
    226          //// LCD_Inductor_Dynamic();//一个0.9ms
    227          ////void LCD_Speed_Dynamic(void);
    228          ////OLED_Inductor_Dynamic();//线跳动，数据变化大
    229          ////OLED_Speed_Dynamic();////一个OLED显示0.158ms
    230          ////UART_Send();//线跳动，数据变化小//1个串口发送1.068ms
    231          ////OLED_DisplayFloat(35, 0, iic_error_counter, 2);//OLED显示 float  
    232          
    233          ////  UART_SendFloat(gyr_angle_speed,1);  
    234          //}  
    235           
    236          
    237          //LCD
    238          //    if (KEY_sta)
    239          //    {
    240          //        if (KEY_menuChange)//菜单选择和数据显示 更新分两次进行 减小数据量
    241          //        {
    242          //       LCD_Data_ZS();  
    243          //          KEY_menuChange = !KEY_menuChange;
    244          //        }
    245          //              LCD_Data_ZS();
    246          //
    247          //        KEY_sta = !KEY_sta;             
    248          //    }
    249          

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       8   PIT_CH0_IRQHandler
         8   -> BO_Scan
         8   -> BangBang
         8   -> Controler
         8   -> Direction_ChaSpeed_Control
         8   -> Direction_Controler
         8   -> FTM_PwmDuty
         8   -> Get_CarSpeed
         8   -> GpioTurn
         8   -> Gyro_ZS
         8   -> Hall
         8   -> Inductor_analyse
         8   -> Motor_control
         8   -> OLED_Inductor_Dynamic
         8   -> OLED_Int16
         8   -> OLED_Key_ZS
         8   -> OLED_Select_ZS
         8   -> Oled_Data_ZS
         8   -> Test_Huandao
         8   -> Test_RoadInfo
         8 __aeabi_cfcmpeq
       8   main
         8   -> ADC_Init
         8   -> FTM_PwmInit
         8   -> FTM_SpeedInit
         8   -> IoInit
         8   -> KEY_Init
         8   -> L3G4200_Init
         8   -> OLED_Biaoge_ZS
         8   -> OLED_Init
         8   -> PIT_EnableIrq
         8   -> PIT_Init
         8   -> UART_Init
         8   -> get_clk


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable0
       4  ??DataTable0_1
       4  ??DataTable0_10
       4  ??DataTable0_2
       4  ??DataTable0_3
       4  ??DataTable0_4
       4  ??DataTable0_5
       4  ??DataTable0_6
       4  ??DataTable0_7
       4  ??DataTable0_8
       4  ??DataTable0_9
       4  Boma_num
       4  Chazhi_Class
       1  KEY_textSelect
     344  PIT_CH0_IRQHandler
       2  PIT_times
       1  carStatus
       4  direction_control_counter
       4  flash_time
       4  iic_error
       4  iic_error_counter
       4  ijk
       4  kez
      96  main
       4  man
       1  menuSelect
       4  ms
       4  s
   12000  spee
       4  speed_control_counter
       4  x
       4  z
   12000  zhan
       4  zs_car
       4  zz

 
 24 064 bytes in section .bss
      5 bytes in section .data
    484 bytes in section .text
 
    484 bytes of CODE memory
 24 069 bytes of DATA memory

Errors: none
Warnings: none
