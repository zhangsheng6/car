###############################################################################
#
# IAR ANSI C/C++ Compiler V7.30.3.8024/W32 for ARM        17/Jul/2018  09:40:40
# Copyright 1999-2014 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  H:\智能车程序2018\电磁三轮――ZS\7.17\device\C\L3G4200.c
#    Command line =  
#        H:\智能车程序2018\电磁三轮――ZS\7.17\device\C\L3G4200.c -D IAR -D
#        TWR_K60N512 -D _DLIB_FILE_DESCRIPTOR -lCN
#        H:\智能车程序2018\电磁三轮――ZS\7.17\iar\KEA_128_RAM\List\ -lB
#        H:\智能车程序2018\电磁三轮――ZS\7.17\iar\KEA_128_RAM\List\ -o
#        H:\智能车程序2018\电磁三轮――ZS\7.17\iar\KEA_128_RAM\Obj\ --no_cse
#        --no_unroll --no_inline --no_code_motion --no_tbaa --no_clustering
#        --no_scheduling --debug --endian=little --cpu=Cortex-M0+ -e --fpu=None
#        --dlib_config H:\IAR7.3\arm\INC\c\DLib_Config_Normal.h -I
#        H:\智能车程序2018\电磁三轮――ZS\7.17\iar\..\device\H\ -I
#        H:\智能车程序2018\电磁三轮――ZS\7.17\iar\..\user\H\ -I
#        H:\智能车程序2018\电磁三轮――ZS\7.17\iar\..\system\ -I
#        H:\智能车程序2018\电磁三轮――ZS\7.17\iar\..\lib\H\ -I
#        H:\智能车程序2018\电磁三轮――ZS\7.17\iar\..\system\coreSupport\ -Ol
#    List file    =  
#        H:\智能车程序2018\电磁三轮――ZS\7.17\iar\KEA_128_RAM\List\L3G4200.lst
#    Object file  =  
#        H:\智能车程序2018\电磁三轮――ZS\7.17\iar\KEA_128_RAM\Obj\L3G4200.o
#
###############################################################################

H:\智能车程序2018\电磁三轮――ZS\7.17\device\C\L3G4200.c
      1          /**
      2            ******************************************************************************
      3            * COPYRIGHT NOTICE
      4            * Copyright (c) 2018,华北科技学院
      5            * All rights reserved.
      6            *
      7            * 文件名称：     L3G4200.c
      8            * 文件标识：
      9            * 摘    要：     陀螺仪初始化
     10            *               陀螺仪寄存器读取相关
     11            *
     12            * 当前版本：     1.0
     13            * 负    责：     韩志伟
     14            * 时    间：     2018年1月4日 19:16:43
     15            ******************************************************************************
     16            */
     17          
     18          #include "L3G4200.h"
     19          
     20          
     21          

   \                                 In section .data, align 4
     22          SPI_Type* SPI[2] = SPI_BASES; //定义两个指针数组保存 SPIx 的地址
   \                     SPI:
   \   00000000   0x40076000         DC32 40076000H, 40077000H
   \              0x40077000   
     23          
     24          //相关参数
     25          

   \                                 In section .bss, align 1
     26            uint8 gx, gy,gz;//, gz;
   \                     gx:
   \   00000000                      DS8 1

   \                                 In section .bss, align 1
   \                     gy:
   \   00000000                      DS8 1

   \                                 In section .bss, align 1
   \                     gz:
   \   00000000                      DS8 1

   \                                 In section .bss, align 2
     27              uint16 wgx, wgy,wgz;//, wgz;
   \                     wgx:
   \   00000000                      DS8 2

   \                                 In section .bss, align 2
   \                     wgy:
   \   00000000                      DS8 2

   \                                 In section .bss, align 2
   \                     wgz:
   \   00000000                      DS8 2
     28          

   \                                 In section .bss, align 1
     29          uint8 gyro_ID = 0;
   \                     gyro_ID:
   \   00000000                      DS8 1

   \                                 In section .bss, align 2
     30          int16 gyro_x = 0, gyro_y = 0, gyro_z = 0;//存储最后三轴数据
   \                     gyro_x:
   \   00000000                      DS8 2

   \                                 In section .bss, align 2
   \                     gyro_y:
   \   00000000                      DS8 2

   \                                 In section .bss, align 2
   \                     gyro_z:
   \   00000000                      DS8 2
     31          

   \                                 In section .bss, align 1
     32          uint8 a, b;
   \                     a:
   \   00000000                      DS8 1

   \                                 In section .bss, align 1
   \                     `b`:
   \   00000000                      DS8 1
     33          
     34          
     35          

   \                                 In section .text, align 2, keep-with-next
     36          void SPI_delay(void)
     37          {
   \                     SPI_delay: (+1)
   \   00000000   0xB500             PUSH     {LR}
     38          	uint16 j=120;
   \   00000002   0x2078             MOVS     R0,#+120
     39          	while(j--);
   \                     ??SPI_delay_0: (+1)
   \   00000004   0x0001             MOVS     R1,R0
   \   00000006   0x1E48             SUBS     R0,R1,#+1
   \   00000008   0xB289             UXTH     R1,R1
   \   0000000A   0x2900             CMP      R1,#+0
   \   0000000C   0xD1FA             BNE      ??SPI_delay_0
     40          }
   \   0000000E   0xBD00             POP      {PC}             ;; return
     41          
     42          /**
     43            * 简介
     44            *     写命令
     45            */

   \                                 In section .text, align 2, keep-with-next
     46          void L3G4200_WrCmd(unsigned char cmd)
     47          {
   \                     L3G4200_WrCmd: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0004             MOVS     R4,R0
     48            uint8 i=8;
   \   00000004   0x2508             MOVS     R5,#+8
     49            CL_L3G4200_CS;
   \   00000006   0x2100             MOVS     R1,#+0
   \   00000008   0x2037             MOVS     R0,#+55
   \   0000000A   0x.... 0x....      BL       GpioSet
     50            SPI_delay();
   \   0000000E   0x.... 0x....      BL       SPI_delay
   \   00000012   0xE00A             B        ??L3G4200_WrCmd_0
     51          //  CL_L3G4200_MI;
     52            while(i--)
     53            {
     54              CL_L3G4200_CLK;
     55              if(cmd&0x80)
     56              {
     57                  L3G4200_MO;
     58              }
     59              else
     60              {
     61                CL_L3G4200_MO;
   \                     ??L3G4200_WrCmd_1: (+1)
   \   00000014   0x2100             MOVS     R1,#+0
   \   00000016   0x2035             MOVS     R0,#+53
   \   00000018   0x.... 0x....      BL       GpioSet
     62              }
     63              cmd<<=1;
   \                     ??L3G4200_WrCmd_2: (+1)
   \   0000001C   0x0064             LSLS     R4,R4,#+1
     64            SPI_delay();
   \   0000001E   0x.... 0x....      BL       SPI_delay
     65              L3G4200_CLK;
   \   00000022   0x2101             MOVS     R1,#+1
   \   00000024   0x2034             MOVS     R0,#+52
   \   00000026   0x.... 0x....      BL       GpioSet
   \                     ??L3G4200_WrCmd_0: (+1)
   \   0000002A   0x0028             MOVS     R0,R5
   \   0000002C   0x1E45             SUBS     R5,R0,#+1
   \   0000002E   0xB2C0             UXTB     R0,R0
   \   00000030   0x2800             CMP      R0,#+0
   \   00000032   0xD00A             BEQ      ??L3G4200_WrCmd_3
   \   00000034   0x2100             MOVS     R1,#+0
   \   00000036   0x2034             MOVS     R0,#+52
   \   00000038   0x.... 0x....      BL       GpioSet
   \   0000003C   0x0620             LSLS     R0,R4,#+24
   \   0000003E   0xD5E9             BPL      ??L3G4200_WrCmd_1
   \   00000040   0x2101             MOVS     R1,#+1
   \   00000042   0x2017             MOVS     R0,#+23
   \   00000044   0x.... 0x....      BL       GpioSet
   \   00000048   0xE7E8             B        ??L3G4200_WrCmd_2
     66            }
     67          
     68          //  L3G4200_MI;
     69            L3G4200_CS;
   \                     ??L3G4200_WrCmd_3: (+1)
   \   0000004A   0x2101             MOVS     R1,#+1
   \   0000004C   0x2037             MOVS     R0,#+55
   \   0000004E   0x.... 0x....      BL       GpioSet
     70          }
   \   00000052   0xBD31             POP      {R0,R4,R5,PC}    ;; return
     71          
     72          /**
     73            * 简介
     74            *     读数据
     75            */

   \                                 In section .text, align 2, keep-with-next
     76          uint8 L3G4200_ReData()
     77          {
   \                     L3G4200_ReData: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
     78            uint8 i=8;
   \   00000002   0x2508             MOVS     R5,#+8
     79            uint8 byte = 0;
   \   00000004   0x2400             MOVS     R4,#+0
     80          
     81            CL_L3G4200_CS;
   \   00000006   0x2100             MOVS     R1,#+0
   \   00000008   0x2037             MOVS     R0,#+55
   \   0000000A   0x.... 0x....      BL       GpioSet
     82            SPI_delay();
   \   0000000E   0x.... 0x....      BL       SPI_delay
   \   00000012   0xE010             B        ??L3G4200_ReData_0
     83            while(i--)
     84            {
     85              L3G4200_CLK;
   \                     ??L3G4200_ReData_1: (+1)
   \   00000014   0x2101             MOVS     R1,#+1
   \   00000016   0x2034             MOVS     R0,#+52
   \   00000018   0x.... 0x....      BL       GpioSet
     86              SPI_delay();
   \   0000001C   0x.... 0x....      BL       SPI_delay
     87              CL_L3G4200_CLK;
   \   00000020   0x2100             MOVS     R1,#+0
   \   00000022   0x2034             MOVS     R0,#+52
   \   00000024   0x.... 0x....      BL       GpioSet
     88          
     89              if (GpioGet(SPI1_MISO) == 1)
   \   00000028   0x2036             MOVS     R0,#+54
   \   0000002A   0x.... 0x....      BL       GpioGet
   \   0000002E   0x2801             CMP      R0,#+1
   \   00000030   0xD100             BNE      ??L3G4200_ReData_2
     90              {
     91                  byte += 1;
   \   00000032   0x1C64             ADDS     R4,R4,#+1
     92              }
     93          
     94              byte<<=1;
   \                     ??L3G4200_ReData_2: (+1)
   \   00000034   0x0064             LSLS     R4,R4,#+1
     95            }
   \                     ??L3G4200_ReData_0: (+1)
   \   00000036   0x0028             MOVS     R0,R5
   \   00000038   0x1E45             SUBS     R5,R0,#+1
   \   0000003A   0xB2C0             UXTB     R0,R0
   \   0000003C   0x2800             CMP      R0,#+0
   \   0000003E   0xD1E9             BNE      ??L3G4200_ReData_1
     96          
     97            L3G4200_CS;
   \   00000040   0x2101             MOVS     R1,#+1
   \   00000042   0x2037             MOVS     R0,#+55
   \   00000044   0x.... 0x....      BL       GpioSet
     98          
     99            return byte;
   \   00000048   0x0020             MOVS     R0,R4
   \   0000004A   0xB2C0             UXTB     R0,R0
   \   0000004C   0xBD32             POP      {R1,R4,R5,PC}    ;; return
    100          }
    101          
    102          /**
    103            * 简介
    104            *     读写
    105            */

   \                                 In section .text, align 2, keep-with-next
    106          uint8 SPI_ReadWrite(uint8 byte)
    107          {
   \                     SPI_ReadWrite: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
   \   00000002   0x0001             MOVS     R1,R0
    108              uint8 temp = 0;
   \   00000004   0x2000             MOVS     R0,#+0
    109          
    110              L3G4200_WrCmd(byte);
   \   00000006   0x0008             MOVS     R0,R1
   \   00000008   0xB2C0             UXTB     R0,R0
   \   0000000A   0x.... 0x....      BL       L3G4200_WrCmd
    111              temp = L3G4200_ReData();
   \   0000000E   0x.... 0x....      BL       L3G4200_ReData
    112          
    113          
    114          
    115          //    uint8 temp = 0;
    116          //
    117          //    while( !( SPI[1]->S & SPI_S_SPTEF_MASK ) );  //等待发送完成
    118          //    SPI[1]->D = byte;          //清除发送完成标志位
    119          //
    120          //    while( !( SPI[1]->S & SPI_S_SPRF_MASK ) );   //等待接收数据
    121          //    temp = (uint8)(SPI[1]->D);;           //读取数据，转换格式
    122          //
    123              return temp;
   \   00000012   0xB2C0             UXTB     R0,R0
   \   00000014   0xBD02             POP      {R1,PC}          ;; return
    124          }
    125          /**
    126            * 简介
    127            *     写陀螺仪寄存器
    128            * 参数
    129            *     reg：寄存器地址
    130            *     value：写入的数据
    131            */

   \                                 In section .text, align 2, keep-with-next
    132          void L3G4200_Write_Reg(uint8 reg, uint8 value)
    133          {
   \                     L3G4200_Write_Reg: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x000C             MOVS     R4,R1
    134              SPI_ReadWrite(reg);
   \   00000004   0xB2C0             UXTB     R0,R0
   \   00000006   0x.... 0x....      BL       SPI_ReadWrite
    135              SPI_ReadWrite(value);
   \   0000000A   0x0020             MOVS     R0,R4
   \   0000000C   0xB2C0             UXTB     R0,R0
   \   0000000E   0x.... 0x....      BL       SPI_ReadWrite
    136          
    137          
    138          //    SPI_ReadWrite(reg);     //高位在前，所以读 -> 最高位要写1
    139          //    SPI_ReadWrite(value);   //此时写入的是数据
    140          }
   \   00000012   0xBD10             POP      {R4,PC}          ;; return
    141          
    142          /**
    143            * 简介
    144            *     读取陀螺仪寄存器
    145            * 参数
    146            *     reg：寄存器地址
    147            *     value：保存地址
    148            * 注意
    149            *     一个读操作需16个脉冲
    150            *     前八位状态，后八位数据
    151            */

   \                                 In section .text, align 2, keep-with-next
    152          void L3G4200_Read_Reg(uint8 reg, uint8 *value)
    153          {
   \                     L3G4200_Read_Reg: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x000C             MOVS     R4,R1
    154              SPI_ReadWrite(0x80|reg);
   \   00000004   0x2180             MOVS     R1,#+128
   \   00000006   0x4301             ORRS     R1,R1,R0
   \   00000008   0x0008             MOVS     R0,R1
   \   0000000A   0xB2C0             UXTB     R0,R0
   \   0000000C   0x.... 0x....      BL       SPI_ReadWrite
    155              *value = SPI_ReadWrite(0xff);
   \   00000010   0x20FF             MOVS     R0,#+255
   \   00000012   0x.... 0x....      BL       SPI_ReadWrite
   \   00000016   0x7020             STRB     R0,[R4, #+0]
    156          
    157          //    SPI_ReadWrite(0x80|reg);        //高位在前，所以读 -> 最高位要写1
    158          //    *value = SPI_ReadWrite(0xff);   //此时写入的是数据
    159          }
   \   00000018   0xBD10             POP      {R4,PC}          ;; return
    160          
    161          
    162          /**
    163            * 简介
    164            *     陀螺仪初始化
    165            * 注意
    166            *     使能了2个轴
    167            */

   \                                 In section .text, align 2, keep-with-next
    168          void L3G4200_Init(void)
    169          {
   \                     L3G4200_Init: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    170              i2c_init(IIC_PORT, 400*1000);
   \   00000002   0x....             LDR      R1,??DataTable1  ;; 0x61a80
   \   00000004   0x2001             MOVS     R0,#+1
   \   00000006   0x.... 0x....      BL       i2c_init
    171          
    172              //数据输出速率800Hz，LPF截止频率110Hz，工作在正常模式，使能X Y 轴
    173          //    i2c_write_reg(IIC_PORT, L3G4200_DEV_ADD, CTRL_REG1_4200, 0xFF);
    174              i2c_write_reg(IIC_PORT, L3G4200_DEV_ADD, CTRL_REG1_4200, 0xFF);
   \   0000000A   0x23FF             MOVS     R3,#+255
   \   0000000C   0x2220             MOVS     R2,#+32
   \   0000000E   0x2169             MOVS     R1,#+105
   \   00000010   0x2001             MOVS     R0,#+1
   \   00000012   0x.... 0x....      BL       i2c_write_reg
    175          //    gyro_ID = i2c_read_reg(IIC_PORT, L3G4200_DEV_ADD, CTRL_REG1_4200);
    176          
    177              //高通滤波器配置
    178              i2c_write_reg(IIC_PORT, L3G4200_DEV_ADD, CTRL_REG2_4200, 0x00);
   \   00000016   0x2300             MOVS     R3,#+0
   \   00000018   0x2221             MOVS     R2,#+33
   \   0000001A   0x2169             MOVS     R1,#+105
   \   0000001C   0x2001             MOVS     R0,#+1
   \   0000001E   0x.... 0x....      BL       i2c_write_reg
    179          
    180              //关闭所有中断,配置IIC DRDY
    181              i2c_write_reg(IIC_PORT, L3G4200_DEV_ADD, CTRL_REG3_4200, 0x08);
   \   00000022   0x2308             MOVS     R3,#+8
   \   00000024   0x2222             MOVS     R2,#+34
   \   00000026   0x2169             MOVS     R1,#+105
   \   00000028   0x2001             MOVS     R0,#+1
   \   0000002A   0x.... 0x....      BL       i2c_write_reg
    182          //    gyro_ID = i2c_read_reg(IIC_PORT, L3G4200_DEV_ADD, CTRL_REG3_4200);
    183          
    184              //使能block data updata功能，确保正确读出数据、使能小端模式、选择满量程250dps
    185              i2c_write_reg(IIC_PORT, L3G4200_DEV_ADD, CTRL_REG4_4200, 0x80);
   \   0000002E   0x2380             MOVS     R3,#+128
   \   00000030   0x2223             MOVS     R2,#+35
   \   00000032   0x2169             MOVS     R1,#+105
   \   00000034   0x2001             MOVS     R0,#+1
   \   00000036   0x.... 0x....      BL       i2c_write_reg
    186          
    187              //使能LPF2，关闭HPF（打开后不能正常使用）
    188              i2c_write_reg(IIC_PORT, L3G4200_DEV_ADD, CTRL_REG5_4200, 0x02);
   \   0000003A   0x2302             MOVS     R3,#+2
   \   0000003C   0x2224             MOVS     R2,#+36
   \   0000003E   0x2169             MOVS     R1,#+105
   \   00000040   0x2001             MOVS     R0,#+1
   \   00000042   0x.... 0x....      BL       i2c_write_reg
    189          
    190              gyro_ID = i2c_read_reg(IIC_PORT, L3G4200_DEV_ADD, OUT_TEMP_4200);
   \   00000046   0x2226             MOVS     R2,#+38
   \   00000048   0x2169             MOVS     R1,#+105
   \   0000004A   0x2001             MOVS     R0,#+1
   \   0000004C   0x.... 0x....      BL       i2c_read_reg
   \   00000050   0x....             LDR      R1,??DataTable1_1
   \   00000052   0x7008             STRB     R0,[R1, #+0]
    191          }
   \   00000054   0xBD01             POP      {R0,PC}          ;; return
    192          
    193          /**
    194            * 简介
    195            *     L3G4200 读取
    196            * 注意
    197            *     此处只使用XY轴数据
    198            *     使用硬件iic 读一根轴需要470us(测试使用的是内部晶振)
    199            *     使用模拟IIC 读一根轴需要4.9ms
    200            */

   \                                 In section .text, align 2, keep-with-next
    201          void L3G4200_Read(void)
    202          {
   \                     L3G4200_Read: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    203              //存储三轴数据，每一轴两个字节，先低后高，补码形式存储
    204          //    uint8 gx, gy;//, gz;
    205          //    uint16 wgx, wgy;//, wgz;
    206          
    207              //经测试读两根轴需要 3.72 ms 三根轴更长，所以只读需要的
    208              if ( i2c_read_reg(IIC_PORT, L3G4200_DEV_ADD, STATUS_REG_4200)&0x80 )//查看数据是否准备好了。如果没有准备好，读取则可能读取到错误数据。读取频率最好是高于数据输出频率
   \   00000002   0x2227             MOVS     R2,#+39
   \   00000004   0x2169             MOVS     R1,#+105
   \   00000006   0x2001             MOVS     R0,#+1
   \   00000008   0x.... 0x....      BL       i2c_read_reg
   \   0000000C   0x0600             LSLS     R0,R0,#+24
   \   0000000E   0xD51C             BPL      ??L3G4200_Read_0
    209              {
    210                  //读一根轴需要470us
    211          //        wgx = i2c_read_reg(IIC_PORT, L3G4200_DEV_ADD, OUT_X_H_4200);
    212          //		gx = i2c_read_reg(IIC_PORT, L3G4200_DEV_ADD, OUT_X_L_4200);
    213          //        gyro_x = (wgx<<8) + gx;
    214          //        gyro_x >>= 3;
    215          //       
    216                  wgz = i2c_read_reg(IIC_PORT, L3G4200_DEV_ADD, OUT_Z_H_4200);
   \   00000010   0x222D             MOVS     R2,#+45
   \   00000012   0x2169             MOVS     R1,#+105
   \   00000014   0x2001             MOVS     R0,#+1
   \   00000016   0x.... 0x....      BL       i2c_read_reg
   \   0000001A   0x....             LDR      R1,??DataTable1_2
   \   0000001C   0x8008             STRH     R0,[R1, #+0]
    217          		gz = i2c_read_reg(IIC_PORT, L3G4200_DEV_ADD, OUT_Z_L_4200);
   \   0000001E   0x222C             MOVS     R2,#+44
   \   00000020   0x2169             MOVS     R1,#+105
   \   00000022   0x2001             MOVS     R0,#+1
   \   00000024   0x.... 0x....      BL       i2c_read_reg
   \   00000028   0x....             LDR      R1,??DataTable1_3
   \   0000002A   0x7008             STRB     R0,[R1, #+0]
    218                  gyro_z = (wgz<<8) + gz;
   \   0000002C   0x....             LDR      R0,??DataTable1_2
   \   0000002E   0x8800             LDRH     R0,[R0, #+0]
   \   00000030   0x0200             LSLS     R0,R0,#+8
   \   00000032   0x....             LDR      R1,??DataTable1_3
   \   00000034   0x7809             LDRB     R1,[R1, #+0]
   \   00000036   0x1840             ADDS     R0,R0,R1
   \   00000038   0x....             LDR      R1,??DataTable1_4
   \   0000003A   0x8008             STRH     R0,[R1, #+0]
    219                  gyro_z >>= 3;
   \   0000003C   0x....             LDR      R0,??DataTable1_4
   \   0000003E   0x2100             MOVS     R1,#+0
   \   00000040   0x5E40             LDRSH    R0,[R0, R1]
   \   00000042   0xB200             SXTH     R0,R0
   \   00000044   0x10C0             ASRS     R0,R0,#+3
   \   00000046   0x....             LDR      R1,??DataTable1_4
   \   00000048   0x8008             STRH     R0,[R1, #+0]
    220          
    221              
    222          
    223          //        wgy = i2c_read_reg(IIC_PORT, L3G4200_DEV_ADD, OUT_Y_H_4200);
    224          //		gy = i2c_read_reg(IIC_PORT, L3G4200_DEV_ADD, OUT_Y_L_4200);
    225          //        gyro_y = (wgy<<8) + gy;
    226          //        gyro_y >>= 3;
    227                  
    228                  
    229                  
    230              }
    231          }
   \                     ??L3G4200_Read_0: (+1)
   \   0000004A   0xBD01             POP      {R0,PC}          ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1:
   \   00000000   0x00061A80         DC32     0x61a80

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_1:
   \   00000000   0x........         DC32     gyro_ID

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_2:
   \   00000000   0x........         DC32     wgz

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_3:
   \   00000000   0x........         DC32     gz

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_4:
   \   00000000   0x........         DC32     gyro_z
    232          
    233          

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       8   L3G4200_Init
         8   -> i2c_init
         8   -> i2c_read_reg
         8   -> i2c_write_reg
      16   L3G4200_ReData
        16   -> GpioGet
        16   -> GpioSet
        16   -> SPI_delay
       8   L3G4200_Read
         8   -> i2c_read_reg
       8   L3G4200_Read_Reg
         8   -> SPI_ReadWrite
      16   L3G4200_WrCmd
        16   -> GpioSet
        16   -> SPI_delay
       8   L3G4200_Write_Reg
         8   -> SPI_ReadWrite
       8   SPI_ReadWrite
         8   -> L3G4200_ReData
         8   -> L3G4200_WrCmd
       4   SPI_delay


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable1
       4  ??DataTable1_1
       4  ??DataTable1_2
       4  ??DataTable1_3
       4  ??DataTable1_4
      86  L3G4200_Init
      78  L3G4200_ReData
      76  L3G4200_Read
      26  L3G4200_Read_Reg
      84  L3G4200_WrCmd
      20  L3G4200_Write_Reg
       8  SPI
      22  SPI_ReadWrite
      16  SPI_delay
       1  a
       1  b
       1  gx
       1  gy
       1  gyro_ID
       2  gyro_x
       2  gyro_y
       2  gyro_z
       1  gz
       2  wgx
       2  wgy
       2  wgz

 
  18 bytes in section .bss
   8 bytes in section .data
 428 bytes in section .text
 
 428 bytes of CODE memory
  26 bytes of DATA memory

Errors: none
Warnings: none
