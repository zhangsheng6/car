###############################################################################
#
# IAR ANSI C/C++ Compiler V7.40.2.8542/W32 for ARM        29/Apr/2018  11:05:35
# Copyright 1999-2015 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        H:\智能车程序2018\电磁三轮――ZS\4.27_ZS\device\C\Control.c
#    Command line =  
#        H:\智能车程序2018\电磁三轮――ZS\4.27_ZS\device\C\Control.c -D IAR -D
#        TWR_K60N512 -D _DLIB_FILE_DESCRIPTOR -lCN
#        H:\智能车程序2018\电磁三轮――ZS\4.27_ZS\iar\KEA_128_RAM\List\ -lB
#        H:\智能车程序2018\电磁三轮――ZS\4.27_ZS\iar\KEA_128_RAM\List\ -o
#        H:\智能车程序2018\电磁三轮――ZS\4.27_ZS\iar\KEA_128_RAM\Obj\ --no_cse
#        --no_unroll --no_inline --no_code_motion --no_tbaa --no_clustering
#        --no_scheduling --debug --endian=little --cpu=Cortex-M0+ -e --fpu=None
#        --dlib_config F:\IAR安装包\arm\INC\c\DLib_Config_Normal.h -I
#        H:\智能车程序2018\电磁三轮――ZS\4.27_ZS\iar\..\device\H\ -I
#        H:\智能车程序2018\电磁三轮――ZS\4.27_ZS\iar\..\user\H\ -I
#        H:\智能车程序2018\电磁三轮――ZS\4.27_ZS\iar\..\system\ -I
#        H:\智能车程序2018\电磁三轮――ZS\4.27_ZS\iar\..\lib\H\ -I
#        H:\智能车程序2018\电磁三轮――ZS\4.27_ZS\iar\..\system\coreSupport\
#        -Ol
#    List file    =  
#        H:\智能车程序2018\电磁三轮――ZS\4.27_ZS\iar\KEA_128_RAM\List\Control.lst
#    Object file  =  
#        H:\智能车程序2018\电磁三轮――ZS\4.27_ZS\iar\KEA_128_RAM\Obj\Control.o
#
###############################################################################

H:\智能车程序2018\电磁三轮――ZS\4.27_ZS\device\C\Control.c
      1          /**
      2            ******************************************************************************
      3            * COPYRIGHT NOTICE
      4            * Copyright (c) 2018,华北科技学院
      5            * All rights reserved.
      6            *
      7            * 文件名称：    Control.c
      8            * 文件标识：
      9            * 摘    要：    菜单控制
     10            *
     11            * 当前版本：     1.0
     12            * 负    责：     韩志伟
     13            * 时    间：     2018年4月17日 13:12:06
     14            ******************************************************************************
     15            */
     16          
     17          #include "Control.h"
     18          

   \                                 In section .bss, align 1
     19          uint8 g_5msFlag = 0;
   \                     g_5msFlag:
   \   00000000                      DS8 1

   \                                 In section .data, align 4
     20          UART_Type * uartBase[3] = UART_BASES;
   \                     uartBase:
   \   00000000   0x4006A000         DC32 4006A000H, 4006B000H, 4006C000H
   \              0x4006B000   
   \              0x4006C000   
     21          extern uint8 c;
     22          
     23          
     24          /**
     25            * 简介
     26            *     根据串口发回的数据执行操作
     27            * 注意
     28            */

   \                                 In section .text, align 4, keep-with-next
     29          void ReadDataControl(void)
     30          {
   \                     ReadDataControl: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
     31              static uint8 menuControlFlag = 0;//菜单选择
     32              static uint8 modJudge = 0;//菜单命令标志
     33              static uint8 sendFlag = 0;//是否发送
     34              static uint8 time = 1;//次数
     35              uint8 readDataTemp = 0;    //读来的数据暂存
   \   00000002   0x2200             MOVS     R2,#+0
     36              static uint16 sendDate = 0;       //回传的数据
     37              
     38              //这两处值是懒得改函数随便放的
     39              uint16 P_angle = 0;
   \   00000004   0x2000             MOVS     R0,#+0
     40              uint16 D_angle = 0;
   \   00000006   0x2100             MOVS     R1,#+0
     41              
     42          
     43              if (uartBase[UART_PART]->S1 & UART_S1_RDRF_MASK)//有数据
   \   00000008   0x4A70             LDR      R2,??ReadDataControl_0
   \   0000000A   0x6892             LDR      R2,[R2, #+8]
   \   0000000C   0x7912             LDRB     R2,[R2, #+4]
   \   0000000E   0x0692             LSLS     R2,R2,#+26
   \   00000010   0xD400             BMI      .+4
   \   00000012   0xE0B2             B        ??ReadDataControl_1
     44              {
     45                  readDataTemp = uartBase[UART_PART]->D;
   \   00000014   0x4A6D             LDR      R2,??ReadDataControl_0
   \   00000016   0x6892             LDR      R2,[R2, #+8]
   \   00000018   0x79D2             LDRB     R2,[R2, #+7]
     46          
     47                  if (readDataTemp == 0x1f)//通信协议，开头0x1f，之后一个菜单名字
   \   0000001A   0xB2D2             UXTB     R2,R2
   \   0000001C   0x2A1F             CMP      R2,#+31
   \   0000001E   0xD103             BNE      ??ReadDataControl_2
     48                  {
     49                      modJudge = 1;
   \   00000020   0x2001             MOVS     R0,#+1
   \   00000022   0x496B             LDR      R1,??ReadDataControl_0+0x4
   \   00000024   0x7008             STRB     R0,[R1, #+0]
   \   00000026   0xE0A8             B        ??ReadDataControl_1
     50                  }
     51                  else
     52                  {
     53                      if (modJudge)//菜单命令
   \                     ??ReadDataControl_2: (+1)
   \   00000028   0x4B69             LDR      R3,??ReadDataControl_0+0x4
   \   0000002A   0x781B             LDRB     R3,[R3, #+0]
   \   0000002C   0x2B00             CMP      R3,#+0
   \   0000002E   0xD023             BEQ      ??ReadDataControl_3
     54                      {
     55                          switch (readDataTemp)
   \   00000030   0xB2D2             UXTB     R2,R2
   \   00000032   0x2A01             CMP      R2,#+1
   \   00000034   0xD004             BEQ      ??ReadDataControl_4
   \   00000036   0xD31B             BCC      ??ReadDataControl_5
   \   00000038   0x2A03             CMP      R2,#+3
   \   0000003A   0xD011             BEQ      ??ReadDataControl_6
   \   0000003C   0xD307             BCC      ??ReadDataControl_7
   \   0000003E   0xE017             B        ??ReadDataControl_5
     56                          {
     57                          case CAR_STOP:
     58                              carStatus = STOP;
   \                     ??ReadDataControl_4: (+1)
   \   00000040   0x2001             MOVS     R0,#+1
   \   00000042   0x4964             LDR      R1,??ReadDataControl_0+0x8
   \   00000044   0x7008             STRB     R0,[R1, #+0]
     59                              c=1;
   \   00000046   0x2001             MOVS     R0,#+1
   \   00000048   0x4963             LDR      R1,??ReadDataControl_0+0xC
   \   0000004A   0x7008             STRB     R0,[R1, #+0]
     60                              break;
   \   0000004C   0xE010             B        ??ReadDataControl_5
     61                          case P_ANGLE: //------------------------------------- 调试器 菜单1
     62                              menuControlFlag = P_ANGLE;
   \                     ??ReadDataControl_7: (+1)
   \   0000004E   0x2102             MOVS     R1,#+2
   \   00000050   0x4A62             LDR      R2,??ReadDataControl_0+0x10
   \   00000052   0x7011             STRB     R1,[R2, #+0]
     63                              sendDate = (uint16)P_angle;
   \   00000054   0x4962             LDR      R1,??ReadDataControl_0+0x14
   \   00000056   0x8008             STRH     R0,[R1, #+0]
     64                              sendFlag = 1;
   \   00000058   0x2001             MOVS     R0,#+1
   \   0000005A   0x4962             LDR      R1,??ReadDataControl_0+0x18
   \   0000005C   0x7008             STRB     R0,[R1, #+0]
     65                              break;
   \   0000005E   0xE007             B        ??ReadDataControl_5
     66                          case D_ANGLE:
     67                              menuControlFlag = D_ANGLE;
   \                     ??ReadDataControl_6: (+1)
   \   00000060   0x2003             MOVS     R0,#+3
   \   00000062   0x4A5E             LDR      R2,??ReadDataControl_0+0x10
   \   00000064   0x7010             STRB     R0,[R2, #+0]
     68                              sendDate = (uint16)D_angle;
   \   00000066   0x485E             LDR      R0,??ReadDataControl_0+0x14
   \   00000068   0x8001             STRH     R1,[R0, #+0]
     69                              sendFlag = 1;
   \   0000006A   0x2001             MOVS     R0,#+1
   \   0000006C   0x495D             LDR      R1,??ReadDataControl_0+0x18
   \   0000006E   0x7008             STRB     R0,[R1, #+0]
     70                              break;
     71          
     72                          }
     73                          modJudge = 0;
   \                     ??ReadDataControl_5: (+1)
   \   00000070   0x2000             MOVS     R0,#+0
   \   00000072   0x4957             LDR      R1,??ReadDataControl_0+0x4
   \   00000074   0x7008             STRB     R0,[R1, #+0]
   \   00000076   0xE080             B        ??ReadDataControl_1
     74                      }
     75                      else
     76                      {
     77                          switch (menuControlFlag)
   \                     ??ReadDataControl_3: (+1)
   \   00000078   0x4858             LDR      R0,??ReadDataControl_0+0x10
   \   0000007A   0x7800             LDRB     R0,[R0, #+0]
   \   0000007C   0x2802             CMP      R0,#+2
   \   0000007E   0xD002             BEQ      ??ReadDataControl_8
   \   00000080   0x2803             CMP      R0,#+3
   \   00000082   0xD03D             BEQ      ??ReadDataControl_9
   \   00000084   0xE079             B        ??ReadDataControl_10
     78                          {
     79                          case P_ANGLE: //------------------------------------- 调试器 菜单1
     80                              switch (time)
   \                     ??ReadDataControl_8: (+1)
   \   00000086   0x4858             LDR      R0,??ReadDataControl_0+0x1C
   \   00000088   0x7800             LDRB     R0,[R0, #+0]
   \   0000008A   0x2801             CMP      R0,#+1
   \   0000008C   0xD002             BEQ      ??ReadDataControl_11
   \   0000008E   0x2802             CMP      R0,#+2
   \   00000090   0xD00C             BEQ      ??ReadDataControl_12
   \   00000092   0xE034             B        ??ReadDataControl_13
     81                              {
     82                              case 1:
     83                                  sendDate = readDataTemp;
   \                     ??ReadDataControl_11: (+1)
   \   00000094   0xB2D2             UXTB     R2,R2
   \   00000096   0x4852             LDR      R0,??ReadDataControl_0+0x14
   \   00000098   0x8002             STRH     R2,[R0, #+0]
     84                                  sendDate <<= 8;
   \   0000009A   0x4851             LDR      R0,??ReadDataControl_0+0x14
   \   0000009C   0x8800             LDRH     R0,[R0, #+0]
   \   0000009E   0x0200             LSLS     R0,R0,#+8
   \   000000A0   0x494F             LDR      R1,??ReadDataControl_0+0x14
   \   000000A2   0x8008             STRH     R0,[R1, #+0]
     85                                  time = 2;
   \   000000A4   0x2002             MOVS     R0,#+2
   \   000000A6   0x4950             LDR      R1,??ReadDataControl_0+0x1C
   \   000000A8   0x7008             STRB     R0,[R1, #+0]
     86                                  break;
   \   000000AA   0xE028             B        ??ReadDataControl_13
     87                              case 2:
     88                                  sendDate |= (uint16)readDataTemp;
   \                     ??ReadDataControl_12: (+1)
   \   000000AC   0x484C             LDR      R0,??ReadDataControl_0+0x14
   \   000000AE   0x8800             LDRH     R0,[R0, #+0]
   \   000000B0   0xB2D2             UXTB     R2,R2
   \   000000B2   0x4310             ORRS     R0,R0,R2
   \   000000B4   0x494A             LDR      R1,??ReadDataControl_0+0x14
   \   000000B6   0x8008             STRH     R0,[R1, #+0]
     89                                  P_angle = sendDate;
   \   000000B8   0x4849             LDR      R0,??ReadDataControl_0+0x14
   \   000000BA   0x8800             LDRH     R0,[R0, #+0]
     90                                  sendDate = (uint16)P_angle;//确保参数被修改了
   \   000000BC   0x4948             LDR      R1,??ReadDataControl_0+0x14
   \   000000BE   0x8008             STRH     R0,[R1, #+0]
     91                                  menuSelect = MENU_1;//OLED上显示，可屏蔽
   \   000000C0   0x2002             MOVS     R0,#+2
   \   000000C2   0x494A             LDR      R1,??ReadDataControl_0+0x20
   \   000000C4   0x7008             STRB     R0,[R1, #+0]
     92                                  KEY_sta = !KEY_sta;
   \   000000C6   0x484A             LDR      R0,??ReadDataControl_0+0x24
   \   000000C8   0x7800             LDRB     R0,[R0, #+0]
   \   000000CA   0x2800             CMP      R0,#+0
   \   000000CC   0xD103             BNE      ??ReadDataControl_14
   \   000000CE   0x2001             MOVS     R0,#+1
   \   000000D0   0x4947             LDR      R1,??ReadDataControl_0+0x24
   \   000000D2   0x7008             STRB     R0,[R1, #+0]
   \   000000D4   0xE002             B        ??ReadDataControl_15
   \                     ??ReadDataControl_14: (+1)
   \   000000D6   0x2000             MOVS     R0,#+0
   \   000000D8   0x4945             LDR      R1,??ReadDataControl_0+0x24
   \   000000DA   0x7008             STRB     R0,[R1, #+0]
     93                                  KEY_menuChange = !KEY_menuChange;
   \                     ??ReadDataControl_15: (+1)
   \   000000DC   0x4845             LDR      R0,??ReadDataControl_0+0x28
   \   000000DE   0x7800             LDRB     R0,[R0, #+0]
   \   000000E0   0x2800             CMP      R0,#+0
   \   000000E2   0xD103             BNE      ??ReadDataControl_16
   \   000000E4   0x2001             MOVS     R0,#+1
   \   000000E6   0x4943             LDR      R1,??ReadDataControl_0+0x28
   \   000000E8   0x7008             STRB     R0,[R1, #+0]
   \   000000EA   0xE002             B        ??ReadDataControl_17
   \                     ??ReadDataControl_16: (+1)
   \   000000EC   0x2000             MOVS     R0,#+0
   \   000000EE   0x4941             LDR      R1,??ReadDataControl_0+0x28
   \   000000F0   0x7008             STRB     R0,[R1, #+0]
     94                                  time = 1;
   \                     ??ReadDataControl_17: (+1)
   \   000000F2   0x2001             MOVS     R0,#+1
   \   000000F4   0x493C             LDR      R1,??ReadDataControl_0+0x1C
   \   000000F6   0x7008             STRB     R0,[R1, #+0]
     95                                  sendFlag = 1;//接受完毕，确认回传
   \   000000F8   0x2001             MOVS     R0,#+1
   \   000000FA   0x493A             LDR      R1,??ReadDataControl_0+0x18
   \   000000FC   0x7008             STRB     R0,[R1, #+0]
     96                                  break;
     97                              }
     98                              break;
   \                     ??ReadDataControl_13: (+1)
   \   000000FE   0xE03C             B        ??ReadDataControl_1
     99                          case D_ANGLE: //------------------------------------- 调试器 菜单1
    100                              switch (time)
   \                     ??ReadDataControl_9: (+1)
   \   00000100   0x4839             LDR      R0,??ReadDataControl_0+0x1C
   \   00000102   0x7800             LDRB     R0,[R0, #+0]
   \   00000104   0x2801             CMP      R0,#+1
   \   00000106   0xD002             BEQ      ??ReadDataControl_18
   \   00000108   0x2802             CMP      R0,#+2
   \   0000010A   0xD00C             BEQ      ??ReadDataControl_19
   \   0000010C   0xE034             B        ??ReadDataControl_20
    101                              {
    102                              case 1:
    103                                  sendDate = readDataTemp;
   \                     ??ReadDataControl_18: (+1)
   \   0000010E   0xB2D2             UXTB     R2,R2
   \   00000110   0x4833             LDR      R0,??ReadDataControl_0+0x14
   \   00000112   0x8002             STRH     R2,[R0, #+0]
    104                                  sendDate <<= 8;
   \   00000114   0x4832             LDR      R0,??ReadDataControl_0+0x14
   \   00000116   0x8800             LDRH     R0,[R0, #+0]
   \   00000118   0x0200             LSLS     R0,R0,#+8
   \   0000011A   0x4931             LDR      R1,??ReadDataControl_0+0x14
   \   0000011C   0x8008             STRH     R0,[R1, #+0]
    105                                  time = 2;
   \   0000011E   0x2002             MOVS     R0,#+2
   \   00000120   0x4931             LDR      R1,??ReadDataControl_0+0x1C
   \   00000122   0x7008             STRB     R0,[R1, #+0]
    106                                  break;
   \   00000124   0xE028             B        ??ReadDataControl_20
    107                              case 2:
    108                                  sendDate |= (uint16)readDataTemp;
   \                     ??ReadDataControl_19: (+1)
   \   00000126   0x482E             LDR      R0,??ReadDataControl_0+0x14
   \   00000128   0x8800             LDRH     R0,[R0, #+0]
   \   0000012A   0xB2D2             UXTB     R2,R2
   \   0000012C   0x4310             ORRS     R0,R0,R2
   \   0000012E   0x492C             LDR      R1,??ReadDataControl_0+0x14
   \   00000130   0x8008             STRH     R0,[R1, #+0]
    109                                  D_angle = sendDate;
   \   00000132   0x482B             LDR      R0,??ReadDataControl_0+0x14
   \   00000134   0x8801             LDRH     R1,[R0, #+0]
    110                                  sendDate = (uint16)D_angle;//确保参数被修改了
   \   00000136   0x482A             LDR      R0,??ReadDataControl_0+0x14
   \   00000138   0x8001             STRH     R1,[R0, #+0]
    111                                  menuSelect = MENU_2;//OLED上显示，可屏蔽
   \   0000013A   0x2003             MOVS     R0,#+3
   \   0000013C   0x492B             LDR      R1,??ReadDataControl_0+0x20
   \   0000013E   0x7008             STRB     R0,[R1, #+0]
    112                                  KEY_sta = !KEY_sta;
   \   00000140   0x482B             LDR      R0,??ReadDataControl_0+0x24
   \   00000142   0x7800             LDRB     R0,[R0, #+0]
   \   00000144   0x2800             CMP      R0,#+0
   \   00000146   0xD103             BNE      ??ReadDataControl_21
   \   00000148   0x2001             MOVS     R0,#+1
   \   0000014A   0x4929             LDR      R1,??ReadDataControl_0+0x24
   \   0000014C   0x7008             STRB     R0,[R1, #+0]
   \   0000014E   0xE002             B        ??ReadDataControl_22
   \                     ??ReadDataControl_21: (+1)
   \   00000150   0x2000             MOVS     R0,#+0
   \   00000152   0x4927             LDR      R1,??ReadDataControl_0+0x24
   \   00000154   0x7008             STRB     R0,[R1, #+0]
    113                                  KEY_menuChange = !KEY_menuChange;
   \                     ??ReadDataControl_22: (+1)
   \   00000156   0x4827             LDR      R0,??ReadDataControl_0+0x28
   \   00000158   0x7800             LDRB     R0,[R0, #+0]
   \   0000015A   0x2800             CMP      R0,#+0
   \   0000015C   0xD103             BNE      ??ReadDataControl_23
   \   0000015E   0x2001             MOVS     R0,#+1
   \   00000160   0x4924             LDR      R1,??ReadDataControl_0+0x28
   \   00000162   0x7008             STRB     R0,[R1, #+0]
   \   00000164   0xE002             B        ??ReadDataControl_24
   \                     ??ReadDataControl_23: (+1)
   \   00000166   0x2000             MOVS     R0,#+0
   \   00000168   0x4922             LDR      R1,??ReadDataControl_0+0x28
   \   0000016A   0x7008             STRB     R0,[R1, #+0]
    114                                  time = 1;
   \                     ??ReadDataControl_24: (+1)
   \   0000016C   0x2001             MOVS     R0,#+1
   \   0000016E   0x491E             LDR      R1,??ReadDataControl_0+0x1C
   \   00000170   0x7008             STRB     R0,[R1, #+0]
    115                                  sendFlag = 1;//接受完毕，确认回传
   \   00000172   0x2001             MOVS     R0,#+1
   \   00000174   0x491B             LDR      R1,??ReadDataControl_0+0x18
   \   00000176   0x7008             STRB     R0,[R1, #+0]
    116                                  break;
    117                              }
    118                              break;
   \                     ??ReadDataControl_20: (+1)
   \   00000178   0xE7FF             B        ??ReadDataControl_1
    119          
    120                          default :
    121                              break;
    122                          }
    123                      }
    124                  }
    125          
    126              }
    127          
    128              if (sendFlag)
   \                     ??ReadDataControl_10: (+1)
   \                     ??ReadDataControl_1: (+1)
   \   0000017A   0x481A             LDR      R0,??ReadDataControl_0+0x18
   \   0000017C   0x7800             LDRB     R0,[R0, #+0]
   \   0000017E   0x2800             CMP      R0,#+0
   \   00000180   0xD023             BEQ      ??ReadDataControl_25
    129              {
    130                  if (g_5msFlag)//隔5ms发送一次数据，防止数据丢失
   \   00000182   0x481D             LDR      R0,??ReadDataControl_0+0x2C
   \   00000184   0x7800             LDRB     R0,[R0, #+0]
   \   00000186   0x2800             CMP      R0,#+0
   \   00000188   0xD01F             BEQ      ??ReadDataControl_25
    131                  {
    132                      switch (time)
   \   0000018A   0x4817             LDR      R0,??ReadDataControl_0+0x1C
   \   0000018C   0x7800             LDRB     R0,[R0, #+0]
   \   0000018E   0x2801             CMP      R0,#+1
   \   00000190   0xD002             BEQ      ??ReadDataControl_26
   \   00000192   0x2802             CMP      R0,#+2
   \   00000194   0xD00B             BEQ      ??ReadDataControl_27
   \   00000196   0xE015             B        ??ReadDataControl_28
    133                      {
    134                      case 1:
    135                          UART_Send_Byte((uint8)(sendDate>>8));
   \                     ??ReadDataControl_26: (+1)
   \   00000198   0x4811             LDR      R0,??ReadDataControl_0+0x14
   \   0000019A   0x8800             LDRH     R0,[R0, #+0]
   \   0000019C   0xB280             UXTH     R0,R0
   \   0000019E   0x0A00             LSRS     R0,R0,#+8
   \   000001A0   0xB2C0             UXTB     R0,R0
   \   000001A2   0x.... 0x....      BL       UART_Send_Byte
    136                          time = 2;
   \   000001A6   0x2002             MOVS     R0,#+2
   \   000001A8   0x490F             LDR      R1,??ReadDataControl_0+0x1C
   \   000001AA   0x7008             STRB     R0,[R1, #+0]
    137                          break;
   \   000001AC   0xE00A             B        ??ReadDataControl_28
    138                      case 2:
    139                          UART_Send_Byte((uint8)sendDate);
   \                     ??ReadDataControl_27: (+1)
   \   000001AE   0x480C             LDR      R0,??ReadDataControl_0+0x14
   \   000001B0   0x8800             LDRH     R0,[R0, #+0]
   \   000001B2   0xB2C0             UXTB     R0,R0
   \   000001B4   0x.... 0x....      BL       UART_Send_Byte
    140                          time = 1;
   \   000001B8   0x2001             MOVS     R0,#+1
   \   000001BA   0x490B             LDR      R1,??ReadDataControl_0+0x1C
   \   000001BC   0x7008             STRB     R0,[R1, #+0]
    141                          sendFlag = 0;//发送完毕
   \   000001BE   0x2000             MOVS     R0,#+0
   \   000001C0   0x4908             LDR      R1,??ReadDataControl_0+0x18
   \   000001C2   0x7008             STRB     R0,[R1, #+0]
    142                          break;
    143                      }
    144          
    145                      g_5msFlag = 0;
   \                     ??ReadDataControl_28: (+1)
   \   000001C4   0x2000             MOVS     R0,#+0
   \   000001C6   0x490C             LDR      R1,??ReadDataControl_0+0x2C
   \   000001C8   0x7008             STRB     R0,[R1, #+0]
    146                  }
    147              }
    148          }
   \                     ??ReadDataControl_25: (+1)
   \   000001CA   0xBD01             POP      {R0,PC}          ;; return
   \                     ??ReadDataControl_0:
   \   000001CC   0x........         DC32     uartBase
   \   000001D0   0x........         DC32     ??modJudge
   \   000001D4   0x........         DC32     carStatus
   \   000001D8   0x........         DC32     c
   \   000001DC   0x........         DC32     ??menuControlFlag
   \   000001E0   0x........         DC32     ??sendDate
   \   000001E4   0x........         DC32     ??sendFlag
   \   000001E8   0x........         DC32     ??time
   \   000001EC   0x........         DC32     menuSelect
   \   000001F0   0x........         DC32     KEY_sta
   \   000001F4   0x........         DC32     KEY_menuChange
   \   000001F8   0x........         DC32     g_5msFlag

   \                                 In section .bss, align 1
   \                     ??menuControlFlag:
   \   00000000                      DS8 1

   \                                 In section .bss, align 1
   \                     ??modJudge:
   \   00000000                      DS8 1

   \                                 In section .bss, align 1
   \                     ??sendFlag:
   \   00000000                      DS8 1

   \                                 In section .data, align 1
   \                     ??time:
   \   00000000   0x01               DC8 1

   \                                 In section .bss, align 2
   \                     ??sendDate:
   \   00000000                      DS8 2
    149          
    150          
    151          
    152          
    153          
    154          

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       8   ReadDataControl
         8   -> UART_Send_Byte


   Section sizes:

   Bytes  Function/Label
   -----  --------------
     508  ReadDataControl
       1  g_5msFlag
       1  menuControlFlag
       1  modJudge
       2  sendDate
       1  sendFlag
       1  time
      12  uartBase

 
   6 bytes in section .bss
  13 bytes in section .data
 508 bytes in section .text
 
 508 bytes of CODE memory
  19 bytes of DATA memory

Errors: none
Warnings: none
