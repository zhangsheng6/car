###############################################################################
#
# IAR ANSI C/C++ Compiler V7.40.2.8542/W32 for ARM        01/May/2018  16:13:22
# Copyright 1999-2015 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        H:\智能车程序2018\电磁三轮――ZS\5.1\lib\C\KEA128_systick.c
#    Command line =  
#        H:\智能车程序2018\电磁三轮――ZS\5.1\lib\C\KEA128_systick.c -D IAR -D
#        TWR_K60N512 -D _DLIB_FILE_DESCRIPTOR -lCN
#        H:\智能车程序2018\电磁三轮――ZS\5.1\iar\KEA_128_FLASH\List\ -lB
#        H:\智能车程序2018\电磁三轮――ZS\5.1\iar\KEA_128_FLASH\List\ -o
#        H:\智能车程序2018\电磁三轮――ZS\5.1\iar\KEA_128_FLASH\Obj\ --no_cse
#        --no_unroll --no_inline --no_code_motion --no_tbaa --no_clustering
#        --no_scheduling --debug --endian=little --cpu=Cortex-M0+ -e --fpu=None
#        --dlib_config F:\IAR安装包\arm\INC\c\DLib_Config_Normal.h -I
#        H:\智能车程序2018\电磁三轮――ZS\5.1\iar\..\device\H\ -I
#        H:\智能车程序2018\电磁三轮――ZS\5.1\iar\..\user\H\ -I
#        H:\智能车程序2018\电磁三轮――ZS\5.1\iar\..\system\ -I
#        H:\智能车程序2018\电磁三轮――ZS\5.1\iar\..\lib\H\ -I
#        H:\智能车程序2018\电磁三轮――ZS\5.1\iar\..\system\coreSupport\ -On
#    List file    =  
#        H:\智能车程序2018\电磁三轮――ZS\5.1\iar\KEA_128_FLASH\List\KEA128_systick.lst
#    Object file  =  
#        H:\智能车程序2018\电磁三轮――ZS\5.1\iar\KEA_128_FLASH\Obj\KEA128_systick.o
#
###############################################################################

H:\智能车程序2018\电磁三轮――ZS\5.1\lib\C\KEA128_systick.c
      1          /*********************************************************************************************************************
      2           * COPYRIGHT NOTICE
      3           * Copyright (c) 2017,逐飞科技
      4           * All rights reserved.
      5           * 技术讨论QQ群：179029047
      6           *
      7           * 以下所有内容版权均属逐飞科技所有，未经允许不得用于商业用途，
      8           * 欢迎各位使用并传播本程序，修改内容时必须保留逐飞科技的版权声明。
      9           *
     10           * @file       		KEA128_systick
     11           * @company	   		成都逐飞科技有限公司
     12           * @author     		逐飞科技(QQ3184284598)
     13           * @version    		v2.0
     14           * @Software 		IAR 7.7 or MDK 5.23
     15           * @Target core		S9KEA128AMLK
     16           * @Taobao   		https://seekfree.taobao.com/
     17           * @date       		2017-11-6
     18           ********************************************************************************************************************/
     19          
     20          
     21          #include "KEA128_systick.h"
     22          
     23          
     24          
     25          //-------------------------------------------------------------------------------------------------------------------
     26          //  @brief      systick延时函数
     27          //  @param      time            需要延时的时间
     28          //  @return     void
     29          //  @since      v2.0
     30          //  Sample usage:               systick_delay(1000);   //延时1000个内核时钟周期
     31          //-------------------------------------------------------------------------------------------------------------------

   \                                 In section .text, align 2, keep-with-next
     32          void SystickDelay(uint32 time)
     33          {
   \                     SystickDelay: (+1)
   \   00000000   0xB500             PUSH     {LR}
     34              if(time == 0)   return;
   \   00000002   0x2800             CMP      R0,#+0
   \   00000004   0xD00E             BEQ      ??SystickDelay_0
     35          
     36              SysTick->CTRL = 0x00;//先关了 systick ,清标志位
   \                     ??SystickDelay_1: (+1)
   \   00000006   0x2100             MOVS     R1,#+0
   \   00000008   0x....             LDR      R2,??DataTable3  ;; 0xe000e010
   \   0000000A   0x6011             STR      R1,[R2, #+0]
     37              SysTick->LOAD = time;//设置延时时间
   \   0000000C   0x....             LDR      R1,??DataTable3_1  ;; 0xe000e014
   \   0000000E   0x6008             STR      R0,[R1, #+0]
     38              SysTick->VAL = 0x00;//清空计数器
   \   00000010   0x2100             MOVS     R1,#+0
   \   00000012   0x....             LDR      R2,??DataTable3_2  ;; 0xe000e018
   \   00000014   0x6011             STR      R1,[R2, #+0]
     39              SysTick->CTRL = ( 0 | SysTick_CTRL_ENABLE_Msk     //使能 systick
     40                            //| SysTick_CTRL_TICKINT_Msk        //使能中断 (注释了表示关闭中断)
     41                              | SysTick_CTRL_CLKSOURCE_Msk      //时钟源选择 (core clk)
     42                          );
   \   00000016   0x2105             MOVS     R1,#+5
   \   00000018   0x....             LDR      R2,??DataTable3  ;; 0xe000e010
   \   0000001A   0x6011             STR      R1,[R2, #+0]
     43              while( !(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk));//等待时间到
   \                     ??SystickDelay_2: (+1)
   \   0000001C   0x....             LDR      R1,??DataTable3  ;; 0xe000e010
   \   0000001E   0x6809             LDR      R1,[R1, #+0]
   \   00000020   0x03C9             LSLS     R1,R1,#+15
   \   00000022   0xD5FB             BPL      ??SystickDelay_2
     44          }
   \                     ??SystickDelay_0: (+1)
   \   00000024   0xBD00             POP      {PC}             ;; return
     45          
     46          //-------------------------------------------------------------------------------------------------------------------
     47          //  @brief      毫秒级systick延时函数
     48          //  @param      ms              延时多少毫秒
     49          //  @return     void
     50          //  @since      v2.0
     51          //  Sample usage:               systick_delay_ms(1000);   //延时1000毫秒
     52          //-------------------------------------------------------------------------------------------------------------------

   \                                 In section .text, align 2, keep-with-next
     53          void SystickDelayMs(uint32 ms)
     54          {
   \                     SystickDelayMs: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
     55              get_clk();//获取内核时钟便于后面设置
   \   00000004   0x.... 0x....      BL       get_clk
     56          	while(ms--) SystickDelay(core_clk_khz);
   \                     ??SystickDelayMs_0: (+1)
   \   00000008   0x0020             MOVS     R0,R4
   \   0000000A   0x1E44             SUBS     R4,R0,#+1
   \   0000000C   0x2800             CMP      R0,#+0
   \   0000000E   0xD004             BEQ      ??SystickDelayMs_1
   \   00000010   0x....             LDR      R0,??DataTable3_3
   \   00000012   0x6800             LDR      R0,[R0, #+0]
   \   00000014   0x.... 0x....      BL       SystickDelay
   \   00000018   0xE7F6             B        ??SystickDelayMs_0
     57          }
   \                     ??SystickDelayMs_1: (+1)
   \   0000001A   0xBD10             POP      {R4,PC}          ;; return
     58          
     59          //-------------------------------------------------------------------------------------------------------------------
     60          //  @brief      systick定时器
     61          //  @param      time            定时时间(0-0x00ffffff)
     62          //  @return     void
     63          //  @since      v2.0
     64          //  Sample usage:               systick_timing(1000);   //定时1000个内核时钟周期
     65          //-------------------------------------------------------------------------------------------------------------------

   \                                 In section .text, align 2, keep-with-next
     66          void systick_timing(uint32 time)
     67          {
     68              time &= 0x00ffffff;     	//数据强制变换为24位
   \                     systick_timing: (+1)
   \   00000000   0x0200             LSLS     R0,R0,#+8        ;; ZeroExtS R0,R0,#+8,#+8
   \   00000002   0x0A00             LSRS     R0,R0,#+8
     69              SysTick->LOAD = time;       //设置延时时间
   \   00000004   0x....             LDR      R1,??DataTable3_1  ;; 0xe000e014
   \   00000006   0x6008             STR      R0,[R1, #+0]
     70              SysTick->VAL = 0x00;       	//清空计数器
   \   00000008   0x2100             MOVS     R1,#+0
   \   0000000A   0x....             LDR      R2,??DataTable3_2  ;; 0xe000e018
   \   0000000C   0x6011             STR      R1,[R2, #+0]
     71              SysTick->CTRL = ( 0
     72          					| SysTick_CTRL_ENABLE_Msk       //使能 systick
     73                              | SysTick_CTRL_TICKINT_Msk      //使能中断
     74                              | SysTick_CTRL_CLKSOURCE_Msk    //时钟源选择 (core clk)
     75                          );
   \   0000000E   0x2107             MOVS     R1,#+7
   \   00000010   0x....             LDR      R2,??DataTable3  ;; 0xe000e010
   \   00000012   0x6011             STR      R1,[R2, #+0]
     76          }
   \   00000014   0x4770             BX       LR               ;; return
     77          
     78          //-------------------------------------------------------------------------------------------------------------------
     79          //  @brief      获得当前System tick timer的值
     80          //  @return     返回当前System tick timer的值
     81          //  @since      v2.0
     82          //  Sample usage:               uint32 tim = systick_getval();
     83          //-------------------------------------------------------------------------------------------------------------------

   \                                 In section .text, align 2, keep-with-next
     84          uint32 systick_getval(void)
     85          {
     86              return SysTick->VAL;
   \                     systick_getval: (+1)
   \   00000000   0x....             LDR      R0,??DataTable3_2  ;; 0xe000e018
   \   00000002   0x6800             LDR      R0,[R0, #+0]
   \   00000004   0x4770             BX       LR               ;; return
     87          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3:
   \   00000000   0xE000E010         DC32     0xe000e010

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_1:
   \   00000000   0xE000E014         DC32     0xe000e014

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_2:
   \   00000000   0xE000E018         DC32     0xe000e018

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_3:
   \   00000000   0x........         DC32     core_clk_khz
     88          

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       4   SystickDelay
       8   SystickDelayMs
         8   -> SystickDelay
         8   -> get_clk
       0   systick_getval
       0   systick_timing


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable3
       4  ??DataTable3_1
       4  ??DataTable3_2
       4  ??DataTable3_3
      38  SystickDelay
      28  SystickDelayMs
       6  systick_getval
      22  systick_timing

 
 110 bytes in section .text
 
 110 bytes of CODE memory

Errors: none
Warnings: none
