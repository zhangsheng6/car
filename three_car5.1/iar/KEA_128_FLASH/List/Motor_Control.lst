###############################################################################
#
# IAR ANSI C/C++ Compiler V7.40.2.8542/W32 for ARM        01/May/2018  16:13:24
# Copyright 1999-2015 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        H:\智能车程序2018\电磁三轮――ZS\5.1\user\C\Motor_Control.c
#    Command line =  
#        H:\智能车程序2018\电磁三轮――ZS\5.1\user\C\Motor_Control.c -D IAR -D
#        TWR_K60N512 -D _DLIB_FILE_DESCRIPTOR -lCN
#        H:\智能车程序2018\电磁三轮――ZS\5.1\iar\KEA_128_FLASH\List\ -lB
#        H:\智能车程序2018\电磁三轮――ZS\5.1\iar\KEA_128_FLASH\List\ -o
#        H:\智能车程序2018\电磁三轮――ZS\5.1\iar\KEA_128_FLASH\Obj\ --no_cse
#        --no_unroll --no_inline --no_code_motion --no_tbaa --no_clustering
#        --no_scheduling --debug --endian=little --cpu=Cortex-M0+ -e --fpu=None
#        --dlib_config F:\IAR安装包\arm\INC\c\DLib_Config_Normal.h -I
#        H:\智能车程序2018\电磁三轮――ZS\5.1\iar\..\device\H\ -I
#        H:\智能车程序2018\电磁三轮――ZS\5.1\iar\..\user\H\ -I
#        H:\智能车程序2018\电磁三轮――ZS\5.1\iar\..\system\ -I
#        H:\智能车程序2018\电磁三轮――ZS\5.1\iar\..\lib\H\ -I
#        H:\智能车程序2018\电磁三轮――ZS\5.1\iar\..\system\coreSupport\ -On
#    List file    =  
#        H:\智能车程序2018\电磁三轮――ZS\5.1\iar\KEA_128_FLASH\List\Motor_Control.lst
#    Object file  =  
#        H:\智能车程序2018\电磁三轮――ZS\5.1\iar\KEA_128_FLASH\Obj\Motor_Control.o
#
###############################################################################

H:\智能车程序2018\电磁三轮――ZS\5.1\user\C\Motor_Control.c
      1          /**
      2            ******************************************************************************
      3            * COPYRIGHT NOTICE
      4            * Copyright (c) 2018,华北科技学院
      5            * All rights reserved.
      6            *
      7            * 文件名称：    Motor_Control.c
      8            * 文件标识：
      9            * 摘    要：
     10            *
     11            * 当前版本：     1.0
     12            * 负    责：     韩志伟
     13            * 时    间：     2018年1月29日 21:58:02
     14            ******************************************************************************
     15            */
     16          #include "Motor_Control.h"
     17          
     18          extern float Direction_Control_Output_L ,Direction_Control_Output_R;
     19          //电机

   \                                 In section .bss, align 4
     20          float Motor_Out_L = 0.0, Motor_Out_R = 0.0, Motor_Max = 7500, Motor_Min = -7500;
   \                     Motor_Out_L:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
   \                     Motor_Out_R:
   \   00000000                      DS8 4

   \                                 In section .data, align 4
   \                     Motor_Max:
   \   00000000   0x45EA6000         DC32 45EA6000H

   \                                 In section .data, align 4
   \                     Motor_Min:
   \   00000000   0xC5EA6000         DC32 0C5EA6000H

   \                                 In section .data, align 4
     21          unsigned int DEAD_L = 2000;//2290
   \                     DEAD_L:
   \   00000000   0x000007D0         DC32 2000

   \                                 In section .data, align 4
     22          unsigned int DEAD_R =2000;
   \                     DEAD_R:
   \   00000000   0x000007D0         DC32 2000

   \                                 In section .data, align 4
     23          float AD_0_Min=10,AD_0_Max=45,AD_2_Max=45,AD_2_Min=10;//7,57
   \                     AD_0_Min:
   \   00000000   0x41200000         DC32 41200000H

   \                                 In section .data, align 4
   \                     AD_0_Max:
   \   00000000   0x42340000         DC32 42340000H

   \                                 In section .data, align 4
   \                     AD_2_Max:
   \   00000000   0x42340000         DC32 42340000H

   \                                 In section .data, align 4
   \                     AD_2_Min:
   \   00000000   0x41200000         DC32 41200000H

   \                                 In section .bss, align 4
     24          float Wangdao_Speed_Output = 0;
   \                     Wangdao_Speed_Output:
   \   00000000                      DS8 4
     25          
     26          /**
     27            * 简介
     28            *     电机控制程序
     29            * 备注
     30            *
     31            */

   \                                 In section .text, align 4, keep-with-next
     32          void Motor_control(void)
     33          {
   \                     Motor_control: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
     34              Motor_Out_L = Direction_Control_Output_L+Speed_Control_Output_L;
   \   00000002   0x4845             LDR      R0,??Motor_control_0
   \   00000004   0x6801             LDR      R1,[R0, #+0]
   \   00000006   0x4845             LDR      R0,??Motor_control_0+0x4
   \   00000008   0x6800             LDR      R0,[R0, #+0]
   \   0000000A   0x.... 0x....      BL       __aeabi_fadd
   \   0000000E   0x4944             LDR      R1,??Motor_control_0+0x8
   \   00000010   0x6008             STR      R0,[R1, #+0]
     35              Motor_Out_R =Direction_Control_Output_R+Speed_Control_Output_R;
   \   00000012   0x4844             LDR      R0,??Motor_control_0+0xC
   \   00000014   0x6801             LDR      R1,[R0, #+0]
   \   00000016   0x4844             LDR      R0,??Motor_control_0+0x10
   \   00000018   0x6800             LDR      R0,[R0, #+0]
   \   0000001A   0x.... 0x....      BL       __aeabi_fadd
   \   0000001E   0x4943             LDR      R1,??Motor_control_0+0x14
   \   00000020   0x6008             STR      R0,[R1, #+0]
     36            
     37            
     38              /* 电机启动PWM控制 ------------------------------------------------------- */
     39             
     40          //        Motor_Out_L += DEAD_L; //加上启动基数
     41          //                Motor_Out_R += DEAD_R;
     42                  if (Motor_Out_L > Motor_Max)
   \   00000022   0x4843             LDR      R0,??Motor_control_0+0x18
   \   00000024   0x6800             LDR      R0,[R0, #+0]
   \   00000026   0x493E             LDR      R1,??Motor_control_0+0x8
   \   00000028   0x6809             LDR      R1,[R1, #+0]
   \   0000002A   0x.... 0x....      BL       __aeabi_cfcmple
   \   0000002E   0xD203             BCS      ??Motor_control_1
     43                      Motor_Out_L = Motor_Max;
   \   00000030   0x483F             LDR      R0,??Motor_control_0+0x18
   \   00000032   0x6800             LDR      R0,[R0, #+0]
   \   00000034   0x493A             LDR      R1,??Motor_control_0+0x8
   \   00000036   0x6008             STR      R0,[R1, #+0]
     44          
     45                  if (Motor_Out_R > Motor_Max)
   \                     ??Motor_control_1: (+1)
   \   00000038   0x483D             LDR      R0,??Motor_control_0+0x18
   \   0000003A   0x6800             LDR      R0,[R0, #+0]
   \   0000003C   0x493B             LDR      R1,??Motor_control_0+0x14
   \   0000003E   0x6809             LDR      R1,[R1, #+0]
   \   00000040   0x.... 0x....      BL       __aeabi_cfcmple
   \   00000044   0xD203             BCS      ??Motor_control_2
     46                      Motor_Out_R = Motor_Max;  
   \   00000046   0x483A             LDR      R0,??Motor_control_0+0x18
   \   00000048   0x6800             LDR      R0,[R0, #+0]
   \   0000004A   0x4938             LDR      R1,??Motor_control_0+0x14
   \   0000004C   0x6008             STR      R0,[R1, #+0]
     47                  
     48                  if (Motor_Out_L < Motor_Min)
   \                     ??Motor_control_2: (+1)
   \   0000004E   0x4834             LDR      R0,??Motor_control_0+0x8
   \   00000050   0x6800             LDR      R0,[R0, #+0]
   \   00000052   0x4938             LDR      R1,??Motor_control_0+0x1C
   \   00000054   0x6809             LDR      R1,[R1, #+0]
   \   00000056   0x.... 0x....      BL       __aeabi_cfcmple
   \   0000005A   0xD203             BCS      ??Motor_control_3
     49                      Motor_Out_L = Motor_Min;
   \   0000005C   0x4835             LDR      R0,??Motor_control_0+0x1C
   \   0000005E   0x6800             LDR      R0,[R0, #+0]
   \   00000060   0x492F             LDR      R1,??Motor_control_0+0x8
   \   00000062   0x6008             STR      R0,[R1, #+0]
     50          
     51                  if (Motor_Out_R <Motor_Min)
   \                     ??Motor_control_3: (+1)
   \   00000064   0x4831             LDR      R0,??Motor_control_0+0x14
   \   00000066   0x6800             LDR      R0,[R0, #+0]
   \   00000068   0x4932             LDR      R1,??Motor_control_0+0x1C
   \   0000006A   0x6809             LDR      R1,[R1, #+0]
   \   0000006C   0x.... 0x....      BL       __aeabi_cfcmple
   \   00000070   0xD203             BCS      ??Motor_control_4
     52                      Motor_Out_R = Motor_Min;
   \   00000072   0x4830             LDR      R0,??Motor_control_0+0x1C
   \   00000074   0x6800             LDR      R0,[R0, #+0]
   \   00000076   0x492D             LDR      R1,??Motor_control_0+0x14
   \   00000078   0x6008             STR      R0,[R1, #+0]
     53            
     54              
     55              /* 电机启动PWM控制 -------- END ------------------------------------------ */
     56          
     57                  /* 电机正反转控制 -------------------------------------------- */
     58                  //左正反转控制
     59                  if (Motor_Out_L > 0)
   \                     ??Motor_control_4: (+1)
   \   0000007A   0x4829             LDR      R0,??Motor_control_0+0x8
   \   0000007C   0x6800             LDR      R0,[R0, #+0]
   \   0000007E   0x2100             MOVS     R1,#+0
   \   00000080   0x.... 0x....      BL       __aeabi_cfrcmple
   \   00000084   0xD208             BCS      ??Motor_control_5
     60                  {
     61                      forward_L;//正转
   \   00000086   0x2101             MOVS     R1,#+1
   \   00000088   0x202A             MOVS     R0,#+42
   \   0000008A   0x.... 0x....      BL       GpioSet
   \   0000008E   0x2100             MOVS     R1,#+0
   \   00000090   0x201A             MOVS     R0,#+26
   \   00000092   0x.... 0x....      BL       GpioSet
   \   00000096   0xE00E             B        ??Motor_control_6
     62                  }
     63              
     64                  else
     65                  {
     66          //          Motor_Out_L=0;
     67          //          forward_L;//正转
     68                      Motor_Out_L = -Motor_Out_L;
   \                     ??Motor_control_5: (+1)
   \   00000098   0x4821             LDR      R0,??Motor_control_0+0x8
   \   0000009A   0x6800             LDR      R0,[R0, #+0]
   \   0000009C   0x2180             MOVS     R1,#+128
   \   0000009E   0x0609             LSLS     R1,R1,#+24       ;; #-2147483648
   \   000000A0   0x4048             EORS     R0,R0,R1
   \   000000A2   0x491F             LDR      R1,??Motor_control_0+0x8
   \   000000A4   0x6008             STR      R0,[R1, #+0]
     69                      reversal_L;//反转
   \   000000A6   0x2100             MOVS     R1,#+0
   \   000000A8   0x202A             MOVS     R0,#+42
   \   000000AA   0x.... 0x....      BL       GpioSet
   \   000000AE   0x2101             MOVS     R1,#+1
   \   000000B0   0x201A             MOVS     R0,#+26
   \   000000B2   0x.... 0x....      BL       GpioSet
     70                  }
     71          
     72                  //右正反转控制
     73                  if (Motor_Out_R > 0)
   \                     ??Motor_control_6: (+1)
   \   000000B6   0x481D             LDR      R0,??Motor_control_0+0x14
   \   000000B8   0x6800             LDR      R0,[R0, #+0]
   \   000000BA   0x2100             MOVS     R1,#+0
   \   000000BC   0x.... 0x....      BL       __aeabi_cfrcmple
   \   000000C0   0xD208             BCS      ??Motor_control_7
     74                  {
     75                      forward_R;
   \   000000C2   0x2101             MOVS     R1,#+1
   \   000000C4   0x2024             MOVS     R0,#+36
   \   000000C6   0x.... 0x....      BL       GpioSet
   \   000000CA   0x2100             MOVS     R1,#+0
   \   000000CC   0x201C             MOVS     R0,#+28
   \   000000CE   0x.... 0x....      BL       GpioSet
   \   000000D2   0xE00E             B        ??Motor_control_8
     76                  }
     77              
     78                  else
     79                  {
     80          //          Motor_Out_R=0;
     81          //          forward_L;//正转
     82                      Motor_Out_R = -Motor_Out_R;
   \                     ??Motor_control_7: (+1)
   \   000000D4   0x4815             LDR      R0,??Motor_control_0+0x14
   \   000000D6   0x6800             LDR      R0,[R0, #+0]
   \   000000D8   0x2180             MOVS     R1,#+128
   \   000000DA   0x0609             LSLS     R1,R1,#+24       ;; #-2147483648
   \   000000DC   0x4048             EORS     R0,R0,R1
   \   000000DE   0x4913             LDR      R1,??Motor_control_0+0x14
   \   000000E0   0x6008             STR      R0,[R1, #+0]
     83                      reversal_R;
   \   000000E2   0x2100             MOVS     R1,#+0
   \   000000E4   0x2024             MOVS     R0,#+36
   \   000000E6   0x.... 0x....      BL       GpioSet
   \   000000EA   0x2101             MOVS     R1,#+1
   \   000000EC   0x201C             MOVS     R0,#+28
   \   000000EE   0x.... 0x....      BL       GpioSet
     84                  }
     85              
     86          //    forward_L;
     87          //    forward_R;
     88              
     89                  /* 电机正反转控制 -------- END ------------------------------- */  
     90                  change_L((uint32)Motor_Out_L);
   \                     ??Motor_control_8: (+1)
   \   000000F2   0x480B             LDR      R0,??Motor_control_0+0x8
   \   000000F4   0x6800             LDR      R0,[R0, #+0]
   \   000000F6   0x.... 0x....      BL       __aeabi_f2uiz
   \   000000FA   0x0002             MOVS     R2,R0
   \   000000FC   0x2101             MOVS     R1,#+1
   \   000000FE   0x2002             MOVS     R0,#+2
   \   00000100   0x.... 0x....      BL       FTM_PwmDuty
     91                  change_R((uint32)Motor_Out_R);
   \   00000104   0x4809             LDR      R0,??Motor_control_0+0x14
   \   00000106   0x6800             LDR      R0,[R0, #+0]
   \   00000108   0x.... 0x....      BL       __aeabi_f2uiz
   \   0000010C   0x0002             MOVS     R2,R0
   \   0000010E   0x2100             MOVS     R1,#+0
   \   00000110   0x2002             MOVS     R0,#+2
   \   00000112   0x.... 0x....      BL       FTM_PwmDuty
     92              //DataScope_Get_Channel_Data(Motor_Out_R,3);
     93          }
   \   00000116   0xBD01             POP      {R0,PC}          ;; return
   \                     ??Motor_control_0:
   \   00000118   0x........         DC32     Direction_Control_Output_L
   \   0000011C   0x........         DC32     Speed_Control_Output_L
   \   00000120   0x........         DC32     Motor_Out_L
   \   00000124   0x........         DC32     Direction_Control_Output_R
   \   00000128   0x........         DC32     Speed_Control_Output_R
   \   0000012C   0x........         DC32     Motor_Out_R
   \   00000130   0x........         DC32     Motor_Max
   \   00000134   0x........         DC32     Motor_Min
     94          
     95          
     96          /**
     97            * 简介
     98            *     直道与弯道的处理方法  A2 57且A0<7
     99            * 备注
    100            *
    101            */
    102          //void  Motor_Out_control(void)
    103          //{
    104          //    if( ((AD_inductor[2] >= AD_2_Max) && (AD_inductor[0] <= AD_0_Min)) ||((AD_inductor[0] >= AD_0_Max) && (AD_inductor[2] <= AD_2_Min)))//调节范围
    105          //    {
    106          //          Motor_Out_L = Wangdao_Speed_Output - Direction_Control_Output;
    107          //          Motor_Out_R = Wangdao_Speed_Output + Direction_Control_Output;
    108          //          LED_1_ON;
    109          //    }
    110          //    else
    111          //    {
    112          //          Motor_Out_L = Speed_Control_Output - Direction_Control_Output;
    113          //          Motor_Out_R = Speed_Control_Output + Direction_Control_Output;
    114          //    }
    115          //    
    116          //}
    117          
    118          //void  Motor_Out_control(void)
    119          //{
    120          //    if( (AD_inductor[0] >= AD_0_Min) && (AD_inductor[0] <= AD_0_Max) && (AD_inductor[2] >= AD_2_Min) && (AD_inductor[2] <= AD_2_Max))//调节范围
    121          //    {
    122          //          Motor_Out_L = Wangdao_Speed_Output - Direction_Control_Output;
    123          //          Motor_Out_R = Wangdao_Speed_Output + Direction_Control_Output;
    124          //    }
    125          //    else
    126          //    {
    127          //          Motor_Out_L = Speed_Control_Output - Direction_Control_Output;
    128          //          Motor_Out_R = Speed_Control_Output + Direction_Control_Output;
    129          //    }
    130          //    
    131          //}
    132          /**
    133            * 简介
    134            *     电机控制程序
    135            * 备注
    136            *
    137            */
    138          //void Motor_control(void)
    139          //{
    140          //    Motor_Out_L = Direction_Control_Output_L;
    141          //    Motor_Out_R = Direction_Control_Output_R;
    142          //  
    143          ////    Motor_Out_L = Speed_Control_Output +Direction_Control_Output;
    144          ////    Motor_Out_R = Speed_Control_Output + Direction_Control_Output;
    145          ////    Motor_Out_control();
    146          //  
    147          //  
    148          //    /* 电机启动PWM控制 ------------------------------------------------------- */
    149          //    //左电机控制
    150          //    if (Motor_Out_L > 0)
    151          //    {
    152          //        Motor_Out_L += DEAD_L; //加上启动基数
    153          //        if (Motor_Out_L > Motor_Max)
    154          //            Motor_Out_L = Motor_Max;
    155          //    }
    156          //    else if (Motor_Out_L < 0)
    157          //    {
    158          //        Motor_Out_L -= DEAD_L;
    159          //        if (Motor_Out_L < -Motor_Max)
    160          //            Motor_Out_L = -Motor_Max;
    161          //    }
    162          //
    163          //    //右电机控制
    164          //    if (Motor_Out_R > 0)
    165          //    {
    166          //        Motor_Out_R += DEAD_R;
    167          //        if (Motor_Out_R > Motor_Max)
    168          //            Motor_Out_R = Motor_Max;
    169          //    }
    170          //    else if (Motor_Out_R < 0)
    171          //    {
    172          //        Motor_Out_R -= DEAD_R;
    173          //        if (Motor_Out_R < -Motor_Max)
    174          //            Motor_Out_R = -Motor_Max;
    175          //    }
    176          //    /* 电机启动PWM控制 -------- END ------------------------------------------ */
    177          //
    178          //        /* 电机正反转控制 -------------------------------------------- */
    179          ////        //左正反转控制
    180          ////        if (Motor_Out_L > 0)
    181          ////        {
    182          ////            forward_L;//正转
    183          ////        }
    184          ////    
    185          ////        else
    186          ////        {
    187          ////            Motor_Out_L = -Motor_Out_L;
    188          ////            reversal_L;//反转
    189          ////        }
    190          ////
    191          ////        //右正反转控制
    192          ////        if (Motor_Out_R > 0)
    193          ////        {
    194          ////            forward_R;
    195          ////        }
    196          ////    
    197          ////        else
    198          ////        {
    199          ////            Motor_Out_R = -Motor_Out_R;
    200          ////            reversal_R;
    201          ////        }
    202          //    
    203          //    forward_L;
    204          //    forward_R;
    205          //    
    206          //        /* 电机正反转控制 -------- END ------------------------------- */
    207          //  
    208          //        
    209          //
    210          //        change_L((uint32)Motor_Out_L);
    211          //        change_R((uint32)Motor_Out_R);
    212          //
    213          //
    214          //        //测试用
    215          ////        forward_L//正转
    216          ////        forward_R
    217          ////        change_L(PWM)
    218          ////        change_R(PWM)
    219          //        
    220          //    //DataScope_Get_Channel_Data(Motor_Out_R,3);
    221          //}
    222          //
    223          //
    224          //
    225          //
    226          //
    227          //
    228          
    229          
    230          

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       8   Motor_control
         8   -> FTM_PwmDuty
         8   -> GpioSet
         8   -> __aeabi_f2uiz
         8   -> __aeabi_fadd
         8 __aeabi_cfcmple
         8 __aeabi_cfrcmple


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  AD_0_Max
       4  AD_0_Min
       4  AD_2_Max
       4  AD_2_Min
       4  DEAD_L
       4  DEAD_R
       4  Motor_Max
       4  Motor_Min
       4  Motor_Out_L
       4  Motor_Out_R
     312  Motor_control
       4  Wangdao_Speed_Output

 
  12 bytes in section .bss
  32 bytes in section .data
 312 bytes in section .text
 
 312 bytes of CODE memory
  44 bytes of DATA memory

Errors: none
Warnings: none
