###############################################################################
#
# IAR ANSI C/C++ Compiler V7.40.2.8542/W32 for ARM        01/May/2018  16:13:26
# Copyright 1999-2015 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  H:\智能车程序2018\电磁三轮――ZS\5.1\device\C\spi.c
#    Command line =  
#        H:\智能车程序2018\电磁三轮――ZS\5.1\device\C\spi.c -D IAR -D
#        TWR_K60N512 -D _DLIB_FILE_DESCRIPTOR -lCN
#        H:\智能车程序2018\电磁三轮――ZS\5.1\iar\KEA_128_FLASH\List\ -lB
#        H:\智能车程序2018\电磁三轮――ZS\5.1\iar\KEA_128_FLASH\List\ -o
#        H:\智能车程序2018\电磁三轮――ZS\5.1\iar\KEA_128_FLASH\Obj\ --no_cse
#        --no_unroll --no_inline --no_code_motion --no_tbaa --no_clustering
#        --no_scheduling --debug --endian=little --cpu=Cortex-M0+ -e --fpu=None
#        --dlib_config F:\IAR安装包\arm\INC\c\DLib_Config_Normal.h -I
#        H:\智能车程序2018\电磁三轮――ZS\5.1\iar\..\device\H\ -I
#        H:\智能车程序2018\电磁三轮――ZS\5.1\iar\..\user\H\ -I
#        H:\智能车程序2018\电磁三轮――ZS\5.1\iar\..\system\ -I
#        H:\智能车程序2018\电磁三轮――ZS\5.1\iar\..\lib\H\ -I
#        H:\智能车程序2018\电磁三轮――ZS\5.1\iar\..\system\coreSupport\ -On
#    List file    =  
#        H:\智能车程序2018\电磁三轮――ZS\5.1\iar\KEA_128_FLASH\List\spi.lst
#    Object file  =  
#        H:\智能车程序2018\电磁三轮――ZS\5.1\iar\KEA_128_FLASH\Obj\spi.o
#
###############################################################################

H:\智能车程序2018\电磁三轮――ZS\5.1\device\C\spi.c
      1          /**
      2            ******************************************************************************
      3            * COPYRIGHT NOTICE
      4            * Copyright (c) 2018,华北科技学院
      5            * All rights reserved.
      6            *
      7            * 文件名称：    spi.c
      8            * 文件标识：
      9            * 摘    要：
     10            *
     11            * 当前版本：     1.0
     12            * 负    责：     韩志伟
     13            * 时    间：     2018年1月23日 10:55:52
     14            ******************************************************************************
     15            */
     16          
     17          #include "spi.h"
     18          
     19          

   \                                 In section .data, align 4
     20          SPI_Type* SPIN[2] = SPI_BASES; //定义两个指针数组保存 SPIx 的地址
   \                     SPIN:
   \   00000000   0x40076000         DC32 40076000H, 40077000H
   \              0x40077000   
     21          
     22          
     23          
     24          #define SPI_TX_WAIT(SPIn)	while( !( SPIN[SPIn]->S & SPI_S_SPTEF_MASK ) )  //等待发送完成
     25          #define SPI_RX_WAIT(SPIn)   while( !( SPIN[SPIn]->S & SPI_S_SPRF_MASK ) )   //等待接收数据
     26          
     27          
     28          //-------------------------------------------------------------------------------------------------------------------
     29          //  @brief      SPI初始化
     30          //  @param      spin            选择SPI模块   有spi0 spi1
     31          //  @param      pcs             选择片选引脚
     32          //  @param      master          选择主从模式
     33          //  @param      baud            选择通信速率
     34          //  @return     				返回真实波特率
     35          //  @since      v2.0
     36          //  Sample usage:       		uint32 baud = spi_init(spi0,USE_PCS,MASTER,1*1000*1000);              //初始化SPI,主机模式, 波特率为1M ,返回真实波特率到baud变量
     37          //-------------------------------------------------------------------------------------------------------------------

   \                                 In section .text, align 2, keep-with-next
     38          uint32 spi_init(SPIn_e spin, SPI_PCSn_e pcs, SPI_CFG master,uint32 baud)
     39          {
   \                     spi_init: (+1)
   \   00000000   0xB5FF             PUSH     {R0-R7,LR}
   \   00000002   0xB08D             SUB      SP,SP,#+52
     40              uint8 i,j;
     41              uint8 sppr,spr;
     42              uint32 Scaler[] = {2,4,8,16,32,64,128,256,512};
   \   00000004   0xA803             ADD      R0,SP,#+12
   \   00000006   0x....             LDR      R1,??DataTable1
   \   00000008   0x2224             MOVS     R2,#+36
   \   0000000A   0x.... 0x....      BL       __aeabi_memcpy4
     43              uint8  Prescaler[] = {1,2,3,4,5,6,7,8};
   \   0000000E   0xA801             ADD      R0,SP,#+4
   \   00000010   0x....             LDR      R1,??DataTable1_1
   \   00000012   0xC90C             LDM      R1!,{R2,R3}
   \   00000014   0xC00C             STM      R0!,{R2,R3}
   \   00000016   0x3908             SUBS     R1,R1,#+8
   \   00000018   0x3808             SUBS     R0,R0,#+8
     44              uint32 min_diff, diff;
     45          
     46              if(spi0 == spin)
   \   0000001A   0xA80D             ADD      R0,SP,#+52
   \   0000001C   0x7800             LDRB     R0,[R0, #+0]
   \   0000001E   0x2800             CMP      R0,#+0
   \   00000020   0xD10D             BNE      ??spi_init_0
     47              {
     48                  SIM->SCGC |= SIM_SCGC_SPI0_MASK;    //开启时钟
   \   00000022   0x....             LDR      R0,??DataTable1_2  ;; 0x40048014
   \   00000024   0x6800             LDR      R0,[R0, #+0]
   \   00000026   0x2180             MOVS     R1,#+128
   \   00000028   0x02C9             LSLS     R1,R1,#+11       ;; #+262144
   \   0000002A   0x4301             ORRS     R1,R1,R0
   \   0000002C   0x....             LDR      R0,??DataTable1_2  ;; 0x40048014
   \   0000002E   0x6001             STR      R1,[R0, #+0]
     49                  //引脚复用
     50                  if(B2 == SPI0_SCK_PIN)
     51                  {
     52                      SIM->PINSEL &= ~(uint32)SIM_PINSEL_SPI0PS_MASK;
   \   00000030   0x....             LDR      R0,??DataTable1_3  ;; 0x4004800c
   \   00000032   0x6800             LDR      R0,[R0, #+0]
   \   00000034   0x2140             MOVS     R1,#+64
   \   00000036   0x4388             BICS     R0,R0,R1
   \   00000038   0x....             LDR      R1,??DataTable1_3  ;; 0x4004800c
   \   0000003A   0x6008             STR      R0,[R1, #+0]
   \   0000003C   0xE00D             B        ??spi_init_1
     53                  }
     54                  else
     55                  {
     56                      SIM->PINSEL |= SIM_PINSEL_SPI0PS_MASK;
     57                  }
     58              }
     59              else
     60              {
     61                  SIM->SCGC |= SIM_SCGC_SPI1_MASK;    //开启时钟
   \                     ??spi_init_0: (+1)
   \   0000003E   0x....             LDR      R0,??DataTable1_2  ;; 0x40048014
   \   00000040   0x6800             LDR      R0,[R0, #+0]
   \   00000042   0x2180             MOVS     R1,#+128
   \   00000044   0x0309             LSLS     R1,R1,#+12       ;; #+524288
   \   00000046   0x4301             ORRS     R1,R1,R0
   \   00000048   0x....             LDR      R0,??DataTable1_2  ;; 0x40048014
   \   0000004A   0x6001             STR      R1,[R0, #+0]
     62                  //引脚复用
     63                  if(D0 == SPI1_SCK_PIN)
     64                  {
     65                      SIM->PINSEL1 &= ~(uint32)SIM_PINSEL1_SPI1PS_MASK;
     66                  }
     67                  else
     68                  {
     69                      SIM->PINSEL1 |= SIM_PINSEL1_SPI1PS_MASK;
   \   0000004C   0x....             LDR      R0,??DataTable1_4  ;; 0x40048010
   \   0000004E   0x6800             LDR      R0,[R0, #+0]
   \   00000050   0x2180             MOVS     R1,#+128
   \   00000052   0x0109             LSLS     R1,R1,#+4        ;; #+2048
   \   00000054   0x4301             ORRS     R1,R1,R0
   \   00000056   0x....             LDR      R0,??DataTable1_4  ;; 0x40048010
   \   00000058   0x6001             STR      R1,[R0, #+0]
     70                  }
     71              }
     72              //根据主从机模式设置工作模式 最大波特率为总线时钟的二分之一
     73              if(master == MASTER)
   \                     ??spi_init_1: (+1)
   \   0000005A   0xA80F             ADD      R0,SP,#+60
   \   0000005C   0x7800             LDRB     R0,[R0, #+0]
   \   0000005E   0x2800             CMP      R0,#+0
   \   00000060   0xD155             BNE      ??spi_init_2
     74              {
     75                  min_diff = ~0;
   \   00000062   0x2000             MOVS     R0,#+0
   \   00000064   0x43C0             MVNS     R0,R0            ;; #-1
   \   00000066   0x0006             MOVS     R6,R0
     76                  for(i=0; i<9; i++)
   \   00000068   0x2000             MOVS     R0,#+0
   \   0000006A   0x0005             MOVS     R5,R0
   \                     ??spi_init_3: (+1)
   \   0000006C   0xB2ED             UXTB     R5,R5
   \   0000006E   0x2D09             CMP      R5,#+9
   \   00000070   0xDA26             BGE      ??spi_init_4
     77                  {
     78                      for(j=0; j<8; j++)
   \   00000072   0x2000             MOVS     R0,#+0
   \   00000074   0x0004             MOVS     R4,R0
   \                     ??spi_init_5: (+1)
   \   00000076   0xB2E4             UXTB     R4,R4
   \   00000078   0x2C08             CMP      R4,#+8
   \   0000007A   0xDA1F             BGE      ??spi_init_6
     79                      {
     80                          diff = abs(bus_clk_khz*1000/(Prescaler[j]*Scaler[i]) - baud);
   \   0000007C   0x....             LDR      R0,??DataTable1_5
   \   0000007E   0x6800             LDR      R0,[R0, #+0]
   \   00000080   0x21FA             MOVS     R1,#+250
   \   00000082   0x0089             LSLS     R1,R1,#+2        ;; #+1000
   \   00000084   0x4348             MULS     R0,R1,R0
   \   00000086   0xA901             ADD      R1,SP,#+4
   \   00000088   0xB2E4             UXTB     R4,R4
   \   0000008A   0x5D09             LDRB     R1,[R1, R4]
   \   0000008C   0xAA03             ADD      R2,SP,#+12
   \   0000008E   0xB2ED             UXTB     R5,R5
   \   00000090   0x2304             MOVS     R3,#+4
   \   00000092   0x436B             MULS     R3,R5,R3
   \   00000094   0x58D2             LDR      R2,[R2, R3]
   \   00000096   0x4351             MULS     R1,R2,R1
   \   00000098   0x.... 0x....      BL       __aeabi_uidiv
   \   0000009C   0x9910             LDR      R1,[SP, #+64]
   \   0000009E   0x1A40             SUBS     R0,R0,R1
   \   000000A0   0x.... 0x....      BL       abs
   \   000000A4   0x0007             MOVS     R7,R0
     81                          if(min_diff > diff)
   \   000000A6   0x42B7             CMP      R7,R6
   \   000000A8   0xD206             BCS      ??spi_init_7
     82                          {
     83                              //更新最佳参数
     84                              sppr = j;
   \   000000AA   0x4668             MOV      R0,SP
   \   000000AC   0x7044             STRB     R4,[R0, #+1]
     85                              spr = i;
   \   000000AE   0x4668             MOV      R0,SP
   \   000000B0   0x7005             STRB     R5,[R0, #+0]
     86                              min_diff = diff;
   \   000000B2   0x003E             MOVS     R6,R7
     87          
     88                              if(min_diff == 0)	break;//刚好匹配
   \   000000B4   0x2E00             CMP      R6,#+0
   \   000000B6   0xD001             BEQ      ??spi_init_6
     89                          }
     90                      }
   \                     ??spi_init_7: (+1)
   \   000000B8   0x1C64             ADDS     R4,R4,#+1
   \   000000BA   0xE7DC             B        ??spi_init_5
     91                  }
   \                     ??spi_init_6: (+1)
   \   000000BC   0x1C6D             ADDS     R5,R5,#+1
   \   000000BE   0xE7D5             B        ??spi_init_3
     92          
     93                  SPIN[spin]->C1 = (0
     94                                    | (pcs << SPI_C1_SSOE_SHIFT)          //配合C2_MODFEN位选择片选引脚的功能
     95                                    | SPI_C1_SPE_MASK                     //SPI 系统使能
     96                                    | SPI_C1_MSTR_MASK                    //SPI 模块配置为SPI 主机
     97                                    //| SPI_C1_SPIE_MASK                  //SPRF 或MODF 为1 时请求硬件中断
     98                                    //| SPI_C1_SPTIE_MASK                 //SPTEF 为1 时，请求硬件中断。
     99                                    | SPI_C1_CPOL_MASK                  //0：高电平有效SPI 时钟（空闲时为低电平） 1：低电平有效SPI 时钟（空闲时为高电平）
    100                                    | SPI_C1_CPHA_MASK                            //0:SPSCK 上的第一个边沿出现在数据传输的第一个周期的中间 1:SPSCK 上的第一个边沿出现在数据传输的第一个周期的开始
    101                                    //| SPI_C1_LSBFE_MASK                 //1:SPI 串行数据传输从最低有效位开始
    102                                    );
   \                     ??spi_init_4: (+1)
   \   000000C0   0xA80E             ADD      R0,SP,#+56
   \   000000C2   0x7800             LDRB     R0,[R0, #+0]
   \   000000C4   0x0041             LSLS     R1,R0,#+1
   \   000000C6   0x205C             MOVS     R0,#+92
   \   000000C8   0x4308             ORRS     R0,R0,R1
   \   000000CA   0x....             LDR      R1,??DataTable1_6
   \   000000CC   0xAA0D             ADD      R2,SP,#+52
   \   000000CE   0x7812             LDRB     R2,[R2, #+0]
   \   000000D0   0x2304             MOVS     R3,#+4
   \   000000D2   0x435A             MULS     R2,R3,R2
   \   000000D4   0x5889             LDR      R1,[R1, R2]
   \   000000D6   0x7008             STRB     R0,[R1, #+0]
    103                  SPIN[spin]->C2 = pcs << SPI_C2_MODFEN_SHIFT;            //配合C1_SSOE位选择片选引脚的功能
   \   000000D8   0xA80E             ADD      R0,SP,#+56
   \   000000DA   0x7800             LDRB     R0,[R0, #+0]
   \   000000DC   0x0100             LSLS     R0,R0,#+4
   \   000000DE   0x....             LDR      R1,??DataTable1_6
   \   000000E0   0xAA0D             ADD      R2,SP,#+52
   \   000000E2   0x7812             LDRB     R2,[R2, #+0]
   \   000000E4   0x2304             MOVS     R3,#+4
   \   000000E6   0x435A             MULS     R2,R3,R2
   \   000000E8   0x5889             LDR      R1,[R1, R2]
   \   000000EA   0x7048             STRB     R0,[R1, #+1]
    104                  SPIN[spin]->BR = SPI_BR_SPR(spr) | SPI_BR_SPPR(sppr);   //设置波特率参数
   \   000000EC   0x4668             MOV      R0,SP
   \   000000EE   0x7800             LDRB     R0,[R0, #+0]
   \   000000F0   0x0701             LSLS     R1,R0,#+28       ;; ZeroExtS R1,R0,#+28,#+28
   \   000000F2   0x0F09             LSRS     R1,R1,#+28
   \   000000F4   0x4668             MOV      R0,SP
   \   000000F6   0x7840             LDRB     R0,[R0, #+1]
   \   000000F8   0x0102             LSLS     R2,R0,#+4
   \   000000FA   0x2070             MOVS     R0,#+112
   \   000000FC   0x4010             ANDS     R0,R0,R2
   \   000000FE   0x4308             ORRS     R0,R0,R1
   \   00000100   0x....             LDR      R1,??DataTable1_6
   \   00000102   0xAA0D             ADD      R2,SP,#+52
   \   00000104   0x7812             LDRB     R2,[R2, #+0]
   \   00000106   0x2304             MOVS     R3,#+4
   \   00000108   0x435A             MULS     R2,R3,R2
   \   0000010A   0x5889             LDR      R1,[R1, R2]
   \   0000010C   0x7088             STRB     R0,[R1, #+2]
    105              }
    106              else{}
    107              return (bus_clk_khz*1000/Prescaler[sppr]/Scaler[spr]);      //返回实际波特率
   \                     ??spi_init_2: (+1)
   \   0000010E   0x....             LDR      R0,??DataTable1_5
   \   00000110   0x6800             LDR      R0,[R0, #+0]
   \   00000112   0x21FA             MOVS     R1,#+250
   \   00000114   0x0089             LSLS     R1,R1,#+2        ;; #+1000
   \   00000116   0x4348             MULS     R0,R1,R0
   \   00000118   0xA901             ADD      R1,SP,#+4
   \   0000011A   0x466A             MOV      R2,SP
   \   0000011C   0x7852             LDRB     R2,[R2, #+1]
   \   0000011E   0x5C89             LDRB     R1,[R1, R2]
   \   00000120   0x.... 0x....      BL       __aeabi_uidiv
   \   00000124   0xA903             ADD      R1,SP,#+12
   \   00000126   0x466A             MOV      R2,SP
   \   00000128   0x7812             LDRB     R2,[R2, #+0]
   \   0000012A   0x2304             MOVS     R3,#+4
   \   0000012C   0x435A             MULS     R2,R3,R2
   \   0000012E   0x5889             LDR      R1,[R1, R2]
   \   00000130   0x.... 0x....      BL       __aeabi_uidiv
   \   00000134   0xB011             ADD      SP,SP,#+68
   \   00000136   0xBDF0             POP      {R4-R7,PC}       ;; return
    108          }
    109          
    110          //-------------------------------------------------------------------------------------------------------------------
    111          //  @brief      SPI发送接收函数
    112          //  @param      spin            选择SPI模块   有spi0 spi1
    113          //  @param      modata          发送的数据缓冲区地址(不需要接收则传 NULL)
    114          //  @param      midata          发送数据时接收到的数据的存储地址(不需要接收则传 NULL)
    115          //  @param      len             发送的字节数
    116          //  @return     void
    117          //  @since      v2.0
    118          //  Sample usage:       		spi_mosi(spi0,buf,buf,1);    //发送buff的内容，并接收到buf里，长度为1字节
    119          //-------------------------------------------------------------------------------------------------------------------

   \                                 In section .text, align 2, keep-with-next
    120          void spi_mosi(SPIn_e spin, SPI_PCSn_e pcs, uint8 *modata, uint8 *midata, uint32 len)
    121          {
   \                     spi_mosi: (+1)
   \   00000000   0xB5F0             PUSH     {R4-R7,LR}
   \   00000002   0x9C05             LDR      R4,[SP, #+20]
    122              while(len)
   \                     ??spi_mosi_0: (+1)
   \   00000004   0x2C00             CMP      R4,#+0
   \   00000006   0xD02C             BEQ      ??spi_mosi_1
    123              {
    124                  SPI_TX_WAIT(spin);
   \                     ??spi_mosi_2: (+1)
   \   00000008   0x....             LDR      R5,??DataTable1_6
   \   0000000A   0xB2C0             UXTB     R0,R0
   \   0000000C   0x2604             MOVS     R6,#+4
   \   0000000E   0x4346             MULS     R6,R0,R6
   \   00000010   0x59AD             LDR      R5,[R5, R6]
   \   00000012   0x78ED             LDRB     R5,[R5, #+3]
   \   00000014   0x06AD             LSLS     R5,R5,#+26
   \   00000016   0xD5F7             BPL      ??spi_mosi_2
    125                  SPIN[spin]->D = *modata;
   \   00000018   0x7815             LDRB     R5,[R2, #+0]
   \   0000001A   0x....             LDR      R6,??DataTable1_6
   \   0000001C   0xB2C0             UXTB     R0,R0
   \   0000001E   0x2704             MOVS     R7,#+4
   \   00000020   0x4347             MULS     R7,R0,R7
   \   00000022   0x59F6             LDR      R6,[R6, R7]
   \   00000024   0x7175             STRB     R5,[R6, #+5]
    126                  SPI_RX_WAIT(spin);
   \                     ??spi_mosi_3: (+1)
   \   00000026   0x....             LDR      R5,??DataTable1_6
   \   00000028   0xB2C0             UXTB     R0,R0
   \   0000002A   0x2604             MOVS     R6,#+4
   \   0000002C   0x4346             MULS     R6,R0,R6
   \   0000002E   0x59AD             LDR      R5,[R5, R6]
   \   00000030   0x78ED             LDRB     R5,[R5, #+3]
   \   00000032   0x062D             LSLS     R5,R5,#+24
   \   00000034   0xD5F7             BPL      ??spi_mosi_3
    127                  if(midata != NULL)  *midata = SPIN[spin]->D;
   \   00000036   0x2B00             CMP      R3,#+0
   \   00000038   0xD007             BEQ      ??spi_mosi_4
   \   0000003A   0x....             LDR      R5,??DataTable1_6
   \   0000003C   0xB2C0             UXTB     R0,R0
   \   0000003E   0x2604             MOVS     R6,#+4
   \   00000040   0x4346             MULS     R6,R0,R6
   \   00000042   0x59AD             LDR      R5,[R5, R6]
   \   00000044   0x796D             LDRB     R5,[R5, #+5]
   \   00000046   0x701D             STRB     R5,[R3, #+0]
   \   00000048   0xE005             B        ??spi_mosi_5
    128                  else                SPIN[spin]->D;
   \                     ??spi_mosi_4: (+1)
   \   0000004A   0x....             LDR      R5,??DataTable1_6
   \   0000004C   0xB2C0             UXTB     R0,R0
   \   0000004E   0x2604             MOVS     R6,#+4
   \   00000050   0x4346             MULS     R6,R0,R6
   \   00000052   0x59AD             LDR      R5,[R5, R6]
   \   00000054   0x796D             LDRB     R5,[R5, #+5]
    129                  len--;
   \                     ??spi_mosi_5: (+1)
   \   00000056   0x1E64             SUBS     R4,R4,#+1
    130                  modata++;
   \   00000058   0x1C52             ADDS     R2,R2,#+1
    131                  if(midata != NULL)  midata++;
   \   0000005A   0x2B00             CMP      R3,#+0
   \   0000005C   0xD0D2             BEQ      ??spi_mosi_0
   \   0000005E   0x1C5B             ADDS     R3,R3,#+1
   \   00000060   0xE7D0             B        ??spi_mosi_0
    132              }
    133          }
   \                     ??spi_mosi_1: (+1)
   \   00000062   0xBDF0             POP      {R4-R7,PC}       ;; return
    134          
    135          //-------------------------------------------------------------------------------------------------------------------
    136          //  @brief      SPI发送接收函数
    137          //  @param      spin            选择SPI模块   有spi0 spi1
    138          //  @param      mocmd           发送的命令缓冲区地址(不需要接收则传 NULL)
    139          //  @param      micmd           发送命令时接收到的数据的存储地址(不需要接收则传 NULL)
    140          //  @param      modata          发送的数据缓冲区地址(不需要接收则传 NULL)
    141          //  @param      midata          发送数据时接收到的数据的存储地址(不需要接收则传 NULL)
    142          //  @param      cmdlen          发送命令的字节数
    143          //  @param      len             发送数据的字节数
    144          //  @return     void
    145          //  @since      v2.0
    146          //  Sample usage:       		spi_mosi_cmd(spi0,cmd,NULL,buff,buff,1,2);    //发送cmd/buff的内容，不接收cmd发送时的数据，接收buff发送时的数据到buff里，长度分别为1、2字节
    147          //-------------------------------------------------------------------------------------------------------------------

   \                                 In section .text, align 2, keep-with-next
    148          void spi_mosi_cmd(SPIn_e spin, SPI_PCSn_e pcs, uint8 *mocmd , uint8 *micmd , uint8 *modata , uint8 *midata, uint32 cmdlen , uint32 len)
    149          {
   \                     spi_mosi_cmd: (+1)
   \   00000000   0xB5FE             PUSH     {R1-R7,LR}
   \   00000002   0xB082             SUB      SP,SP,#+8
   \   00000004   0x0004             MOVS     R4,R0
   \   00000006   0x9F0B             LDR      R7,[SP, #+44]
   \   00000008   0x9E0C             LDR      R6,[SP, #+48]
   \   0000000A   0x9D0D             LDR      R5,[SP, #+52]
    150              spi_mosi(spin,pcs,mocmd,micmd,cmdlen);
   \   0000000C   0x9600             STR      R6,[SP, #+0]
   \   0000000E   0x9B04             LDR      R3,[SP, #+16]
   \   00000010   0x9A03             LDR      R2,[SP, #+12]
   \   00000012   0x4668             MOV      R0,SP
   \   00000014   0x7A01             LDRB     R1,[R0, #+8]
   \   00000016   0x0020             MOVS     R0,R4
   \   00000018   0xB2C0             UXTB     R0,R0
   \   0000001A   0x.... 0x....      BL       spi_mosi
    151              spi_mosi(spin,pcs,modata,midata,len);
   \   0000001E   0x9500             STR      R5,[SP, #+0]
   \   00000020   0x003B             MOVS     R3,R7
   \   00000022   0x9A0A             LDR      R2,[SP, #+40]
   \   00000024   0x4668             MOV      R0,SP
   \   00000026   0x7A01             LDRB     R1,[R0, #+8]
   \   00000028   0x0020             MOVS     R0,R4
   \   0000002A   0xB2C0             UXTB     R0,R0
   \   0000002C   0x.... 0x....      BL       spi_mosi
    152          }
   \   00000030   0xB005             ADD      SP,SP,#+20
   \   00000032   0xBDF0             POP      {R4-R7,PC}       ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1:
   \   00000000   0x........         DC32     ?_0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_1:
   \   00000000   0x........         DC32     ?_1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_2:
   \   00000000   0x40048014         DC32     0x40048014

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_3:
   \   00000000   0x4004800C         DC32     0x4004800c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_4:
   \   00000000   0x40048010         DC32     0x40048010

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_5:
   \   00000000   0x........         DC32     bus_clk_khz

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_6:
   \   00000000   0x........         DC32     SPIN

   \                                 In section .rodata, align 4
   \                     ?_0:
   \   00000000   0x00000002         DC32 2, 4, 8, 16, 32, 64, 128, 256, 512
   \              0x00000004   
   \              0x00000008   
   \              0x00000010   
   \              0x00000020   
   \              0x00000040   
   \              0x00000080   
   \              0x00000100   
   \              0x00000200   

   \                                 In section .rodata, align 4
   \                     ?_1:
   \   00000000   0x01 0x02          DC8 1, 2, 3, 4, 5, 6, 7, 8
   \              0x03 0x04    
   \              0x05 0x06    
   \              0x07 0x08    
    153          
    154          

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      88   spi_init
        88   -> __aeabi_memcpy4
        88   -> abs
        88 __aeabi_uidiv
      20   spi_mosi
      40   spi_mosi_cmd
        40   -> spi_mosi


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable1
       4  ??DataTable1_1
       4  ??DataTable1_2
       4  ??DataTable1_3
       4  ??DataTable1_4
       4  ??DataTable1_5
       4  ??DataTable1_6
      36  ?_0
       8  ?_1
       8  SPIN
     312  spi_init
     100  spi_mosi
      52  spi_mosi_cmd

 
   8 bytes in section .data
  44 bytes in section .rodata
 492 bytes in section .text
 
 492 bytes of CODE  memory
  44 bytes of CONST memory
   8 bytes of DATA  memory

Errors: none
Warnings: none
