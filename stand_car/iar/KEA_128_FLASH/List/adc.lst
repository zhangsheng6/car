###############################################################################
#
# IAR ANSI C/C++ Compiler V7.40.2.8542/W32 for ARM        28/Sep/2018  18:57:59
# Copyright 1999-2015 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  I:\电磁程序-ZS\电磁直立-ZS\stand_ZS_9.28\device\C\adc.c
#    Command line =  
#        I:\电磁程序-ZS\电磁直立-ZS\stand_ZS_9.28\device\C\adc.c -D IAR -D
#        TWR_K60N512 -D _DLIB_FILE_DESCRIPTOR -D DA_OLED -lCN
#        I:\电磁程序-ZS\电磁直立-ZS\stand_ZS_9.28\iar\KEA_128_FLASH\List\ -lB
#        I:\电磁程序-ZS\电磁直立-ZS\stand_ZS_9.28\iar\KEA_128_FLASH\List\ -o
#        I:\电磁程序-ZS\电磁直立-ZS\stand_ZS_9.28\iar\KEA_128_FLASH\Obj\
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M0+ -e --fpu=None --dlib_config
#        F:\IAR安装包\arm\INC\c\DLib_Config_Normal.h -I
#        I:\电磁程序-ZS\电磁直立-ZS\stand_ZS_9.28\iar\..\device\H\ -I
#        I:\电磁程序-ZS\电磁直立-ZS\stand_ZS_9.28\iar\..\user\H\ -I
#        I:\电磁程序-ZS\电磁直立-ZS\stand_ZS_9.28\iar\..\system\ -I
#        I:\电磁程序-ZS\电磁直立-ZS\stand_ZS_9.28\iar\..\lib\H\ -I
#        I:\电磁程序-ZS\电磁直立-ZS\stand_ZS_9.28\iar\..\system\coreSupport\
#        -Ol
#    List file    =  
#        I:\电磁程序-ZS\电磁直立-ZS\stand_ZS_9.28\iar\KEA_128_FLASH\List\adc.lst
#    Object file  =  
#        I:\电磁程序-ZS\电磁直立-ZS\stand_ZS_9.28\iar\KEA_128_FLASH\Obj\adc.o
#
###############################################################################

I:\电磁程序-ZS\电磁直立-ZS\stand_ZS_9.28\device\C\adc.c
      1          /**
      2            ******************************************************************************
      3            * COPYRIGHT NOTICE
      4            * Copyright (c) 2018,华北科技学院
      5            * All rights reserved.
      6            *
      7            * 文件名称：     adc.c
      8            * 文件标识：
      9            * 摘    要：
     10            *
     11            * 当前版本：     1.0
     12            * 负    责：     韩志伟
     13            * 时    间：     2018年1月23日 10:55:52
     14            ******************************************************************************
     15            */
     16          
     17          #include "adc.h"
     18          
     19          

   \                                 In section .bss, align 2
     20          uint16 adcHold = 0;
   \                     adcHold:
   \   00000000                      DS8 2
     21          
     22          /**
     23            * 简介
     24            *     对adc引脚进行编码
     25            */

   \                                 In section .text, align 2, keep-with-next
     26          uint8 Change(PTX_n adcn_ch)
     27          {
   \                     Change: (+1)
   \   00000000   0xB500             PUSH     {LR}
   \   00000002   0x0001             MOVS     R1,R0
     28              uint8 shift = 0;
   \   00000004   0x2000             MOVS     R0,#+0
     29              switch (adcn_ch)
   \   00000006   0xB2C9             UXTB     R1,R1
   \   00000008   0x2900             CMP      R1,#+0
   \   0000000A   0xD01E             BEQ      ??Change_0
   \   0000000C   0x2901             CMP      R1,#+1
   \   0000000E   0xD01E             BEQ      ??Change_1
   \   00000010   0x2906             CMP      R1,#+6
   \   00000012   0xD01E             BEQ      ??Change_2
   \   00000014   0x2907             CMP      R1,#+7
   \   00000016   0xD01E             BEQ      ??Change_3
   \   00000018   0x2908             CMP      R1,#+8
   \   0000001A   0xD01E             BEQ      ??Change_4
   \   0000001C   0x2909             CMP      R1,#+9
   \   0000001E   0xD01E             BEQ      ??Change_5
   \   00000020   0x290A             CMP      R1,#+10
   \   00000022   0xD01E             BEQ      ??Change_6
   \   00000024   0x290B             CMP      R1,#+11
   \   00000026   0xD01E             BEQ      ??Change_7
   \   00000028   0x2910             CMP      R1,#+16
   \   0000002A   0xD01E             BEQ      ??Change_8
   \   0000002C   0x2911             CMP      R1,#+17
   \   0000002E   0xD01E             BEQ      ??Change_9
   \   00000030   0x2912             CMP      R1,#+18
   \   00000032   0xD01E             BEQ      ??Change_10
   \   00000034   0x2913             CMP      R1,#+19
   \   00000036   0xD01E             BEQ      ??Change_11
   \   00000038   0x292C             CMP      R1,#+44
   \   0000003A   0xD01E             BEQ      ??Change_12
   \   0000003C   0x292D             CMP      R1,#+45
   \   0000003E   0xD01E             BEQ      ??Change_13
   \   00000040   0x292E             CMP      R1,#+46
   \   00000042   0xD01E             BEQ      ??Change_14
   \   00000044   0x292F             CMP      R1,#+47
   \   00000046   0xD01E             BEQ      ??Change_15
   \   00000048   0xE01F             B        ??Change_16
     30              {
     31                case A0:
     32                  shift = 0;
   \                     ??Change_0: (+1)
   \   0000004A   0x2000             MOVS     R0,#+0
     33                  break;
   \   0000004C   0xE01E             B        ??Change_17
     34                case A1:
     35                  shift = 1;
   \                     ??Change_1: (+1)
   \   0000004E   0x2001             MOVS     R0,#+1
     36                  break;
   \   00000050   0xE01C             B        ??Change_17
     37                case A6:
     38                  shift = 2;
   \                     ??Change_2: (+1)
   \   00000052   0x2002             MOVS     R0,#+2
     39                  break;
   \   00000054   0xE01A             B        ??Change_17
     40                case A7:
     41                  shift = 3;
   \                     ??Change_3: (+1)
   \   00000056   0x2003             MOVS     R0,#+3
     42                  break;
   \   00000058   0xE018             B        ??Change_17
     43                case B0:
     44                  shift = 4;
   \                     ??Change_4: (+1)
   \   0000005A   0x2004             MOVS     R0,#+4
     45                  break;
   \   0000005C   0xE016             B        ??Change_17
     46                case B1:
     47                  shift = 5;
   \                     ??Change_5: (+1)
   \   0000005E   0x2005             MOVS     R0,#+5
     48                  break;
   \   00000060   0xE014             B        ??Change_17
     49                case B2:
     50                  shift = 6;
   \                     ??Change_6: (+1)
   \   00000062   0x2006             MOVS     R0,#+6
     51                  break;
   \   00000064   0xE012             B        ??Change_17
     52                case B3:
     53                  shift = 7;
   \                     ??Change_7: (+1)
   \   00000066   0x2007             MOVS     R0,#+7
     54                  break;
   \   00000068   0xE010             B        ??Change_17
     55          
     56                case C0:
     57                  shift = 8;
   \                     ??Change_8: (+1)
   \   0000006A   0x2008             MOVS     R0,#+8
     58                  break;
   \   0000006C   0xE00E             B        ??Change_17
     59                case C1:
     60                  shift = 9;
   \                     ??Change_9: (+1)
   \   0000006E   0x2009             MOVS     R0,#+9
     61                  break;
   \   00000070   0xE00C             B        ??Change_17
     62                case C2:
     63                  shift = 10;
   \                     ??Change_10: (+1)
   \   00000072   0x200A             MOVS     R0,#+10
     64                  break;
   \   00000074   0xE00A             B        ??Change_17
     65                case C3:
     66                  shift = 11;
   \                     ??Change_11: (+1)
   \   00000076   0x200B             MOVS     R0,#+11
     67                  break;
   \   00000078   0xE008             B        ??Change_17
     68          
     69                case F4:
     70                  shift = 12;
   \                     ??Change_12: (+1)
   \   0000007A   0x200C             MOVS     R0,#+12
     71                  break;
   \   0000007C   0xE006             B        ??Change_17
     72                case F5:
     73                  shift = 13;
   \                     ??Change_13: (+1)
   \   0000007E   0x200D             MOVS     R0,#+13
     74                  break;
   \   00000080   0xE004             B        ??Change_17
     75                case F6:
     76                  shift = 14;
   \                     ??Change_14: (+1)
   \   00000082   0x200E             MOVS     R0,#+14
     77                  break;
   \   00000084   0xE002             B        ??Change_17
     78                case F7:
     79                  shift = 15;
   \                     ??Change_15: (+1)
   \   00000086   0x200F             MOVS     R0,#+15
     80                  break;
   \   00000088   0xE000             B        ??Change_17
     81          
     82                default:
     83                  shift = 0;
   \                     ??Change_16: (+1)
   \   0000008A   0x2000             MOVS     R0,#+0
     84                  break;
     85              }
     86          
     87              return shift;
   \                     ??Change_17: (+1)
   \   0000008C   0xB2C0             UXTB     R0,R0
   \   0000008E   0xBD00             POP      {PC}             ;; return
     88          }
     89          
     90          /**
     91            * 简介
     92            *     ADC 初始化
     93            */

   \                                 In section .text, align 2, keep-with-next
     94          void ADC_Init()
     95          {
     96          
     97              SIM->SCGC |= SIM_SCGC_ADC_MASK;       //开启ADC时钟
   \                     ADC_Init: (+1)
   \   00000000   0x....             LDR      R0,??DataTable4  ;; 0x40048014
   \   00000002   0x6800             LDR      R0,[R0, #+0]
   \   00000004   0x2180             MOVS     R1,#+128
   \   00000006   0x0589             LSLS     R1,R1,#+22       ;; #+536870912
   \   00000008   0x4301             ORRS     R1,R1,R0
   \   0000000A   0x....             LDR      R0,??DataTable4  ;; 0x40048014
   \   0000000C   0x6001             STR      R1,[R0, #+0]
     98          
     99              ADC->APCTL1 &= 0; //所有引脚 禁用ADC功能
   \   0000000E   0x....             LDR      R0,??DataTable4_1  ;; 0x4003b018
   \   00000010   0x6800             LDR      R0,[R0, #+0]
   \   00000012   0x2000             MOVS     R0,#+0
   \   00000014   0x....             LDR      R1,??DataTable4_1  ;; 0x4003b018
   \   00000016   0x6008             STR      R0,[R1, #+0]
    100          
    101              ADC->SC3 = ( 0
    102                           | ADC_SC3_ADIV(1)           //分频系数，=输入时钟
    103                         //| ADC_SC3_MODE(bit)         //分辨率
    104                           | ADC_SC3_ADICLK(0)         //使用总线时钟最为ADC得时钟源
    105                           | ADC_SC3_ADLSMP(1)         //长采样
    106                           | ADC_SC3_ADLPC(0)     //高速模式
    107                          );
   \   00000018   0x2030             MOVS     R0,#+48
   \   0000001A   0x....             LDR      R1,??DataTable4_2  ;; 0x4003b008
   \   0000001C   0x6008             STR      R0,[R1, #+0]
    108              ADC->SC2 = ( 0
    109                           | ADC_SC2_REFSEL(0)       //基准电压选择
    110                           | ADC_SC2_ADTRG(0)        //软件触发
    111                           | ADC_SC2_ACFE(0)         //比较功能禁用
    112                          );
   \   0000001E   0x2000             MOVS     R0,#+0
   \   00000020   0x....             LDR      R1,??DataTable4_3  ;; 0x4003b004
   \   00000022   0x6008             STR      R0,[R1, #+0]
    113          }
   \   00000024   0x4770             BX       LR               ;; return
    114          
    115          /**
    116            * 简介
    117            *     ADC 引脚使能
    118            * 参数
    119            *     adcn_ch
    120            *       通道号(variable.h中编辑)
    121            */

   \                                 In section .text, align 2, keep-with-next
    122          void ADC_Able(PTX_n adcn_ch)
    123          {
   \                     ADC_Able: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    124              uint8 shift = 0;
   \   00000002   0x2100             MOVS     R1,#+0
    125          
    126              shift = Change(adcn_ch);
   \   00000004   0xB2C0             UXTB     R0,R0
   \   00000006   0x.... 0x....      BL       Change
   \   0000000A   0x0001             MOVS     R1,R0
    127          
    128              ADC->APCTL1 |= 1<<shift;              //使能ADC引脚
   \   0000000C   0x....             LDR      R0,??DataTable4_1  ;; 0x4003b018
   \   0000000E   0x6800             LDR      R0,[R0, #+0]
   \   00000010   0x2201             MOVS     R2,#+1
   \   00000012   0x408A             LSLS     R2,R2,R1
   \   00000014   0x4302             ORRS     R2,R2,R0
   \   00000016   0x....             LDR      R0,??DataTable4_1  ;; 0x4003b018
   \   00000018   0x6002             STR      R2,[R0, #+0]
    129          }
   \   0000001A   0xBD01             POP      {R0,PC}          ;; return
    130          
    131          /**
    132            * 简介
    133            *     关掉 ADC
    134            * 参数
    135            *     adcn_ch
    136            *       通道号(variable.h中编辑)
    137            */

   \                                 In section .text, align 2, keep-with-next
    138          void ADC_Disable(PTX_n adcn_ch)
    139          {
   \                     ADC_Disable: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    140              uint8  shift = 0;
   \   00000002   0x2100             MOVS     R1,#+0
    141              uint16 mon = 0;
   \   00000004   0x2200             MOVS     R2,#+0
    142          
    143              shift = Change(adcn_ch);
   \   00000006   0xB2C0             UXTB     R0,R0
   \   00000008   0x.... 0x....      BL       Change
   \   0000000C   0x0001             MOVS     R1,R0
    144              mon = (uint16)(1 << shift);
   \   0000000E   0x2201             MOVS     R2,#+1
   \   00000010   0x408A             LSLS     R2,R2,R1
    145          
    146              ADC->APCTL1 &= ~mon;              //禁止ADC引脚
   \   00000012   0x....             LDR      R0,??DataTable4_1  ;; 0x4003b018
   \   00000014   0x6800             LDR      R0,[R0, #+0]
   \   00000016   0xB292             UXTH     R2,R2
   \   00000018   0x4390             BICS     R0,R0,R2
   \   0000001A   0x....             LDR      R1,??DataTable4_1  ;; 0x4003b018
   \   0000001C   0x6008             STR      R0,[R1, #+0]
    147          }
   \   0000001E   0xBD01             POP      {R0,PC}          ;; return
    148          
    149          
    150          /**
    151            * 简介
    152            *     采集一次ADC数据
    153            * 参数
    154            *     adcn_ch
    155            *       通道号
    156            *     bit
    157            *       adc8bit
    158            *       adc10bit
    159            *       adc12bit
    160            * 返回值
    161            *     无符号结果值(范围:0-4095)
    162            * 备注
    163            *     进入之后会开启对应引脚的 ADC功能 但 出去时候 没有关闭
    164            *     没有使能连续转换功能，所以对 ADC_SC1 执行一次写操作将启动一次转换
    165            *
    166            */

   \                                 In section .text, align 2, keep-with-next
    167          uint16 ADC_Once(PTX_n adcn_ch, adcBit bit)
    168          {
   \                     ADC_Once: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0x0005             MOVS     R5,R0
   \   00000004   0x000C             MOVS     R4,R1
    169                uint16 result;
    170                uint8  shift = 0;
   \   00000006   0x2600             MOVS     R6,#+0
    171          
    172              shift = Change(adcn_ch);
   \   00000008   0x0028             MOVS     R0,R5
   \   0000000A   0xB2C0             UXTB     R0,R0
   \   0000000C   0x.... 0x....      BL       Change
   \   00000010   0x0006             MOVS     R6,R0
    173          
    174              ADC_Able(adcn_ch);
   \   00000012   0x0028             MOVS     R0,R5
   \   00000014   0xB2C0             UXTB     R0,R0
   \   00000016   0x.... 0x....      BL       ADC_Able
    175          
    176              ADC->SC3 |=  ADC_SC3_MODE(bit);  //分辨率
   \   0000001A   0x....             LDR      R0,??DataTable4_2  ;; 0x4003b008
   \   0000001C   0x6800             LDR      R0,[R0, #+0]
   \   0000001E   0xB2E4             UXTB     R4,R4
   \   00000020   0x00A1             LSLS     R1,R4,#+2
   \   00000022   0x220C             MOVS     R2,#+12
   \   00000024   0x400A             ANDS     R2,R2,R1
   \   00000026   0x4302             ORRS     R2,R2,R0
   \   00000028   0x....             LDR      R0,??DataTable4_2  ;; 0x4003b008
   \   0000002A   0x6002             STR      R2,[R0, #+0]
    177              ADC->SC1  = ADC_SC1_ADCH(shift);       //启动转换
   \   0000002C   0xB2F6             UXTB     R6,R6
   \   0000002E   0x06F0             LSLS     R0,R6,#+27       ;; ZeroExtS R0,R6,#+27,#+27
   \   00000030   0x0EC0             LSRS     R0,R0,#+27
   \   00000032   0x....             LDR      R1,??DataTable4_4  ;; 0x4003b000
   \   00000034   0x6008             STR      R0,[R1, #+0]
    178          
    179              //对 ADC_SC1 执行一次写操作将启动转换
    180              while(!(ADC->SC1 & ADC_SC1_COCO_MASK)); //等待转换完成
   \                     ??ADC_Once_0: (+1)
   \   00000036   0x....             LDR      R0,??DataTable4_4  ;; 0x4003b000
   \   00000038   0x6800             LDR      R0,[R0, #+0]
   \   0000003A   0x0600             LSLS     R0,R0,#+24
   \   0000003C   0xD5FB             BPL      ??ADC_Once_0
    181              result = ADC->R;
   \   0000003E   0x....             LDR      R0,??DataTable4_5  ;; 0x4003b010
   \   00000040   0x6800             LDR      R0,[R0, #+0]
    182          
    183              return (result & ADC_R_ADR_MASK);       //返回结果
   \   00000042   0x0500             LSLS     R0,R0,#+20       ;; ZeroExtS R0,R0,#+20,#+20
   \   00000044   0x0D00             LSRS     R0,R0,#+20
   \   00000046   0xBD70             POP      {R4-R6,PC}       ;; return
    184          }
    185          
    186          /**
    187            * 简介
    188            *     ADC 停止采集
    189            * 参数
    190          
    191            * 备注
    192            */

   \                                 In section .text, align 2, keep-with-next
    193          void ADC_Stop(void)
    194          {
    195              ADC->SC1 = ADC_SC1_ADCH(0xFF);
   \                     ADC_Stop: (+1)
   \   00000000   0x201F             MOVS     R0,#+31
   \   00000002   0x....             LDR      R1,??DataTable4_4  ;; 0x4003b000
   \   00000004   0x6008             STR      R0,[R1, #+0]
    196          }
   \   00000006   0x4770             BX       LR               ;; return
    197          
    198          
    199          /**
    200            * 简介
    201            *     中值滤波后的结果(范围:0-4095)
    202            * 参数
    203            *     MoudelNumber：模块号
    204            *     Channel：通道号
    205            *     accuracy：精度
    206            *     N:均值滤波次数
    207            * 返回值
    208            *     无符号结果值(范围:0-4095)
    209            */

   \                                 In section .text, align 2, keep-with-next
    210          uint16 hw_ad_mid(PTX_n adcn_ch, adcBit bit)
    211          {
   \                     hw_ad_mid: (+1)
   \   00000000   0xB5F8             PUSH     {R3-R7,LR}
   \   00000002   0x0006             MOVS     R6,R0
   \   00000004   0x000F             MOVS     R7,R1
    212              uint16 i, j, k, tmp;
    213          
    214              //取3次A/D转换结果
    215              i = ADC_Once(adcn_ch, bit);
   \   00000006   0x0039             MOVS     R1,R7
   \   00000008   0xB2C9             UXTB     R1,R1
   \   0000000A   0x0030             MOVS     R0,R6
   \   0000000C   0xB2C0             UXTB     R0,R0
   \   0000000E   0x.... 0x....      BL       ADC_Once
   \   00000012   0x0004             MOVS     R4,R0
    216              j = ADC_Once(adcn_ch, bit);
   \   00000014   0x0039             MOVS     R1,R7
   \   00000016   0xB2C9             UXTB     R1,R1
   \   00000018   0x0030             MOVS     R0,R6
   \   0000001A   0xB2C0             UXTB     R0,R0
   \   0000001C   0x.... 0x....      BL       ADC_Once
   \   00000020   0x0005             MOVS     R5,R0
    217              k = ADC_Once(adcn_ch, bit);
   \   00000022   0x0039             MOVS     R1,R7
   \   00000024   0xB2C9             UXTB     R1,R1
   \   00000026   0x0030             MOVS     R0,R6
   \   00000028   0xB2C0             UXTB     R0,R0
   \   0000002A   0x.... 0x....      BL       ADC_Once
    218          
    219              //取中值 冒泡排序 中间为中值
    220              if (i > j)
   \   0000002E   0xB2AD             UXTH     R5,R5
   \   00000030   0xB2A4             UXTH     R4,R4
   \   00000032   0x42A5             CMP      R5,R4
   \   00000034   0xD202             BCS      ??hw_ad_mid_0
    221              {
    222                  tmp = i; i = j; j = tmp;
   \   00000036   0x0021             MOVS     R1,R4
   \   00000038   0x002C             MOVS     R4,R5
   \   0000003A   0x000D             MOVS     R5,R1
    223              }
    224              if (j > k)
   \                     ??hw_ad_mid_0: (+1)
   \   0000003C   0xB280             UXTH     R0,R0
   \   0000003E   0xB2AD             UXTH     R5,R5
   \   00000040   0x42A8             CMP      R0,R5
   \   00000042   0xD202             BCS      ??hw_ad_mid_1
    225              {
    226                  tmp = j; j = k; k = tmp;
   \   00000044   0x0029             MOVS     R1,R5
   \   00000046   0x0005             MOVS     R5,R0
   \   00000048   0x0008             MOVS     R0,R1
    227              }
    228              if (i > j)
   \                     ??hw_ad_mid_1: (+1)
   \   0000004A   0xB2AD             UXTH     R5,R5
   \   0000004C   0xB2A4             UXTH     R4,R4
   \   0000004E   0x42A5             CMP      R5,R4
   \   00000050   0xD202             BCS      ??hw_ad_mid_2
    229              {
    230                  tmp = i; i = j; j = tmp;
   \   00000052   0x0021             MOVS     R1,R4
   \   00000054   0x002C             MOVS     R4,R5
   \   00000056   0x000D             MOVS     R5,R1
    231              }
    232          
    233              return      j;
   \                     ??hw_ad_mid_2: (+1)
   \   00000058   0x0028             MOVS     R0,R5
   \   0000005A   0xB280             UXTH     R0,R0
   \   0000005C   0xBDF2             POP      {R1,R4-R7,PC}    ;; return
    234          }
    235          
    236          /**
    237            * 简介
    238            *     均值滤波后的结果(范围:0-4095)
    239            * 参数
    240            *     MoudelNumber：模块号
    241            *     Channel：通道号
    242            *     accuracy：精度
    243            *     N:均值滤波次数
    244            * 返回值
    245            *     无符号结果值(范围:0-4095)
    246            */

   \                                 In section .text, align 2, keep-with-next
    247          uint16 hw_ad_ave(PTX_n adcn_ch, adcBit bit, uint8 N)
    248          {
   \                     hw_ad_ave: (+1)
   \   00000000   0xB5F8             PUSH     {R3-R7,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000F             MOVS     R7,R1
   \   00000006   0x0016             MOVS     R6,R2
    249              uint32 tmp = 0;
   \   00000008   0x2000             MOVS     R0,#+0
    250              uint8  i;
    251          
    252              for (i=0; i<N; i++)
   \   0000000A   0x2500             MOVS     R5,#+0
   \   0000000C   0xE00A             B        ??hw_ad_ave_0
    253                  tmp += hw_ad_mid(adcn_ch, bit);
   \                     ??hw_ad_ave_1: (+1)
   \   0000000E   0x9000             STR      R0,[SP, #+0]
   \   00000010   0x0039             MOVS     R1,R7
   \   00000012   0xB2C9             UXTB     R1,R1
   \   00000014   0x0020             MOVS     R0,R4
   \   00000016   0xB2C0             UXTB     R0,R0
   \   00000018   0x.... 0x....      BL       hw_ad_mid
   \   0000001C   0x0001             MOVS     R1,R0
   \   0000001E   0x9800             LDR      R0,[SP, #+0]
   \   00000020   0x1840             ADDS     R0,R0,R1
   \   00000022   0x1C6D             ADDS     R5,R5,#+1
   \                     ??hw_ad_ave_0: (+1)
   \   00000024   0xB2ED             UXTB     R5,R5
   \   00000026   0xB2F6             UXTB     R6,R6
   \   00000028   0x42B5             CMP      R5,R6
   \   0000002A   0xD3F0             BCC      ??hw_ad_ave_1
    254              tmp = tmp / N;
   \   0000002C   0xB2F6             UXTB     R6,R6
   \   0000002E   0x0031             MOVS     R1,R6
   \   00000030   0x.... 0x....      BL       __aeabi_uidiv
    255          
    256              return (uint16)tmp;
   \   00000034   0xB280             UXTH     R0,R0
   \   00000036   0xBDF2             POP      {R1,R4-R7,PC}    ;; return
    257          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4:
   \   00000000   0x40048014         DC32     0x40048014

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_1:
   \   00000000   0x4003B018         DC32     0x4003b018

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_2:
   \   00000000   0x4003B008         DC32     0x4003b008

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_3:
   \   00000000   0x4003B004         DC32     0x4003b004

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_4:
   \   00000000   0x4003B000         DC32     0x4003b000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_5:
   \   00000000   0x4003B010         DC32     0x4003b010
    258          
    259          
    260          

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       8   ADC_Able
         8   -> Change
       8   ADC_Disable
         8   -> Change
       0   ADC_Init
      16   ADC_Once
        16   -> ADC_Able
        16   -> Change
       0   ADC_Stop
       4   Change
      24   hw_ad_ave
        24   -> hw_ad_mid
        24 __aeabi_uidiv
      24   hw_ad_mid
        24   -> ADC_Once


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable4
       4  ??DataTable4_1
       4  ??DataTable4_2
       4  ??DataTable4_3
       4  ??DataTable4_4
       4  ??DataTable4_5
      28  ADC_Able
      32  ADC_Disable
      38  ADC_Init
      72  ADC_Once
       8  ADC_Stop
     144  Change
       2  adcHold
      56  hw_ad_ave
      94  hw_ad_mid

 
   2 bytes in section .bss
 496 bytes in section .text
 
 496 bytes of CODE memory
   2 bytes of DATA memory

Errors: none
Warnings: none
