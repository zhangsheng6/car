###############################################################################
#
# IAR ANSI C/C++ Compiler V7.40.2.8542/W32 for ARM        28/Sep/2018  18:58:05
# Copyright 1999-2015 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        I:\电磁程序-ZS\电磁直立-ZS\stand_ZS_9.28\user\C\Motor_Control.c
#    Command line =  
#        I:\电磁程序-ZS\电磁直立-ZS\stand_ZS_9.28\user\C\Motor_Control.c -D IAR
#        -D TWR_K60N512 -D _DLIB_FILE_DESCRIPTOR -D DA_OLED -lCN
#        I:\电磁程序-ZS\电磁直立-ZS\stand_ZS_9.28\iar\KEA_128_FLASH\List\ -lB
#        I:\电磁程序-ZS\电磁直立-ZS\stand_ZS_9.28\iar\KEA_128_FLASH\List\ -o
#        I:\电磁程序-ZS\电磁直立-ZS\stand_ZS_9.28\iar\KEA_128_FLASH\Obj\
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M0+ -e --fpu=None --dlib_config
#        F:\IAR安装包\arm\INC\c\DLib_Config_Normal.h -I
#        I:\电磁程序-ZS\电磁直立-ZS\stand_ZS_9.28\iar\..\device\H\ -I
#        I:\电磁程序-ZS\电磁直立-ZS\stand_ZS_9.28\iar\..\user\H\ -I
#        I:\电磁程序-ZS\电磁直立-ZS\stand_ZS_9.28\iar\..\system\ -I
#        I:\电磁程序-ZS\电磁直立-ZS\stand_ZS_9.28\iar\..\lib\H\ -I
#        I:\电磁程序-ZS\电磁直立-ZS\stand_ZS_9.28\iar\..\system\coreSupport\
#        -Ol
#    List file    =  
#        I:\电磁程序-ZS\电磁直立-ZS\stand_ZS_9.28\iar\KEA_128_FLASH\List\Motor_Control.lst
#    Object file  =  
#        I:\电磁程序-ZS\电磁直立-ZS\stand_ZS_9.28\iar\KEA_128_FLASH\Obj\Motor_Control.o
#
###############################################################################

I:\电磁程序-ZS\电磁直立-ZS\stand_ZS_9.28\user\C\Motor_Control.c
      1          #include "Motor_Control.h"
      2          
      3          //电机

   \                                 In section .bss, align 4
      4          float Motor_Out_L = 0.0, Motor_Out_R = 0.0, Motor_Max = 9000;
   \                     Motor_Out_L:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
   \                     Motor_Out_R:
   \   00000000                      DS8 4

   \                                 In section .data, align 4
   \                     Motor_Max:
   \   00000000   0x460CA000         DC32 460CA000H

   \                                 In section .data, align 4
      5          unsigned int DEAD_L = 1700; //2120
   \                     DEAD_L:
   \   00000000   0x000006A4         DC32 1700

   \                                 In section .data, align 4
      6          unsigned int DEAD_R = 2000;  //2120
   \                     DEAD_R:
   \   00000000   0x000007D0         DC32 2000
      7          extern  float Speed_Control_Output_L,Speed_Control_Output_R;
      8          /**
      9            * 简介
     10            *     电机控制程序
     11            * 备注
     12            *
     13            */

   \                                 In section .text, align 4, keep-with-next
     14          void Motor_control(void)
     15          {
   \                     Motor_control: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
     16          
     17          //    Motor_Out_L = Angle_Out - Direction_Control_Output ;//+ Speed_Control_Output ;
     18          //    Motor_Out_R = Angle_Out + Direction_Control_Output ;//+ Speed_Control_Output ;  
     19           
     20          //    Motor_Out_L = Angle_Out  + Speed_Control_Output_L ;
     21          //    Motor_Out_R = Angle_Out  + Speed_Control_Output_R ;  
     22              Motor_Out_L = Angle_Out  + Speed_Control_Output;
   \   00000002   0x4876             LDR      R0,??Motor_control_0
   \   00000004   0x6801             LDR      R1,[R0, #+0]
   \   00000006   0x4876             LDR      R0,??Motor_control_0+0x4
   \   00000008   0x6800             LDR      R0,[R0, #+0]
   \   0000000A   0x.... 0x....      BL       __aeabi_fadd
   \   0000000E   0x4975             LDR      R1,??Motor_control_0+0x8
   \   00000010   0x6008             STR      R0,[R1, #+0]
     23              Motor_Out_R = Angle_Out  + Speed_Control_Output ; 
   \   00000012   0x4872             LDR      R0,??Motor_control_0
   \   00000014   0x6801             LDR      R1,[R0, #+0]
   \   00000016   0x4872             LDR      R0,??Motor_control_0+0x4
   \   00000018   0x6800             LDR      R0,[R0, #+0]
   \   0000001A   0x.... 0x....      BL       __aeabi_fadd
   \   0000001E   0x4972             LDR      R1,??Motor_control_0+0xC
   \   00000020   0x6008             STR      R0,[R1, #+0]
     24              
     25          //            Motor_Out_L = Angle_Out  ;
     26          //    Motor_Out_R = Angle_Out   ; 
     27                    
     28              /* 电机启动PWM控制 ------------------------------------------------------- */
     29              //左电机控制
     30              if (Motor_Out_L > 0)
   \   00000022   0x4870             LDR      R0,??Motor_control_0+0x8
   \   00000024   0x6800             LDR      R0,[R0, #+0]
   \   00000026   0x2100             MOVS     R1,#+0
   \   00000028   0x.... 0x....      BL       __aeabi_cfrcmple
   \   0000002C   0xD215             BCS      ??Motor_control_1
     31              {
     32                  Motor_Out_L += DEAD_L; //加上启动基数
   \   0000002E   0x486F             LDR      R0,??Motor_control_0+0x10
   \   00000030   0x6800             LDR      R0,[R0, #+0]
   \   00000032   0x.... 0x....      BL       __aeabi_ui2f
   \   00000036   0x496B             LDR      R1,??Motor_control_0+0x8
   \   00000038   0x6809             LDR      R1,[R1, #+0]
   \   0000003A   0x.... 0x....      BL       __aeabi_fadd
   \   0000003E   0x4969             LDR      R1,??Motor_control_0+0x8
   \   00000040   0x6008             STR      R0,[R1, #+0]
     33                  if (Motor_Out_L > Motor_Max)
   \   00000042   0x486B             LDR      R0,??Motor_control_0+0x14
   \   00000044   0x6800             LDR      R0,[R0, #+0]
   \   00000046   0x4967             LDR      R1,??Motor_control_0+0x8
   \   00000048   0x6809             LDR      R1,[R1, #+0]
   \   0000004A   0x.... 0x....      BL       __aeabi_cfcmple
   \   0000004E   0xD226             BCS      ??Motor_control_2
     34                      Motor_Out_L = Motor_Max;
   \   00000050   0x4867             LDR      R0,??Motor_control_0+0x14
   \   00000052   0x6800             LDR      R0,[R0, #+0]
   \   00000054   0x4963             LDR      R1,??Motor_control_0+0x8
   \   00000056   0x6008             STR      R0,[R1, #+0]
   \   00000058   0xE021             B        ??Motor_control_2
     35              }
     36              else if (Motor_Out_L < 0)
   \                     ??Motor_control_1: (+1)
   \   0000005A   0x4862             LDR      R0,??Motor_control_0+0x8
   \   0000005C   0x6800             LDR      R0,[R0, #+0]
   \   0000005E   0x2100             MOVS     R1,#+0
   \   00000060   0x.... 0x....      BL       __aeabi_cfcmple
   \   00000064   0xD21B             BCS      ??Motor_control_2
     37              {
     38                  Motor_Out_L -= DEAD_L;
   \   00000066   0x4861             LDR      R0,??Motor_control_0+0x10
   \   00000068   0x6800             LDR      R0,[R0, #+0]
   \   0000006A   0x.... 0x....      BL       __aeabi_ui2f
   \   0000006E   0x0001             MOVS     R1,R0
   \   00000070   0x485C             LDR      R0,??Motor_control_0+0x8
   \   00000072   0x6800             LDR      R0,[R0, #+0]
   \   00000074   0x.... 0x....      BL       __aeabi_fsub
   \   00000078   0x495A             LDR      R1,??Motor_control_0+0x8
   \   0000007A   0x6008             STR      R0,[R1, #+0]
     39                  if (Motor_Out_L < -Motor_Max)
   \   0000007C   0x4859             LDR      R0,??Motor_control_0+0x8
   \   0000007E   0x6800             LDR      R0,[R0, #+0]
   \   00000080   0x495B             LDR      R1,??Motor_control_0+0x14
   \   00000082   0x6809             LDR      R1,[R1, #+0]
   \   00000084   0x2280             MOVS     R2,#+128
   \   00000086   0x0612             LSLS     R2,R2,#+24       ;; #-2147483648
   \   00000088   0x4051             EORS     R1,R1,R2
   \   0000008A   0x.... 0x....      BL       __aeabi_cfcmple
   \   0000008E   0xD206             BCS      ??Motor_control_2
     40                      Motor_Out_L = -Motor_Max;
   \   00000090   0x4857             LDR      R0,??Motor_control_0+0x14
   \   00000092   0x6800             LDR      R0,[R0, #+0]
   \   00000094   0x2180             MOVS     R1,#+128
   \   00000096   0x0609             LSLS     R1,R1,#+24       ;; #-2147483648
   \   00000098   0x4048             EORS     R0,R0,R1
   \   0000009A   0x4952             LDR      R1,??Motor_control_0+0x8
   \   0000009C   0x6008             STR      R0,[R1, #+0]
     41              }
     42          
     43              //右电机控制
     44              if (Motor_Out_R > 0)
   \                     ??Motor_control_2: (+1)
   \   0000009E   0x4852             LDR      R0,??Motor_control_0+0xC
   \   000000A0   0x6800             LDR      R0,[R0, #+0]
   \   000000A2   0x2100             MOVS     R1,#+0
   \   000000A4   0x.... 0x....      BL       __aeabi_cfrcmple
   \   000000A8   0xD215             BCS      ??Motor_control_3
     45              {
     46                  Motor_Out_R += DEAD_R;
   \   000000AA   0x4852             LDR      R0,??Motor_control_0+0x18
   \   000000AC   0x6800             LDR      R0,[R0, #+0]
   \   000000AE   0x.... 0x....      BL       __aeabi_ui2f
   \   000000B2   0x494D             LDR      R1,??Motor_control_0+0xC
   \   000000B4   0x6809             LDR      R1,[R1, #+0]
   \   000000B6   0x.... 0x....      BL       __aeabi_fadd
   \   000000BA   0x494B             LDR      R1,??Motor_control_0+0xC
   \   000000BC   0x6008             STR      R0,[R1, #+0]
     47                  if (Motor_Out_R > Motor_Max)
   \   000000BE   0x484C             LDR      R0,??Motor_control_0+0x14
   \   000000C0   0x6800             LDR      R0,[R0, #+0]
   \   000000C2   0x4949             LDR      R1,??Motor_control_0+0xC
   \   000000C4   0x6809             LDR      R1,[R1, #+0]
   \   000000C6   0x.... 0x....      BL       __aeabi_cfcmple
   \   000000CA   0xD226             BCS      ??Motor_control_4
     48                      Motor_Out_R = Motor_Max;
   \   000000CC   0x4848             LDR      R0,??Motor_control_0+0x14
   \   000000CE   0x6800             LDR      R0,[R0, #+0]
   \   000000D0   0x4945             LDR      R1,??Motor_control_0+0xC
   \   000000D2   0x6008             STR      R0,[R1, #+0]
   \   000000D4   0xE021             B        ??Motor_control_4
     49              }
     50              else if (Motor_Out_R < 0)
   \                     ??Motor_control_3: (+1)
   \   000000D6   0x4844             LDR      R0,??Motor_control_0+0xC
   \   000000D8   0x6800             LDR      R0,[R0, #+0]
   \   000000DA   0x2100             MOVS     R1,#+0
   \   000000DC   0x.... 0x....      BL       __aeabi_cfcmple
   \   000000E0   0xD21B             BCS      ??Motor_control_4
     51              {
     52                  Motor_Out_R -= DEAD_R;
   \   000000E2   0x4844             LDR      R0,??Motor_control_0+0x18
   \   000000E4   0x6800             LDR      R0,[R0, #+0]
   \   000000E6   0x.... 0x....      BL       __aeabi_ui2f
   \   000000EA   0x0001             MOVS     R1,R0
   \   000000EC   0x483E             LDR      R0,??Motor_control_0+0xC
   \   000000EE   0x6800             LDR      R0,[R0, #+0]
   \   000000F0   0x.... 0x....      BL       __aeabi_fsub
   \   000000F4   0x493C             LDR      R1,??Motor_control_0+0xC
   \   000000F6   0x6008             STR      R0,[R1, #+0]
     53                  if (Motor_Out_R < -Motor_Max)
   \   000000F8   0x483B             LDR      R0,??Motor_control_0+0xC
   \   000000FA   0x6800             LDR      R0,[R0, #+0]
   \   000000FC   0x493C             LDR      R1,??Motor_control_0+0x14
   \   000000FE   0x6809             LDR      R1,[R1, #+0]
   \   00000100   0x2280             MOVS     R2,#+128
   \   00000102   0x0612             LSLS     R2,R2,#+24       ;; #-2147483648
   \   00000104   0x4051             EORS     R1,R1,R2
   \   00000106   0x.... 0x....      BL       __aeabi_cfcmple
   \   0000010A   0xD206             BCS      ??Motor_control_4
     54                      Motor_Out_R = -Motor_Max;
   \   0000010C   0x4838             LDR      R0,??Motor_control_0+0x14
   \   0000010E   0x6800             LDR      R0,[R0, #+0]
   \   00000110   0x2180             MOVS     R1,#+128
   \   00000112   0x0609             LSLS     R1,R1,#+24       ;; #-2147483648
   \   00000114   0x4048             EORS     R0,R0,R1
   \   00000116   0x4934             LDR      R1,??Motor_control_0+0xC
   \   00000118   0x6008             STR      R0,[R1, #+0]
     55              }
     56              /* 电机启动PWM控制 -------- END ------------------------------------------ */
     57          
     58          
     59                  /* 电机正反转控制 -------------------------------------------- */
     60                  //左正反转控制
     61                  if (Motor_Out_L > 0)
   \                     ??Motor_control_4: (+1)
   \   0000011A   0x4832             LDR      R0,??Motor_control_0+0x8
   \   0000011C   0x6800             LDR      R0,[R0, #+0]
   \   0000011E   0x2100             MOVS     R1,#+0
   \   00000120   0x.... 0x....      BL       __aeabi_cfrcmple
   \   00000124   0xD208             BCS      ??Motor_control_5
     62                  {
     63                      forward_L;//正转
   \   00000126   0x2100             MOVS     R1,#+0
   \   00000128   0x2024             MOVS     R0,#+36
   \   0000012A   0x.... 0x....      BL       GpioSet
   \   0000012E   0x2101             MOVS     R1,#+1
   \   00000130   0x201C             MOVS     R0,#+28
   \   00000132   0x.... 0x....      BL       GpioSet
   \   00000136   0xE00E             B        ??Motor_control_6
     64                  }
     65                  else
     66                  {
     67                      Motor_Out_L = -Motor_Out_L;
   \                     ??Motor_control_5: (+1)
   \   00000138   0x482A             LDR      R0,??Motor_control_0+0x8
   \   0000013A   0x6800             LDR      R0,[R0, #+0]
   \   0000013C   0x2180             MOVS     R1,#+128
   \   0000013E   0x0609             LSLS     R1,R1,#+24       ;; #-2147483648
   \   00000140   0x4048             EORS     R0,R0,R1
   \   00000142   0x4928             LDR      R1,??Motor_control_0+0x8
   \   00000144   0x6008             STR      R0,[R1, #+0]
     68                      reversal_L;//反转
   \   00000146   0x2101             MOVS     R1,#+1
   \   00000148   0x2024             MOVS     R0,#+36
   \   0000014A   0x.... 0x....      BL       GpioSet
   \   0000014E   0x2100             MOVS     R1,#+0
   \   00000150   0x201C             MOVS     R0,#+28
   \   00000152   0x.... 0x....      BL       GpioSet
     69                  }
     70          
     71                  //右正反转控制
     72                  if (Motor_Out_R > 0)
   \                     ??Motor_control_6: (+1)
   \   00000156   0x4824             LDR      R0,??Motor_control_0+0xC
   \   00000158   0x6800             LDR      R0,[R0, #+0]
   \   0000015A   0x2100             MOVS     R1,#+0
   \   0000015C   0x.... 0x....      BL       __aeabi_cfrcmple
   \   00000160   0xD208             BCS      ??Motor_control_7
     73                  {
     74                      forward_R;
   \   00000162   0x2100             MOVS     R1,#+0
   \   00000164   0x202A             MOVS     R0,#+42
   \   00000166   0x.... 0x....      BL       GpioSet
   \   0000016A   0x2101             MOVS     R1,#+1
   \   0000016C   0x201A             MOVS     R0,#+26
   \   0000016E   0x.... 0x....      BL       GpioSet
   \   00000172   0xE00E             B        ??Motor_control_8
     75                  }
     76                  else
     77                  {
     78                      Motor_Out_R = -Motor_Out_R;
   \                     ??Motor_control_7: (+1)
   \   00000174   0x481C             LDR      R0,??Motor_control_0+0xC
   \   00000176   0x6800             LDR      R0,[R0, #+0]
   \   00000178   0x2180             MOVS     R1,#+128
   \   0000017A   0x0609             LSLS     R1,R1,#+24       ;; #-2147483648
   \   0000017C   0x4048             EORS     R0,R0,R1
   \   0000017E   0x491A             LDR      R1,??Motor_control_0+0xC
   \   00000180   0x6008             STR      R0,[R1, #+0]
     79                      reversal_R;
   \   00000182   0x2101             MOVS     R1,#+1
   \   00000184   0x202A             MOVS     R0,#+42
   \   00000186   0x.... 0x....      BL       GpioSet
   \   0000018A   0x2100             MOVS     R1,#+0
   \   0000018C   0x201A             MOVS     R0,#+26
   \   0000018E   0x.... 0x....      BL       GpioSet
     80                  }
     81                  /* 电机正反转控制 -------- END ------------------------------- */
     82          
     83                  if(car_angle>=80)
   \                     ??Motor_control_8: (+1)
   \   00000192   0x4819             LDR      R0,??Motor_control_0+0x1C
   \   00000194   0x6800             LDR      R0,[R0, #+0]
   \   00000196   0x4919             LDR      R1,??Motor_control_0+0x20  ;; 0x42a00000
   \   00000198   0x.... 0x....      BL       __aeabi_cfrcmple
   \   0000019C   0xD812             BHI      ??Motor_control_9
     84                  {
     85                  change_L((uint32)Motor_Out_L);
   \   0000019E   0x4811             LDR      R0,??Motor_control_0+0x8
   \   000001A0   0x6800             LDR      R0,[R0, #+0]
   \   000001A2   0x.... 0x....      BL       __aeabi_f2uiz
   \   000001A6   0x0002             MOVS     R2,R0
   \   000001A8   0x2100             MOVS     R1,#+0
   \   000001AA   0x2002             MOVS     R0,#+2
   \   000001AC   0x.... 0x....      BL       FTM_PwmDuty
     86                  change_R((uint32)Motor_Out_R);
   \   000001B0   0x480D             LDR      R0,??Motor_control_0+0xC
   \   000001B2   0x6800             LDR      R0,[R0, #+0]
   \   000001B4   0x.... 0x....      BL       __aeabi_f2uiz
   \   000001B8   0x0002             MOVS     R2,R0
   \   000001BA   0x2101             MOVS     R1,#+1
   \   000001BC   0x2002             MOVS     R0,#+2
   \   000001BE   0x.... 0x....      BL       FTM_PwmDuty
   \   000001C2   0xE009             B        ??Motor_control_10
     87                  }
     88                  else
     89                  {
     90                  change_L(0);
   \                     ??Motor_control_9: (+1)
   \   000001C4   0x2200             MOVS     R2,#+0
   \   000001C6   0x2100             MOVS     R1,#+0
   \   000001C8   0x2002             MOVS     R0,#+2
   \   000001CA   0x.... 0x....      BL       FTM_PwmDuty
     91                  change_R(0);
   \   000001CE   0x2200             MOVS     R2,#+0
   \   000001D0   0x2101             MOVS     R1,#+1
   \   000001D2   0x2002             MOVS     R0,#+2
   \   000001D4   0x.... 0x....      BL       FTM_PwmDuty
     92                  }
     93          }
   \                     ??Motor_control_10: (+1)
   \   000001D8   0xBD01             POP      {R0,PC}          ;; return
   \   000001DA   0xBF00             Nop      
   \                     ??Motor_control_0:
   \   000001DC   0x........         DC32     Angle_Out
   \   000001E0   0x........         DC32     Speed_Control_Output
   \   000001E4   0x........         DC32     Motor_Out_L
   \   000001E8   0x........         DC32     Motor_Out_R
   \   000001EC   0x........         DC32     DEAD_L
   \   000001F0   0x........         DC32     Motor_Max
   \   000001F4   0x........         DC32     DEAD_R
   \   000001F8   0x........         DC32     car_angle
   \   000001FC   0x42A00000         DC32     0x42a00000

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       8   Motor_control
         8   -> FTM_PwmDuty
         8   -> GpioSet
         8   -> __aeabi_f2uiz
         8   -> __aeabi_fadd
         8   -> __aeabi_fsub
         8   -> __aeabi_ui2f
         8 __aeabi_cfcmple
         8 __aeabi_cfrcmple


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  DEAD_L
       4  DEAD_R
       4  Motor_Max
       4  Motor_Out_L
       4  Motor_Out_R
     512  Motor_control

 
   8 bytes in section .bss
  12 bytes in section .data
 512 bytes in section .text
 
 512 bytes of CODE memory
  20 bytes of DATA memory

Errors: none
Warnings: none
