###############################################################################
#
# IAR ANSI C/C++ Compiler V7.40.2.8542/W32 for ARM        28/Sep/2018  18:58:07
# Copyright 1999-2015 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  I:\电磁程序-ZS\电磁直立-ZS\stand_ZS_9.28\device\C\uart.c
#    Command line =  
#        I:\电磁程序-ZS\电磁直立-ZS\stand_ZS_9.28\device\C\uart.c -D IAR -D
#        TWR_K60N512 -D _DLIB_FILE_DESCRIPTOR -D DA_OLED -lCN
#        I:\电磁程序-ZS\电磁直立-ZS\stand_ZS_9.28\iar\KEA_128_FLASH\List\ -lB
#        I:\电磁程序-ZS\电磁直立-ZS\stand_ZS_9.28\iar\KEA_128_FLASH\List\ -o
#        I:\电磁程序-ZS\电磁直立-ZS\stand_ZS_9.28\iar\KEA_128_FLASH\Obj\
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M0+ -e --fpu=None --dlib_config
#        F:\IAR安装包\arm\INC\c\DLib_Config_Normal.h -I
#        I:\电磁程序-ZS\电磁直立-ZS\stand_ZS_9.28\iar\..\device\H\ -I
#        I:\电磁程序-ZS\电磁直立-ZS\stand_ZS_9.28\iar\..\user\H\ -I
#        I:\电磁程序-ZS\电磁直立-ZS\stand_ZS_9.28\iar\..\system\ -I
#        I:\电磁程序-ZS\电磁直立-ZS\stand_ZS_9.28\iar\..\lib\H\ -I
#        I:\电磁程序-ZS\电磁直立-ZS\stand_ZS_9.28\iar\..\system\coreSupport\
#        -Ol
#    List file    =  
#        I:\电磁程序-ZS\电磁直立-ZS\stand_ZS_9.28\iar\KEA_128_FLASH\List\uart.lst
#    Object file  =  
#        I:\电磁程序-ZS\电磁直立-ZS\stand_ZS_9.28\iar\KEA_128_FLASH\Obj\uart.o
#
###############################################################################

I:\电磁程序-ZS\电磁直立-ZS\stand_ZS_9.28\device\C\uart.c
      1          /**
      2            ******************************************************************************
      3            * COPYRIGHT NOTICE
      4            * Copyright (c) 2018,华北科技学院
      5            * All rights reserved.
      6            *
      7            * 文件名称：    uart.c
      8            * 文件标识：
      9            * 摘    要：
     10            *
     11            * 当前版本：     1.0
     12            * 负    责：     韩志伟
     13            * 时    间：     2018年1月7日 20:47:48
     14            ******************************************************************************
     15            */
     16          
     17          #include "uart.h"
     18          #include "stdio.h"
     19          #include "stdarg.h"
     20          
     21          //char UART_SendFloatArray[FLOAT_ARRAY_NUM];//使用UART_SendFloat()函数时候用
     22          
     23          
     24          /**
     25            * 简介
     26            *     发送一个 字节
     27            */

   \                                 In section .text, align 2, keep-with-next
     28          void UART_Send_Byte(uint8 ch)
     29          {
   \                     UART_Send_Byte: (+1)
   \   00000000   0xB500             PUSH     {LR}
     30              //等待发送缓冲区空
     31              while (! ((uart[UART_PART]->S1) & UART_S1_TDRE_MASK) );
   \                     ??UART_Send_Byte_0: (+1)
   \   00000002   0x....             LDR      R1,??DataTable3
   \   00000004   0x6889             LDR      R1,[R1, #+8]
   \   00000006   0x7909             LDRB     R1,[R1, #+4]
   \   00000008   0x0609             LSLS     R1,R1,#+24
   \   0000000A   0xD5FA             BPL      ??UART_Send_Byte_0
     32              //发送数据
     33              uart[UART_PART]->D = (uint8)ch;
   \   0000000C   0x....             LDR      R1,??DataTable3
   \   0000000E   0x6889             LDR      R1,[R1, #+8]
   \   00000010   0x71C8             STRB     R0,[R1, #+7]
     34          }
   \   00000012   0xBD00             POP      {PC}             ;; return
     35          
     36          /**
     37            * 简介
     38            *     发送一个 回车
     39            * 注意
     40            *         代码 - ASCII - 十六进制 - 作用
     41            *     回车 CR  -   \r  -  0x0d   - 移动光标至该行的起始位置
     42            *     换行 LF  -   \n  -  0x0a   - 换行至下一行行首起始位置
     43            */

   \                                 In section .text, align 2, keep-with-next
     44          void UART_Send_Enter(void)
     45          {
   \                     UART_Send_Enter: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
     46              UART_Send_Byte(0x0d);//返回行首
   \   00000002   0x200D             MOVS     R0,#+13
   \   00000004   0x.... 0x....      BL       UART_Send_Byte
     47              UART_Send_Byte(0x0a);//转行
   \   00000008   0x200A             MOVS     R0,#+10
   \   0000000A   0x.... 0x....      BL       UART_Send_Byte
     48          }
   \   0000000E   0xBD01             POP      {R0,PC}          ;; return
     49          
     50          /**
     51            * 简介
     52            *     发送一个 字符串
     53            * 注意
     54            *     1
     55            *       防止当串口没有发送数据时陷入循环
     56            *     2
     57            *       发送数据时，如果太频繁，将致大部分时间都在循环中，使按键无法判断
     58            */

   \                                 In section .text, align 2, keep-with-next
     59          void UART_Send_String(char *str)
     60          {
   \                     UART_Send_String: (+1)
   \   00000000   0xB500             PUSH     {LR}
   \   00000002   0xE009             B        ??UART_Send_String_0
     61          //    uint16 i = 0;
     62          
     63              while (*str != '\0')
     64              {
     65                  //等待发送缓冲区空
     66                  while (! ((uart[UART_PART]->S1) & UART_S1_TDRE_MASK) );
   \                     ??UART_Send_String_1: (+1)
   \   00000004   0x....             LDR      R1,??DataTable3
   \   00000006   0x6889             LDR      R1,[R1, #+8]
   \   00000008   0x7909             LDRB     R1,[R1, #+4]
   \   0000000A   0x0609             LSLS     R1,R1,#+24
   \   0000000C   0xD5FA             BPL      ??UART_Send_String_1
     67          //        {
     68          //            if (++i >= 65530)   //防止没有数据发送时，陷入死循环
     69          //                break;
     70          //        }
     71                  //发送数据
     72                  uart[UART_PART]->D = (uint8)(*str++);
   \   0000000E   0x7801             LDRB     R1,[R0, #+0]
   \   00000010   0x....             LDR      R2,??DataTable3
   \   00000012   0x6892             LDR      R2,[R2, #+8]
   \   00000014   0x71D1             STRB     R1,[R2, #+7]
   \   00000016   0x1C40             ADDS     R0,R0,#+1
     73              }
   \                     ??UART_Send_String_0: (+1)
   \   00000018   0x7801             LDRB     R1,[R0, #+0]
   \   0000001A   0x2900             CMP      R1,#+0
   \   0000001C   0xD1F2             BNE      ??UART_Send_String_1
     74          }
   \   0000001E   0xBD00             POP      {PC}             ;; return
     75          
     76          
     77          
     78          /**
     79            * 简介
     80            *     发送数组
     81            * 参数
     82            *     array   数组名
     83            *     len     字节数
     84            */

   \                                 In section .text, align 2, keep-with-next
     85          void UART_SendArray(uint8 *array, uint32 len)
     86          {
   \                     UART_SendArray: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0005             MOVS     R5,R0
   \   00000004   0x000C             MOVS     R4,R1
   \   00000006   0xE003             B        ??UART_SendArray_0
     87              while (len--)
     88              {
     89                  UART_Send_Byte(*array);
   \                     ??UART_SendArray_1: (+1)
   \   00000008   0x7828             LDRB     R0,[R5, #+0]
   \   0000000A   0x.... 0x....      BL       UART_Send_Byte
     90                  array++;
   \   0000000E   0x1C6D             ADDS     R5,R5,#+1
     91              }
   \                     ??UART_SendArray_0: (+1)
   \   00000010   0x0020             MOVS     R0,R4
   \   00000012   0x1E44             SUBS     R4,R0,#+1
   \   00000014   0x2800             CMP      R0,#+0
   \   00000016   0xD1F7             BNE      ??UART_SendArray_1
     92          }
   \   00000018   0xBD31             POP      {R0,R4,R5,PC}    ;; return
     93          
     94          //把一个8位数据以ASCII码形式发送

   \                                 In section .text, align 2, keep-with-next
     95          void UART_Send_Hex(uint8 data)
     96          {
   \                     UART_Send_Hex: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
     97              uint8 temp;
     98              temp=data>>4;
   \   00000004   0x0020             MOVS     R0,R4
   \   00000006   0xB2C0             UXTB     R0,R0
   \   00000008   0x0900             LSRS     R0,R0,#+4
     99              if(temp>=10)
   \   0000000A   0xB2C0             UXTB     R0,R0
   \   0000000C   0x280A             CMP      R0,#+10
   \   0000000E   0xDB04             BLT      ??UART_Send_Hex_0
    100                  UART_Send_Byte(temp-10+'A');
   \   00000010   0x3037             ADDS     R0,R0,#+55
   \   00000012   0xB2C0             UXTB     R0,R0
   \   00000014   0x.... 0x....      BL       UART_Send_Byte
   \   00000018   0xE003             B        ??UART_Send_Hex_1
    101              else
    102                  UART_Send_Byte(temp+'0');
   \                     ??UART_Send_Hex_0: (+1)
   \   0000001A   0x3030             ADDS     R0,R0,#+48
   \   0000001C   0xB2C0             UXTB     R0,R0
   \   0000001E   0x.... 0x....      BL       UART_Send_Byte
    103              temp=data&0x0F;
   \                     ??UART_Send_Hex_1: (+1)
   \   00000022   0x0720             LSLS     R0,R4,#+28       ;; ZeroExtS R0,R4,#+28,#+28
   \   00000024   0x0F00             LSRS     R0,R0,#+28
    104              if(temp>=10)
   \   00000026   0xB2C0             UXTB     R0,R0
   \   00000028   0x280A             CMP      R0,#+10
   \   0000002A   0xDB04             BLT      ??UART_Send_Hex_2
    105                  UART_Send_Byte(temp-10+'A');
   \   0000002C   0x3037             ADDS     R0,R0,#+55
   \   0000002E   0xB2C0             UXTB     R0,R0
   \   00000030   0x.... 0x....      BL       UART_Send_Byte
   \   00000034   0xE003             B        ??UART_Send_Hex_3
    106              else
    107                  UART_Send_Byte(temp+'0');
   \                     ??UART_Send_Hex_2: (+1)
   \   00000036   0x3030             ADDS     R0,R0,#+48
   \   00000038   0xB2C0             UXTB     R0,R0
   \   0000003A   0x.... 0x....      BL       UART_Send_Byte
    108          }
   \                     ??UART_Send_Hex_3: (+1)
   \   0000003E   0xBD10             POP      {R4,PC}          ;; return
    109          
    110          /**
    111            * 简介
    112            *     UART 发送无符号数
    113            * 参数
    114            *     num         无符号数
    115            * 备注
    116            */

   \                                 In section .text, align 2, keep-with-next
    117          void UART_Uint16(uint16 num, uint8 enter)
    118          {
   \                     UART_Uint16: (+1)
   \   00000000   0xB51F             PUSH     {R0-R4,LR}
   \   00000002   0x000C             MOVS     R4,R1
    119          	uint8 *ch1,ch[7], m[7];
    120              uint8 i = 0;
   \   00000004   0x2100             MOVS     R1,#+0
    121          
    122              if (num == 0)
   \   00000006   0xB280             UXTH     R0,R0
   \   00000008   0x2800             CMP      R0,#+0
   \   0000000A   0xD106             BNE      ??UART_Uint16_0
    123              {
    124                  m[0] = '0';
   \   0000000C   0x2030             MOVS     R0,#+48
   \   0000000E   0x4669             MOV      R1,SP
   \   00000010   0x7008             STRB     R0,[R1, #+0]
    125                  m[1] = '\0';
   \   00000012   0x2000             MOVS     R0,#+0
   \   00000014   0x4669             MOV      R1,SP
   \   00000016   0x7048             STRB     R0,[R1, #+1]
   \   00000018   0xE019             B        ??UART_Uint16_1
    126              }
    127              else
    128          	{
    129                  OLED_HEXACSII(num,ch);
   \                     ??UART_Uint16_0: (+1)
   \   0000001A   0xA902             ADD      R1,SP,#+8
   \   0000001C   0xB280             UXTH     R0,R0
   \   0000001E   0x.... 0x....      BL       OLED_HEXACSII
    130                  ch1 =&ch[1];
   \   00000022   0xA802             ADD      R0,SP,#+8
   \   00000024   0x1C40             ADDS     R0,R0,#+1
   \   00000026   0xE000             B        ??UART_Uint16_2
    131                  while (*ch1 == '0')
    132                  {
    133                      ch1++;
   \                     ??UART_Uint16_3: (+1)
   \   00000028   0x1C40             ADDS     R0,R0,#+1
    134                  }
   \                     ??UART_Uint16_2: (+1)
   \   0000002A   0x7801             LDRB     R1,[R0, #+0]
   \   0000002C   0x2930             CMP      R1,#+48
   \   0000002E   0xD0FB             BEQ      ??UART_Uint16_3
    135                  for (i=0; *ch1 != '\0'; i++)
   \   00000030   0x2100             MOVS     R1,#+0
   \   00000032   0xE005             B        ??UART_Uint16_4
    136                  {
    137                      m[i] = *ch1;
   \                     ??UART_Uint16_5: (+1)
   \   00000034   0x7802             LDRB     R2,[R0, #+0]
   \   00000036   0x466B             MOV      R3,SP
   \   00000038   0xB2C9             UXTB     R1,R1
   \   0000003A   0x545A             STRB     R2,[R3, R1]
    138                      ch1++;
   \   0000003C   0x1C40             ADDS     R0,R0,#+1
    139                  }
   \   0000003E   0x1C49             ADDS     R1,R1,#+1
   \                     ??UART_Uint16_4: (+1)
   \   00000040   0x7802             LDRB     R2,[R0, #+0]
   \   00000042   0x2A00             CMP      R2,#+0
   \   00000044   0xD1F6             BNE      ??UART_Uint16_5
    140                  m[i] = '\0';
   \   00000046   0x2000             MOVS     R0,#+0
   \   00000048   0x466A             MOV      R2,SP
   \   0000004A   0xB2C9             UXTB     R1,R1
   \   0000004C   0x5450             STRB     R0,[R2, R1]
    141              }
    142          
    143              UART_Send_String((char *)m);	//显示数字
   \                     ??UART_Uint16_1: (+1)
   \   0000004E   0x4668             MOV      R0,SP
   \   00000050   0x.... 0x....      BL       UART_Send_String
    144          
    145              if (enter)
   \   00000054   0xB2E4             UXTB     R4,R4
   \   00000056   0x2C00             CMP      R4,#+0
   \   00000058   0xD001             BEQ      ??UART_Uint16_6
    146              {
    147                  UART_Send_Enter();
   \   0000005A   0x.... 0x....      BL       UART_Send_Enter
    148              }
    149          }
   \                     ??UART_Uint16_6: (+1)
   \   0000005E   0xBD1F             POP      {R0-R4,PC}       ;; return
    150          
    151          /**
    152            * 简介
    153            *     UART发送 有符号数 (-32768 ~ 32767)
    154            * 参数
    155            *     num         有 符号数
    156            * 备注
    157            */

   \                                 In section .text, align 2, keep-with-next
    158          void UART_Int16(int16 num, uint8 enter)
    159          {
   \                     UART_Int16: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0005             MOVS     R5,R0
   \   00000004   0x000C             MOVS     R4,R1
    160          	if (num < 0)
   \   00000006   0xB22D             SXTH     R5,R5
   \   00000008   0x2D00             CMP      R5,#+0
   \   0000000A   0xD505             BPL      ??UART_Int16_0
    161              {
    162                  num = -num;
   \   0000000C   0x0028             MOVS     R0,R5
   \   0000000E   0xB200             SXTH     R0,R0
   \   00000010   0x4245             RSBS     R5,R0,#+0
    163                  UART_Send_Byte('-');
   \   00000012   0x202D             MOVS     R0,#+45
   \   00000014   0x.... 0x....      BL       UART_Send_Byte
    164              }
    165              UART_Uint16(num, 0);
   \                     ??UART_Int16_0: (+1)
   \   00000018   0x2100             MOVS     R1,#+0
   \   0000001A   0x0028             MOVS     R0,R5
   \   0000001C   0xB280             UXTH     R0,R0
   \   0000001E   0x.... 0x....      BL       UART_Uint16
    166          
    167              if (enter)
   \   00000022   0xB2E4             UXTB     R4,R4
   \   00000024   0x2C00             CMP      R4,#+0
   \   00000026   0xD001             BEQ      ??UART_Int16_1
    168              {
    169                  UART_Send_Enter();
   \   00000028   0x.... 0x....      BL       UART_Send_Enter
    170              }
    171          }
   \                     ??UART_Int16_1: (+1)
   \   0000002C   0xBD31             POP      {R0,R4,R5,PC}    ;; return
    172          
    173          /**
    174            * 简介
    175            *     发送 float
    176            * 参数
    177            *     data    数据
    178            *     enter
    179            *         0   不发送回车
    180            *         1   发送回车
    181            * 备注
    182            *     float 范围 -3.40E+38 ~ 3.40E+38
    183            *     本函数并不能真正发送float，整数大小不能超过uint32，小数注意精度
    184            */

   \                                 In section .text, align 2, keep-with-next
    185          void UART_SendFloat(float data, uint8 enter)
    186          {
   \                     UART_SendFloat: (+1)
   \   00000000   0xB5F8             PUSH     {R3-R7,LR}
   \   00000002   0x0006             MOVS     R6,R0
   \   00000004   0x000F             MOVS     R7,R1
    187              uint8 temp = 3;//小数显示位数
   \   00000006   0x2503             MOVS     R5,#+3
    188              uint32 integer;//存储整数
    189              float decimals;//存储小数
    190              uint8 decimalsInterger;//小数转换为整数
    191          
    192              if (data < 0)
   \   00000008   0x0030             MOVS     R0,R6
   \   0000000A   0x2100             MOVS     R1,#+0
   \   0000000C   0x.... 0x....      BL       __aeabi_cfcmple
   \   00000010   0xD205             BCS      ??UART_SendFloat_0
    193              {
    194                  data = -data;
   \   00000012   0x2080             MOVS     R0,#+128
   \   00000014   0x0600             LSLS     R0,R0,#+24       ;; #-2147483648
   \   00000016   0x4046             EORS     R6,R6,R0
    195                  UART_Send_Byte('-');
   \   00000018   0x202D             MOVS     R0,#+45
   \   0000001A   0x.... 0x....      BL       UART_Send_Byte
    196              }
    197          
    198              integer = (uint32)data;
   \                     ??UART_SendFloat_0: (+1)
   \   0000001E   0x0030             MOVS     R0,R6
   \   00000020   0x.... 0x....      BL       __aeabi_f2uiz
   \   00000024   0x9000             STR      R0,[SP, #+0]
    199              decimals = data - (float)integer;
   \   00000026   0x9800             LDR      R0,[SP, #+0]
   \   00000028   0x.... 0x....      BL       __aeabi_ui2f
   \   0000002C   0x0001             MOVS     R1,R0
   \   0000002E   0x0030             MOVS     R0,R6
   \   00000030   0x.... 0x....      BL       __aeabi_fsub
   \   00000034   0x0004             MOVS     R4,R0
    200          
    201              //发送整数
    202              if (data > 9999)
   \   00000036   0x0030             MOVS     R0,R6
   \   00000038   0x....             LDR      R1,??DataTable3_1  ;; 0x461c3c01
   \   0000003A   0x.... 0x....      BL       __aeabi_cfrcmple
   \   0000003E   0xD809             BHI      ??UART_SendFloat_1
    203              {
    204                  UART_Uint16(integer/10000, 0);
   \   00000040   0x2100             MOVS     R1,#+0
   \   00000042   0x000E             MOVS     R6,R1
   \   00000044   0x9800             LDR      R0,[SP, #+0]
   \   00000046   0x....             LDR      R1,??DataTable3_2  ;; 0x2710
   \   00000048   0x.... 0x....      BL       __aeabi_uidiv
   \   0000004C   0x0031             MOVS     R1,R6
   \   0000004E   0xB280             UXTH     R0,R0
   \   00000050   0x.... 0x....      BL       UART_Uint16
    205              }
    206              UART_Uint16(integer%10000, 0);
   \                     ??UART_SendFloat_1: (+1)
   \   00000054   0x2100             MOVS     R1,#+0
   \   00000056   0x000E             MOVS     R6,R1
   \   00000058   0x9800             LDR      R0,[SP, #+0]
   \   0000005A   0x....             LDR      R1,??DataTable3_2  ;; 0x2710
   \   0000005C   0x.... 0x....      BL       __aeabi_uidivmod
   \   00000060   0x0008             MOVS     R0,R1
   \   00000062   0x0031             MOVS     R1,R6
   \   00000064   0xB280             UXTH     R0,R0
   \   00000066   0x.... 0x....      BL       UART_Uint16
    207          
    208              //发送小数
    209              UART_Send_Byte('.');
   \   0000006A   0x202E             MOVS     R0,#+46
   \   0000006C   0x.... 0x....      BL       UART_Send_Byte
   \   00000070   0xE018             B        ??UART_SendFloat_2
    210              while (temp)
    211              {
    212                  temp --;
   \                     ??UART_SendFloat_3: (+1)
   \   00000072   0x1E6D             SUBS     R5,R5,#+1
    213                  decimals *= 10;
   \   00000074   0x....             LDR      R0,??DataTable3_3  ;; 0x41200000
   \   00000076   0x0021             MOVS     R1,R4
   \   00000078   0x.... 0x....      BL       __aeabi_fmul
   \   0000007C   0x0004             MOVS     R4,R0
    214                  decimalsInterger = (uint8)decimals + 0x30;
   \   0000007E   0x0020             MOVS     R0,R4
   \   00000080   0x.... 0x....      BL       __aeabi_f2iz
   \   00000084   0x0006             MOVS     R6,R0
   \   00000086   0x3630             ADDS     R6,R6,#+48
    215                  UART_Send_Byte((char)decimalsInterger);
   \   00000088   0x0030             MOVS     R0,R6
   \   0000008A   0xB2C0             UXTB     R0,R0
   \   0000008C   0x.... 0x....      BL       UART_Send_Byte
    216                  decimals = decimals - (float)(decimalsInterger-0x30);
   \   00000090   0xB2F6             UXTB     R6,R6
   \   00000092   0x3E30             SUBS     R6,R6,#+48
   \   00000094   0x0030             MOVS     R0,R6
   \   00000096   0x.... 0x....      BL       __aeabi_i2f
   \   0000009A   0x0001             MOVS     R1,R0
   \   0000009C   0x0020             MOVS     R0,R4
   \   0000009E   0x.... 0x....      BL       __aeabi_fsub
   \   000000A2   0x0004             MOVS     R4,R0
    217              }
   \                     ??UART_SendFloat_2: (+1)
   \   000000A4   0xB2ED             UXTB     R5,R5
   \   000000A6   0x2D00             CMP      R5,#+0
   \   000000A8   0xD1E3             BNE      ??UART_SendFloat_3
    218          
    219              if (enter)
   \   000000AA   0xB2FF             UXTB     R7,R7
   \   000000AC   0x2F00             CMP      R7,#+0
   \   000000AE   0xD001             BEQ      ??UART_SendFloat_4
    220              {
    221                  UART_Send_Enter();
   \   000000B0   0x.... 0x....      BL       UART_Send_Enter
    222              }
    223          }
   \                     ??UART_SendFloat_4: (+1)
   \   000000B4   0xBDF1             POP      {R0,R4-R7,PC}    ;; return
    224          
    225          /**
    226            * 简介
    227            *     获取串口数据
    228            */

   \                                 In section .text, align 2, keep-with-next
    229          uint8 UART_GetData()
    230          {
   \                     UART_GetData: (+1)
   \   00000000   0xB500             PUSH     {LR}
    231              uint8 temp = 0;
   \   00000002   0x2000             MOVS     R0,#+0
    232          
    233              if ( uart[UART_PART]->S1 & UART_S1_RDRF_MASK)
   \   00000004   0x....             LDR      R1,??DataTable3
   \   00000006   0x6889             LDR      R1,[R1, #+8]
   \   00000008   0x7909             LDRB     R1,[R1, #+4]
   \   0000000A   0x0689             LSLS     R1,R1,#+26
   \   0000000C   0xD502             BPL      ??UART_GetData_0
    234              {
    235          
    236                  temp =  uart[UART_PART]->D;
   \   0000000E   0x....             LDR      R0,??DataTable3
   \   00000010   0x6880             LDR      R0,[R0, #+8]
   \   00000012   0x79C0             LDRB     R0,[R0, #+7]
    237              }
    238          
    239              return temp;
   \                     ??UART_GetData_0: (+1)
   \   00000014   0xB2C0             UXTB     R0,R0
   \   00000016   0xBD00             POP      {PC}             ;; return
    240          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3:
   \   00000000   0x........         DC32     uart

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_1:
   \   00000000   0x461C3C01         DC32     0x461c3c01

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_2:
   \   00000000   0x00002710         DC32     0x2710

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_3:
   \   00000000   0x41200000         DC32     0x41200000
    241          
    242          
    243          
    244          
    245          /* -------------------------------------------------------------- 未完成的函数 */
    246          
    247          
    248          /* ------------------------------------------------  未完成的函数 -------- END */
    249          
    250          
    251          
    252          /* -------------------------------------- 有BUG的函数 不到万不得已 千万不要使用 */
    253          
    254          
    255          /**
    256            * 简介
    257            *     printf串口打印
    258            * 备注
    259            *     宏由内核提供
    260            *     此函数因逐飞库对启动文件的修改而无法使用，很遗憾，看不懂那堆汇编代码
    261            *     但在最底层printf已经被重指向了，所以可直接使用printf
    262            *     printf的端口由 DEBUG_PORT宏定义决定，波特率由 DEBUG_BAUD 定义
    263            *     但经过测试，逐飞定义的 printf 无法发送 %f 数据
    264            */
    265          //void UART_Send_Printf(const char *fmt,...)
    266          //{
    267          //    va_list ap;             //保存参数地址
    268          //    char string[64] = {0}; //放置解释好的字符串
    269          //
    270          //    //将字符串转换成串口可发送的
    271          //    va_start(ap, fmt);      //计算出第一个实际参数的地址
    272          //    vsnprintf(string, 64, fmt, ap); //把输入的格式字符串进行解释
    273          //    va_end(ap);                     //ap指针清空
    274          //
    275          //    //发送解释好的字符串
    276          //    UART_Send_String(string);
    277          //}
    278          
    279          /**
    280            * 简介
    281            *     发送 float 数据
    282            * 参数
    283            *     date    数据
    284            *     len     显示长度
    285            *     enter   是否发送回车
    286            *       0  不发送
    287            *       1  发送
    288            * 备注
    289            *     此函数千万不要碰，变量定义都不要动，由于逐飞库的printf
    290            *     此函数里面的sprintf有一个超级bug，有时候只是定义变一下，
    291            *     换一个变量，这个函数就会卡死
    292            */
    293          //void UART_SendFloat(float date,  uint8 len, uint8 enter)
    294          //{
    295          //
    296          ////    uint8 i = 0;
    297          ////
    298          ////    for (i=0; i<FLOAT_ARRAY_NUM; i++)
    299          ////    {
    300          ////        UART_FloatArray[i] = 0;
    301          ////    }
    302          ////
    303          ////    sprintf(UART_FloatArray, "%f", date);
    304          ////
    305          ////    //不能使用发送字符串的函数，原因不明，总之会出错
    306          //////    UART_FloatArray[len] = '\0';
    307          //////    UART_Send_String(UART_FloatArray);
    308          //
    309          //    uint8 i = 0;
    310          //
    311          //    for (i=0; i<FLOAT_ARRAY_NUM; i++)
    312          //    {
    313          //        UART_SendFloatArray[i] = 0;
    314          //    }
    315          //
    316          //    sprintf(UART_SendFloatArray, "%f", date);
    317          //
    318          //    for (i=0; i<len; i++)
    319          //    {
    320          //        UART_Send_Byte(UART_SendFloatArray[i]);
    321          //    }
    322          //
    323          //    if (enter)
    324          //    {
    325          //        UART_Send_Enter();
    326          //    }
    327          //}
    328          
    329          
    330          /* -----------------------  有BUG的函数 不到万不得已 千万不要使用  -------- END */
    331          

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       4   UART_GetData
      16   UART_Int16
        16   -> UART_Send_Byte
        16   -> UART_Send_Enter
        16   -> UART_Uint16
      16   UART_SendArray
        16   -> UART_Send_Byte
      24   UART_SendFloat
        24   -> UART_Send_Byte
        24   -> UART_Send_Enter
        24   -> UART_Uint16
        24   -> __aeabi_f2iz
        24   -> __aeabi_f2uiz
        24   -> __aeabi_fmul
        24   -> __aeabi_fsub
        24   -> __aeabi_i2f
        24   -> __aeabi_ui2f
        24 __aeabi_cfcmple
        24 __aeabi_cfrcmple
        24 __aeabi_uidiv
        24 __aeabi_uidivmod
       4   UART_Send_Byte
       8   UART_Send_Enter
         8   -> UART_Send_Byte
       8   UART_Send_Hex
         8   -> UART_Send_Byte
       4   UART_Send_String
      24   UART_Uint16
        24   -> OLED_HEXACSII
        24   -> UART_Send_Enter
        24   -> UART_Send_String


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable3
       4  ??DataTable3_1
       4  ??DataTable3_2
       4  ??DataTable3_3
      24  UART_GetData
      46  UART_Int16
      26  UART_SendArray
     182  UART_SendFloat
      20  UART_Send_Byte
      16  UART_Send_Enter
      64  UART_Send_Hex
      32  UART_Send_String
      96  UART_Uint16

 
 522 bytes in section .text
 
 522 bytes of CODE memory

Errors: none
Warnings: none
