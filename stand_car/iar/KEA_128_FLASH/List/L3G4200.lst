###############################################################################
#
# IAR ANSI C/C++ Compiler V7.40.2.8542/W32 for ARM        28/Sep/2018  18:58:04
# Copyright 1999-2015 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        I:\电磁程序-ZS\电磁直立-ZS\stand_ZS_9.28\device\C\L3G4200.c
#    Command line =  
#        I:\电磁程序-ZS\电磁直立-ZS\stand_ZS_9.28\device\C\L3G4200.c -D IAR -D
#        TWR_K60N512 -D _DLIB_FILE_DESCRIPTOR -D DA_OLED -lCN
#        I:\电磁程序-ZS\电磁直立-ZS\stand_ZS_9.28\iar\KEA_128_FLASH\List\ -lB
#        I:\电磁程序-ZS\电磁直立-ZS\stand_ZS_9.28\iar\KEA_128_FLASH\List\ -o
#        I:\电磁程序-ZS\电磁直立-ZS\stand_ZS_9.28\iar\KEA_128_FLASH\Obj\
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M0+ -e --fpu=None --dlib_config
#        F:\IAR安装包\arm\INC\c\DLib_Config_Normal.h -I
#        I:\电磁程序-ZS\电磁直立-ZS\stand_ZS_9.28\iar\..\device\H\ -I
#        I:\电磁程序-ZS\电磁直立-ZS\stand_ZS_9.28\iar\..\user\H\ -I
#        I:\电磁程序-ZS\电磁直立-ZS\stand_ZS_9.28\iar\..\system\ -I
#        I:\电磁程序-ZS\电磁直立-ZS\stand_ZS_9.28\iar\..\lib\H\ -I
#        I:\电磁程序-ZS\电磁直立-ZS\stand_ZS_9.28\iar\..\system\coreSupport\
#        -Ol
#    List file    =  
#        I:\电磁程序-ZS\电磁直立-ZS\stand_ZS_9.28\iar\KEA_128_FLASH\List\L3G4200.lst
#    Object file  =  
#        I:\电磁程序-ZS\电磁直立-ZS\stand_ZS_9.28\iar\KEA_128_FLASH\Obj\L3G4200.o
#
###############################################################################

I:\电磁程序-ZS\电磁直立-ZS\stand_ZS_9.28\device\C\L3G4200.c
      1          #include "L3G4200.h"
      2          
      3          
      4          

   \                                 In section .data, align 4
      5          SPI_Type* SPI[2] = SPI_BASES; //定义两个指针数组保存 SPIx 的地址
   \                     SPI:
   \   00000000   0x40076000         DC32 40076000H, 40077000H
   \              0x40077000   
      6          
      7          //相关参数

   \                                 In section .bss, align 1
      8          uint8 gyro_ID = 0;
   \                     gyro_ID:
   \   00000000                      DS8 1

   \                                 In section .bss, align 2
      9          int16 gyro_x = 0, gyro_y = 0, gyro_z = 0;//存储最后三轴数据
   \                     gyro_x:
   \   00000000                      DS8 2

   \                                 In section .bss, align 2
   \                     gyro_y:
   \   00000000                      DS8 2

   \                                 In section .bss, align 2
   \                     gyro_z:
   \   00000000                      DS8 2

   \                                 In section .bss, align 4
     10          int gyro_y_valu = 0;
   \                     gyro_y_valu:
   \   00000000                      DS8 4

   \                                 In section .bss, align 1
     11          uint8 a, b;
   \                     a:
   \   00000000                      DS8 1

   \                                 In section .bss, align 1
   \                     `b`:
   \   00000000                      DS8 1

   \                                 In section .bss, align 1
     12          char gyro_y_num = 0;
   \                     gyro_y_num:
   \   00000000                      DS8 1

   \                                 In section .bss, align 4
     13          int gyro_y_he = 0;
   \                     gyro_y_he:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
     14          int16 L3G4200_valu[2];
   \                     L3G4200_valu:
   \   00000000                      DS8 4
     15          

   \                                 In section .text, align 2, keep-with-next
     16          void SPI_delay(void)
     17          {
   \                     SPI_delay: (+1)
   \   00000000   0xB500             PUSH     {LR}
     18          	uint16 j=120;
   \   00000002   0x2078             MOVS     R0,#+120
     19          	while(j--);
   \                     ??SPI_delay_0: (+1)
   \   00000004   0x0001             MOVS     R1,R0
   \   00000006   0x1E48             SUBS     R0,R1,#+1
   \   00000008   0xB289             UXTH     R1,R1
   \   0000000A   0x2900             CMP      R1,#+0
   \   0000000C   0xD1FA             BNE      ??SPI_delay_0
     20          }
   \   0000000E   0xBD00             POP      {PC}             ;; return
     21          
     22          /**
     23            * 简介
     24            *     写命令
     25            */

   \                                 In section .text, align 2, keep-with-next
     26          void L3G4200_WrCmd(unsigned char cmd)
     27          {
   \                     L3G4200_WrCmd: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0004             MOVS     R4,R0
     28            uint8 i=8;
   \   00000004   0x2508             MOVS     R5,#+8
     29            CL_L3G4200_CS;
   \   00000006   0x2100             MOVS     R1,#+0
   \   00000008   0x2037             MOVS     R0,#+55
   \   0000000A   0x.... 0x....      BL       GpioSet
     30            SPI_delay();
   \   0000000E   0x.... 0x....      BL       SPI_delay
   \   00000012   0xE00A             B        ??L3G4200_WrCmd_0
     31          //  CL_L3G4200_MI;
     32            while(i--)
     33            {
     34              CL_L3G4200_CLK;
     35              if(cmd&0x80)
     36              {
     37                  L3G4200_MO;
     38              }
     39              else
     40              {
     41                CL_L3G4200_MO;
   \                     ??L3G4200_WrCmd_1: (+1)
   \   00000014   0x2100             MOVS     R1,#+0
   \   00000016   0x2035             MOVS     R0,#+53
   \   00000018   0x.... 0x....      BL       GpioSet
     42              }
     43              cmd<<=1;
   \                     ??L3G4200_WrCmd_2: (+1)
   \   0000001C   0x0064             LSLS     R4,R4,#+1
     44            SPI_delay();
   \   0000001E   0x.... 0x....      BL       SPI_delay
     45              L3G4200_CLK;
   \   00000022   0x2101             MOVS     R1,#+1
   \   00000024   0x2034             MOVS     R0,#+52
   \   00000026   0x.... 0x....      BL       GpioSet
   \                     ??L3G4200_WrCmd_0: (+1)
   \   0000002A   0x0028             MOVS     R0,R5
   \   0000002C   0x1E45             SUBS     R5,R0,#+1
   \   0000002E   0xB2C0             UXTB     R0,R0
   \   00000030   0x2800             CMP      R0,#+0
   \   00000032   0xD00A             BEQ      ??L3G4200_WrCmd_3
   \   00000034   0x2100             MOVS     R1,#+0
   \   00000036   0x2034             MOVS     R0,#+52
   \   00000038   0x.... 0x....      BL       GpioSet
   \   0000003C   0x0620             LSLS     R0,R4,#+24
   \   0000003E   0xD5E9             BPL      ??L3G4200_WrCmd_1
   \   00000040   0x2101             MOVS     R1,#+1
   \   00000042   0x2017             MOVS     R0,#+23
   \   00000044   0x.... 0x....      BL       GpioSet
   \   00000048   0xE7E8             B        ??L3G4200_WrCmd_2
     46            }
     47          
     48          //  L3G4200_MI;
     49            L3G4200_CS;
   \                     ??L3G4200_WrCmd_3: (+1)
   \   0000004A   0x2101             MOVS     R1,#+1
   \   0000004C   0x2037             MOVS     R0,#+55
   \   0000004E   0x.... 0x....      BL       GpioSet
     50          }
   \   00000052   0xBD31             POP      {R0,R4,R5,PC}    ;; return
     51          
     52          /**
     53            * 简介
     54            *     读数据
     55            */

   \                                 In section .text, align 2, keep-with-next
     56          uint8 L3G4200_ReData()
     57          {
   \                     L3G4200_ReData: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
     58            uint8 i=8;
   \   00000002   0x2508             MOVS     R5,#+8
     59            uint8 byte = 0;
   \   00000004   0x2400             MOVS     R4,#+0
     60          
     61            CL_L3G4200_CS;
   \   00000006   0x2100             MOVS     R1,#+0
   \   00000008   0x2037             MOVS     R0,#+55
   \   0000000A   0x.... 0x....      BL       GpioSet
     62            SPI_delay();
   \   0000000E   0x.... 0x....      BL       SPI_delay
   \   00000012   0xE010             B        ??L3G4200_ReData_0
     63            while(i--)
     64            {
     65              L3G4200_CLK;
   \                     ??L3G4200_ReData_1: (+1)
   \   00000014   0x2101             MOVS     R1,#+1
   \   00000016   0x2034             MOVS     R0,#+52
   \   00000018   0x.... 0x....      BL       GpioSet
     66              SPI_delay();
   \   0000001C   0x.... 0x....      BL       SPI_delay
     67              CL_L3G4200_CLK;
   \   00000020   0x2100             MOVS     R1,#+0
   \   00000022   0x2034             MOVS     R0,#+52
   \   00000024   0x.... 0x....      BL       GpioSet
     68          
     69              if (GpioGet(SPI1_MISO) == 1)
   \   00000028   0x2036             MOVS     R0,#+54
   \   0000002A   0x.... 0x....      BL       GpioGet
   \   0000002E   0x2801             CMP      R0,#+1
   \   00000030   0xD100             BNE      ??L3G4200_ReData_2
     70              {
     71                  byte += 1;
   \   00000032   0x1C64             ADDS     R4,R4,#+1
     72              }
     73          
     74              byte<<=1;
   \                     ??L3G4200_ReData_2: (+1)
   \   00000034   0x0064             LSLS     R4,R4,#+1
     75            }
   \                     ??L3G4200_ReData_0: (+1)
   \   00000036   0x0028             MOVS     R0,R5
   \   00000038   0x1E45             SUBS     R5,R0,#+1
   \   0000003A   0xB2C0             UXTB     R0,R0
   \   0000003C   0x2800             CMP      R0,#+0
   \   0000003E   0xD1E9             BNE      ??L3G4200_ReData_1
     76          
     77            L3G4200_CS;
   \   00000040   0x2101             MOVS     R1,#+1
   \   00000042   0x2037             MOVS     R0,#+55
   \   00000044   0x.... 0x....      BL       GpioSet
     78          
     79            return byte;
   \   00000048   0x0020             MOVS     R0,R4
   \   0000004A   0xB2C0             UXTB     R0,R0
   \   0000004C   0xBD32             POP      {R1,R4,R5,PC}    ;; return
     80          }
     81          
     82          /**
     83            * 简介
     84            *     读写
     85            */

   \                                 In section .text, align 2, keep-with-next
     86          uint8 SPI_ReadWrite(uint8 byte)
     87          {
   \                     SPI_ReadWrite: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
   \   00000002   0x0001             MOVS     R1,R0
     88              uint8 temp = 0;
   \   00000004   0x2000             MOVS     R0,#+0
     89          
     90              L3G4200_WrCmd(byte);
   \   00000006   0x0008             MOVS     R0,R1
   \   00000008   0xB2C0             UXTB     R0,R0
   \   0000000A   0x.... 0x....      BL       L3G4200_WrCmd
     91              temp = L3G4200_ReData();
   \   0000000E   0x.... 0x....      BL       L3G4200_ReData
     92          
     93          
     94          
     95          //    uint8 temp = 0;
     96          //
     97          //    while( !( SPI[1]->S & SPI_S_SPTEF_MASK ) );  //等待发送完成
     98          //    SPI[1]->D = byte;          //清除发送完成标志位
     99          //
    100          //    while( !( SPI[1]->S & SPI_S_SPRF_MASK ) );   //等待接收数据
    101          //    temp = (uint8)(SPI[1]->D);;           //读取数据，转换格式
    102          //
    103              return temp;
   \   00000012   0xB2C0             UXTB     R0,R0
   \   00000014   0xBD02             POP      {R1,PC}          ;; return
    104          }
    105          /**
    106            * 简介
    107            *     写陀螺仪寄存器
    108            * 参数
    109            *     reg：寄存器地址
    110            *     value：写入的数据
    111            */

   \                                 In section .text, align 2, keep-with-next
    112          void L3G4200_Write_Reg(uint8 reg, uint8 value)
    113          {
   \                     L3G4200_Write_Reg: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x000C             MOVS     R4,R1
    114              SPI_ReadWrite(reg);
   \   00000004   0xB2C0             UXTB     R0,R0
   \   00000006   0x.... 0x....      BL       SPI_ReadWrite
    115              SPI_ReadWrite(value);
   \   0000000A   0x0020             MOVS     R0,R4
   \   0000000C   0xB2C0             UXTB     R0,R0
   \   0000000E   0x.... 0x....      BL       SPI_ReadWrite
    116          
    117          
    118          //    SPI_ReadWrite(reg);     //高位在前，所以读 -> 最高位要写1
    119          //    SPI_ReadWrite(value);   //此时写入的是数据
    120          }
   \   00000012   0xBD10             POP      {R4,PC}          ;; return
    121          
    122          /**
    123            * 简介
    124            *     读取陀螺仪寄存器
    125            * 参数
    126            *     reg：寄存器地址
    127            *     value：保存地址
    128            * 注意
    129            *     一个读操作需16个脉冲
    130            *     前八位状态，后八位数据
    131            */

   \                                 In section .text, align 2, keep-with-next
    132          void L3G4200_Read_Reg(uint8 reg, uint8 *value)
    133          {
   \                     L3G4200_Read_Reg: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x000C             MOVS     R4,R1
    134              SPI_ReadWrite(0x80|reg);
   \   00000004   0x2180             MOVS     R1,#+128
   \   00000006   0x4301             ORRS     R1,R1,R0
   \   00000008   0x0008             MOVS     R0,R1
   \   0000000A   0xB2C0             UXTB     R0,R0
   \   0000000C   0x.... 0x....      BL       SPI_ReadWrite
    135              *value = SPI_ReadWrite(0xff);
   \   00000010   0x20FF             MOVS     R0,#+255
   \   00000012   0x.... 0x....      BL       SPI_ReadWrite
   \   00000016   0x7020             STRB     R0,[R4, #+0]
    136          
    137          //    SPI_ReadWrite(0x80|reg);        //高位在前，所以读 -> 最高位要写1
    138          //    *value = SPI_ReadWrite(0xff);   //此时写入的是数据
    139          }
   \   00000018   0xBD10             POP      {R4,PC}          ;; return
    140          
    141          
    142          /**
    143            * 简介
    144            *     陀螺仪初始化
    145            * 注意
    146            *     使能了2个轴
    147            */

   \                                 In section .text, align 2, keep-with-next
    148          void L3G4200_Init(void)
    149          {
   \                     L3G4200_Init: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    150              i2c_init(IIC_PORT, 400*1000);
   \   00000002   0x....             LDR      R1,??DataTable1  ;; 0x61a80
   \   00000004   0x2001             MOVS     R0,#+1
   \   00000006   0x.... 0x....      BL       i2c_init
    151          
    152              //数据输出速率800Hz，LPF截止频率110Hz，工作在正常模式，使能X Y 轴
    153          //    i2c_write_reg(IIC_PORT, L3G4200_DEV_ADD, CTRL_REG1_4200, 0xFF);
    154              i2c_write_reg(IIC_PORT, L3G4200_DEV_ADD, CTRL_REG1_4200, 0xFB);
   \   0000000A   0x23FB             MOVS     R3,#+251
   \   0000000C   0x2220             MOVS     R2,#+32
   \   0000000E   0x2169             MOVS     R1,#+105
   \   00000010   0x2001             MOVS     R0,#+1
   \   00000012   0x.... 0x....      BL       i2c_write_reg
    155          //    gyro_ID = i2c_read_reg(IIC_PORT, L3G4200_DEV_ADD, CTRL_REG1_4200);
    156          
    157              //高通滤波器配置
    158              i2c_write_reg(IIC_PORT, L3G4200_DEV_ADD, CTRL_REG2_4200, 0x00);
   \   00000016   0x2300             MOVS     R3,#+0
   \   00000018   0x2221             MOVS     R2,#+33
   \   0000001A   0x2169             MOVS     R1,#+105
   \   0000001C   0x2001             MOVS     R0,#+1
   \   0000001E   0x.... 0x....      BL       i2c_write_reg
    159          
    160              //关闭所有中断,配置IIC DRDY
    161              i2c_write_reg(IIC_PORT, L3G4200_DEV_ADD, CTRL_REG3_4200, 0x08);
   \   00000022   0x2308             MOVS     R3,#+8
   \   00000024   0x2222             MOVS     R2,#+34
   \   00000026   0x2169             MOVS     R1,#+105
   \   00000028   0x2001             MOVS     R0,#+1
   \   0000002A   0x.... 0x....      BL       i2c_write_reg
    162          //    gyro_ID = i2c_read_reg(IIC_PORT, L3G4200_DEV_ADD, CTRL_REG3_4200);
    163          
    164              //使能block data updata功能，确保正确读出数据、使能小端模式、选择满量程250dps
    165              i2c_write_reg(IIC_PORT, L3G4200_DEV_ADD, CTRL_REG4_4200, 0x80);
   \   0000002E   0x2380             MOVS     R3,#+128
   \   00000030   0x2223             MOVS     R2,#+35
   \   00000032   0x2169             MOVS     R1,#+105
   \   00000034   0x2001             MOVS     R0,#+1
   \   00000036   0x.... 0x....      BL       i2c_write_reg
    166          
    167              //使能LPF2，关闭HPF（打开后不能正常使用）
    168              i2c_write_reg(IIC_PORT, L3G4200_DEV_ADD, CTRL_REG5_4200, 0x02);
   \   0000003A   0x2302             MOVS     R3,#+2
   \   0000003C   0x2224             MOVS     R2,#+36
   \   0000003E   0x2169             MOVS     R1,#+105
   \   00000040   0x2001             MOVS     R0,#+1
   \   00000042   0x.... 0x....      BL       i2c_write_reg
    169          
    170              gyro_ID = i2c_read_reg(IIC_PORT, L3G4200_DEV_ADD, OUT_TEMP_4200);
   \   00000046   0x2226             MOVS     R2,#+38
   \   00000048   0x2169             MOVS     R1,#+105
   \   0000004A   0x2001             MOVS     R0,#+1
   \   0000004C   0x.... 0x....      BL       i2c_read_reg
   \   00000050   0x....             LDR      R1,??DataTable1_1
   \   00000052   0x7008             STRB     R0,[R1, #+0]
    171          }
   \   00000054   0xBD01             POP      {R0,PC}          ;; return
    172          
    173          /**
    174            * 简介
    175            *     L3G4200 读取
    176            * 注意
    177            *     此处只使用XY轴数据
    178            *     使用硬件iic 读一根轴需要470us(测试使用的是内部晶振)
    179            *     使用模拟IIC 读一根轴需要4.9ms
    180            */

   \                                 In section .text, align 2, keep-with-next
    181          void L3G4200_Read(void)
    182          {
   \                     L3G4200_Read: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
    183              //存储三轴数据，每一轴两个字节，先低后高，补码形式存储
    184              uint8 gx, gy;//, gz;
    185              uint16 wgx, wgy;//, wgz;
    186              
    187          
    188              //经测试读两根轴需要 3.72 ms 三根轴更长，所以只读需要的
    189              if ( i2c_read_reg(IIC_PORT, L3G4200_DEV_ADD, STATUS_REG_4200)&0x80 )//查看数据是否准备好了。如果没有准备好，读取则可能读取到错误数据。读取频率最好是高于数据输出频率
   \   00000002   0x2227             MOVS     R2,#+39
   \   00000004   0x2169             MOVS     R1,#+105
   \   00000006   0x2001             MOVS     R0,#+1
   \   00000008   0x.... 0x....      BL       i2c_read_reg
   \   0000000C   0x0600             LSLS     R0,R0,#+24
   \   0000000E   0xD54E             BPL      ??L3G4200_Read_0
    190              {
    191                  //读一根轴需要470us
    192                  wgx = i2c_read_reg(IIC_PORT, L3G4200_DEV_ADD, OUT_X_H_4200);
   \   00000010   0x2229             MOVS     R2,#+41
   \   00000012   0x2169             MOVS     R1,#+105
   \   00000014   0x2001             MOVS     R0,#+1
   \   00000016   0x.... 0x....      BL       i2c_read_reg
   \   0000001A   0x0004             MOVS     R4,R0
    193          		gx = i2c_read_reg(IIC_PORT, L3G4200_DEV_ADD, OUT_X_L_4200);
   \   0000001C   0x2228             MOVS     R2,#+40
   \   0000001E   0x2169             MOVS     R1,#+105
   \   00000020   0x2001             MOVS     R0,#+1
   \   00000022   0x.... 0x....      BL       i2c_read_reg
    194                  gyro_x = (wgx<<8) + gx;
   \   00000026   0xB2A4             UXTH     R4,R4
   \   00000028   0x0221             LSLS     R1,R4,#+8
   \   0000002A   0xB2C0             UXTB     R0,R0
   \   0000002C   0x1808             ADDS     R0,R1,R0
   \   0000002E   0x....             LDR      R1,??DataTable1_2
   \   00000030   0x8008             STRH     R0,[R1, #+0]
    195                  gyro_x >>= 3;
   \   00000032   0x....             LDR      R0,??DataTable1_2
   \   00000034   0x2100             MOVS     R1,#+0
   \   00000036   0x5E40             LDRSH    R0,[R0, R1]
   \   00000038   0xB200             SXTH     R0,R0
   \   0000003A   0x10C0             ASRS     R0,R0,#+3
   \   0000003C   0x....             LDR      R1,??DataTable1_2
   \   0000003E   0x8008             STRH     R0,[R1, #+0]
    196          
    197          //        wgz = IIC_readReg(L3G4200_DEV_ADD, OUT_Y_H_4200, IIC);
    198          //		gz = IIC_readReg(L3G4200_DEV_ADD, OUT_Y_L_4200, IIC);
    199          //        gyro_z = (wgz<<8) + gz;
    200          //        gyro_z >>= 3;
    201          
    202                  wgy = i2c_read_reg(IIC_PORT, L3G4200_DEV_ADD, OUT_Y_H_4200);
   \   00000040   0x222B             MOVS     R2,#+43
   \   00000042   0x2169             MOVS     R1,#+105
   \   00000044   0x2001             MOVS     R0,#+1
   \   00000046   0x.... 0x....      BL       i2c_read_reg
   \   0000004A   0x0004             MOVS     R4,R0
    203          		gy = i2c_read_reg(IIC_PORT, L3G4200_DEV_ADD, OUT_Y_L_4200);
   \   0000004C   0x222A             MOVS     R2,#+42
   \   0000004E   0x2169             MOVS     R1,#+105
   \   00000050   0x2001             MOVS     R0,#+1
   \   00000052   0x.... 0x....      BL       i2c_read_reg
    204                  gyro_y = (wgy<<8) + gy;
   \   00000056   0xB2A4             UXTH     R4,R4
   \   00000058   0x0221             LSLS     R1,R4,#+8
   \   0000005A   0xB2C0             UXTB     R0,R0
   \   0000005C   0x1808             ADDS     R0,R1,R0
   \   0000005E   0x....             LDR      R1,??DataTable1_3
   \   00000060   0x8008             STRH     R0,[R1, #+0]
    205                  gyro_y >>= 3;
   \   00000062   0x....             LDR      R0,??DataTable1_3
   \   00000064   0x2100             MOVS     R1,#+0
   \   00000066   0x5E40             LDRSH    R0,[R0, R1]
   \   00000068   0xB200             SXTH     R0,R0
   \   0000006A   0x10C0             ASRS     R0,R0,#+3
   \   0000006C   0x....             LDR      R1,??DataTable1_3
   \   0000006E   0x8008             STRH     R0,[R1, #+0]
    206                  
    207                  
    208                  //平均滤波法
    209                  gyro_y_num++;
   \   00000070   0x....             LDR      R0,??DataTable1_4
   \   00000072   0x7800             LDRB     R0,[R0, #+0]
   \   00000074   0x1C40             ADDS     R0,R0,#+1
   \   00000076   0x....             LDR      R1,??DataTable1_4
   \   00000078   0x7008             STRB     R0,[R1, #+0]
    210                  gyro_y_he += gyro_y;
   \   0000007A   0x....             LDR      R0,??DataTable1_5
   \   0000007C   0x6800             LDR      R0,[R0, #+0]
   \   0000007E   0x....             LDR      R1,??DataTable1_3
   \   00000080   0x2200             MOVS     R2,#+0
   \   00000082   0x5E89             LDRSH    R1,[R1, R2]
   \   00000084   0x1840             ADDS     R0,R0,R1
   \   00000086   0x....             LDR      R1,??DataTable1_5
   \   00000088   0x6008             STR      R0,[R1, #+0]
    211                  gyro_y_valu =  gyro_y_he/gyro_y_num;
   \   0000008A   0x....             LDR      R0,??DataTable1_5
   \   0000008C   0x6800             LDR      R0,[R0, #+0]
   \   0000008E   0x....             LDR      R1,??DataTable1_4
   \   00000090   0x7809             LDRB     R1,[R1, #+0]
   \   00000092   0x.... 0x....      BL       __aeabi_idiv
   \   00000096   0x....             LDR      R1,??DataTable1_6
   \   00000098   0x6008             STR      R0,[R1, #+0]
    212                  if(gyro_y_num == 10) {gyro_y_num = 0;gyro_y_he=0;}
   \   0000009A   0x....             LDR      R0,??DataTable1_4
   \   0000009C   0x7800             LDRB     R0,[R0, #+0]
   \   0000009E   0x280A             CMP      R0,#+10
   \   000000A0   0xD105             BNE      ??L3G4200_Read_0
   \   000000A2   0x2000             MOVS     R0,#+0
   \   000000A4   0x....             LDR      R1,??DataTable1_4
   \   000000A6   0x7008             STRB     R0,[R1, #+0]
   \   000000A8   0x2000             MOVS     R0,#+0
   \   000000AA   0x....             LDR      R1,??DataTable1_5
   \   000000AC   0x6008             STR      R0,[R1, #+0]
    213                  
    214              }
    215          }
   \                     ??L3G4200_Read_0: (+1)
   \   000000AE   0xBD10             POP      {R4,PC}          ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1:
   \   00000000   0x00061A80         DC32     0x61a80

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_1:
   \   00000000   0x........         DC32     gyro_ID

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_2:
   \   00000000   0x........         DC32     gyro_x

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_3:
   \   00000000   0x........         DC32     gyro_y

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_4:
   \   00000000   0x........         DC32     gyro_y_num

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_5:
   \   00000000   0x........         DC32     gyro_y_he

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_6:
   \   00000000   0x........         DC32     gyro_y_valu
    216          
    217          
    218          ////中值平均滤波法与电感采集相似
    219          //void L3G4200_Read_deal(void)
    220          //{
    221          //      int16  i,j,k,temp;
    222          //      int16  L3G4200_valu2[5][5],L3G4200_sum[5],L3G4200_valu1[5],L3G4200_V[3][5];
    223          //
    224          //      for(i=0;i<5;i++)
    225          //      {
    226          //            L3G4200_Read();
    227          //            L3G4200_valu2[0][i] = gyro_x;  //x轴数据
    228          //            L3G4200_valu2[1][i] = gyro_y;  //y轴数据
    229          //      }
    230          //   //////////////////////冒泡排序///////////////////////////////////
    231          //      for(i=0;i<2;i++)     
    232          //      {
    233          //         for(j=0;j<4;j++)  //五个数据排序
    234          //         {
    235          //            for(k=0;k<4-j;k++)
    236          //            {
    237          //               if(L3G4200_valu2[i][k] > L3G4200_valu2[i][k+1])  //前面的比后面的大  则进行交换
    238          //               {
    239          //                  temp = L3G4200_valu2[i][k+1];
    240          //                  L3G4200_valu2[i][k+1] = L3G4200_valu2[i][k];
    241          //                  L3G4200_valu2[i][k] = temp;
    242          //               }
    243          //            }
    244          //         }
    245          //      }
    246          //      for(i=0;i<2;i++)    //求中间三项的和
    247          //      {
    248          //         L3G4200_sum[i] = L3G4200_valu2[i][1] + L3G4200_valu2[i][2] + L3G4200_valu2[i][3];
    249          //         L3G4200_valu1[i] = L3G4200_sum[i] / 3;
    250          //      }
    251          //   ////////////////////////滑动平均滤波/////////////////////////////
    252          //      for(i = 0;i < 2;i ++)  //取中间3位的值到前三位
    253          //      {
    254          //          L3G4200_V[0][i] = L3G4200_valu2[0][i + 1];
    255          //          L3G4200_V[1][i] = L3G4200_valu2[1][i + 1];
    256          //      }
    257          //      for(i=0;i<2;i++)   //第三位存储平均值
    258          //      {
    259          //          L3G4200_V[i][2] =  L3G4200_valu1[i];
    260          //      }
    261          //         for(i = 0;i < 3;i ++)   //得到原中间三位的值
    262          //      {
    263          //          L3G4200_sum[0] += L3G4200_V[0][i];
    264          //          L3G4200_sum[1] += L3G4200_V[1][i];
    265          //      }
    266          //      for(i=0;i<3;i++)  //求平均
    267          //      {
    268          //          L3G4200_valu[i] = L3G4200_sum[i] / 3;
    269          //          L3G4200_sum[i] = 0;
    270          //      }
    271          //}
    272          
    273          
    274          

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       8   L3G4200_Init
         8   -> i2c_init
         8   -> i2c_read_reg
         8   -> i2c_write_reg
      16   L3G4200_ReData
        16   -> GpioGet
        16   -> GpioSet
        16   -> SPI_delay
       8   L3G4200_Read
         8   -> i2c_read_reg
         8 __aeabi_idiv
       8   L3G4200_Read_Reg
         8   -> SPI_ReadWrite
      16   L3G4200_WrCmd
        16   -> GpioSet
        16   -> SPI_delay
       8   L3G4200_Write_Reg
         8   -> SPI_ReadWrite
       8   SPI_ReadWrite
         8   -> L3G4200_ReData
         8   -> L3G4200_WrCmd
       4   SPI_delay


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable1
       4  ??DataTable1_1
       4  ??DataTable1_2
       4  ??DataTable1_3
       4  ??DataTable1_4
       4  ??DataTable1_5
       4  ??DataTable1_6
      86  L3G4200_Init
      78  L3G4200_ReData
     176  L3G4200_Read
      26  L3G4200_Read_Reg
      84  L3G4200_WrCmd
      20  L3G4200_Write_Reg
       4  L3G4200_valu
       8  SPI
      22  SPI_ReadWrite
      16  SPI_delay
       1  a
       1  b
       1  gyro_ID
       2  gyro_x
       2  gyro_y
       4  gyro_y_he
       1  gyro_y_num
       4  gyro_y_valu
       2  gyro_z

 
  22 bytes in section .bss
   8 bytes in section .data
 536 bytes in section .text
 
 536 bytes of CODE memory
  30 bytes of DATA memory

Errors: none
Warnings: none
